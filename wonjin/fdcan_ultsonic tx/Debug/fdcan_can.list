
fdcan_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000254  24000074  080080f4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002c8  080080f4  000202c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027d41  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003907  00000000  00000000  00047de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013b8  00000000  00000000  0004b6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012a0  00000000  00000000  0004caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000321e7  00000000  00000000  0004dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000189e9  00000000  00000000  0007ff2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149e92  00000000  00000000  00098918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e27aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005834  00000000  00000000  001e2800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007f8c 	.word	0x08007f8c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08007f8c 	.word	0x08007f8c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800068c:	4b51      	ldr	r3, [pc, #324]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 800068e:	4a52      	ldr	r2, [pc, #328]	; (80007d8 <MX_FDCAN1_Init+0x150>)
 8000690:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000692:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000698:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800069a:	4b4e      	ldr	r3, [pc, #312]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80006a0:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006a6:	4b4b      	ldr	r3, [pc, #300]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006ac:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80006b2:	4b48      	ldr	r3, [pc, #288]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006b8:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80006be:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006c0:	2205      	movs	r2, #5
 80006c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006c4:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006ca:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80006d0:	4b40      	ldr	r3, [pc, #256]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006d8:	2205      	movs	r2, #5
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80006dc:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006de:	2204      	movs	r2, #4
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80006e2:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80006e8:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80006f4:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006fa:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000700:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000702:	2200      	movs	r2, #0
 8000704:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000706:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000708:	2204      	movs	r2, #4
 800070a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 800070e:	2201      	movs	r2, #1
 8000710:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000714:	2204      	movs	r2, #4
 8000716:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 800071a:	2200      	movs	r2, #0
 800071c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 1;
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000720:	2201      	movs	r2, #1
 8000722:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000726:	2201      	movs	r2, #1
 8000728:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 800072c:	2200      	movs	r2, #0
 800072e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000732:	2204      	movs	r2, #4
 8000734:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000736:	4827      	ldr	r0, [pc, #156]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000738:	f000 ff50 	bl	80015dc <HAL_FDCAN_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000742:	f000 fad9 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_FDCAN1_Init+0x154>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_FDCAN1_Init+0x154>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_FDCAN1_Init+0x154>)
 8000754:	2202      	movs	r2, #2
 8000756:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_FDCAN1_Init+0x154>)
 800075a:	2201      	movs	r2, #1
 800075c:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x22; // ID Node2
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_FDCAN1_Init+0x154>)
 8000760:	2222      	movs	r2, #34	; 0x22
 8000762:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_FDCAN1_Init+0x154>)
 8000766:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800076a:	615a      	str	r2, [r3, #20]
    sFilterConfig.RxBufferIndex = 0;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_FDCAN1_Init+0x154>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
    //HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
    if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000772:	491a      	ldr	r1, [pc, #104]	; (80007dc <MX_FDCAN1_Init+0x154>)
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000776:	f001 f913 	bl	80019a0 <HAL_FDCAN_ConfigFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_FDCAN1_Init+0xfc>
           {
              Error_Handler();
 8000780:	f000 faba 	bl	8000cf8 <Error_Handler>
  //
  //  Error_Handler();
  //
  //  }
//    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
    if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <MX_FDCAN1_Init+0x14c>)
 8000786:	f001 f981 	bl	8001a8c <HAL_FDCAN_Start>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_FDCAN1_Init+0x10c>
      {
        Error_Handler();
 8000790:	f000 fab2 	bl	8000cf8 <Error_Handler>
//      {
//        /* Notification Error */
//        Error_Handler();
//      }

    TxHeader.Identifier = 0x33;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 8000796:	2233      	movs	r2, #51	; 0x33
 8000798:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 80007a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007ac:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 80007bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007c0:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x0;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_FDCAN1_Init+0x158>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	240000cc 	.word	0x240000cc
 80007d8:	4000a000 	.word	0x4000a000
 80007dc:	240000ac 	.word	0x240000ac
 80007e0:	2400016c 	.word	0x2400016c

080007e4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0b8      	sub	sp, #224	; 0xe0
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	22b8      	movs	r2, #184	; 0xb8
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f006 ff99 	bl	800773c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <HAL_FDCAN_MspInit+0xd0>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d14b      	bne.n	80008ac <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000818:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800081a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800081e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fa60 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000832:	f000 fa61 	bl	8000cf8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_FDCAN_MspInit+0xd4>)
 8000838:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <HAL_FDCAN_MspInit+0xd4>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000842:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_FDCAN_MspInit+0xd4>)
 8000848:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800084c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_FDCAN_MspInit+0xd4>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_FDCAN_MspInit+0xd4>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_FDCAN_MspInit+0xd4>)
 8000866:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000872:	2303      	movs	r3, #3
 8000874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800088a:	2309      	movs	r3, #9
 800088c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000894:	4619      	mov	r1, r3
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <HAL_FDCAN_MspInit+0xd8>)
 8000898:	f002 f874 	bl	8002984 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2013      	movs	r0, #19
 80008a2:	f000 fe66 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008a6:	2013      	movs	r0, #19
 80008a8:	f000 fe7d 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	37e0      	adds	r7, #224	; 0xe0
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	4000a000 	.word	0x4000a000
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020c00 	.word	0x58020c00

080008c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <MX_GPIO_Init+0xe8>)
 80008d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008dc:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <MX_GPIO_Init+0xe8>)
 80008de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <MX_GPIO_Init+0xe8>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <MX_GPIO_Init+0xe8>)
 80008f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <MX_GPIO_Init+0xe8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_GPIO_Init+0xe8>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_GPIO_Init+0xe8>)
 8000914:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000918:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <MX_GPIO_Init+0xe8>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_GPIO_Init+0xe8>)
 8000924:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_GPIO_Init+0xe8>)
 8000932:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_GPIO_Init+0xe8>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_GPIO_Init+0xe8>)
 8000942:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4816      	ldr	r0, [pc, #88]	; (80009ac <MX_GPIO_Init+0xec>)
 8000954:	f002 f9c6 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_GPIO_Init+0xf0>)
 8000960:	f002 f9c0 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000964:	2320      	movs	r3, #32
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_GPIO_Init+0xec>)
 800097c:	f002 f802 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_GPIO_Init+0xf0>)
 800099a:	f001 fff3 	bl	8002984 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	58024400 	.word	0x58024400
 80009ac:	58020000 	.word	0x58020000
 80009b0:	58020400 	.word	0x58020400

080009b4 <delay>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <delay+0x30>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 80009c6:	bf00      	nop
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <delay+0x30>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d3f9      	bcc.n	80009c8 <delay+0x14>
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	240001d8 	.word	0x240001d8

080009e8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7f1b      	ldrb	r3, [r3, #28]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d17a      	bne.n	8000aee <HAL_TIM_IC_CaptureCallback+0x106>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80009f8:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x118>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11a      	bne.n	8000a36 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000a00:	2100      	movs	r1, #0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f005 f95c 	bl	8005cc0 <HAL_TIM_ReadCapturedValue>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a0c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6a1a      	ldr	r2, [r3, #32]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 020a 	bic.w	r2, r2, #10
 8000a22:	621a      	str	r2, [r3, #32]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6a1a      	ldr	r2, [r3, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 0202 	orr.w	r2, r2, #2
 8000a32:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);//rising?���????????? ?��리거
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000a34:	e05b      	b.n	8000aee <HAL_TIM_IC_CaptureCallback+0x106>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d157      	bne.n	8000aee <HAL_TIM_IC_CaptureCallback+0x106>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000a3e:	2100      	movs	r1, #0
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f005 f93d 	bl	8005cc0 <HAL_TIM_ReadCapturedValue>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a4a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)//거리 측정
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d907      	bls.n	8000a70 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e00f      	b.n	8000a90 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)//?��버플로우�????????? 고려?�� 코드
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d909      	bls.n	8000a90 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1ad2      	subs	r2, r2, r3
 8000a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a8e:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;//x?��?��?�� cm�????????? ?��?��
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a9c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000af8 <HAL_TIM_IC_CaptureCallback+0x110>
 8000aa0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000aa4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000aa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ab0:	edc7 7a00 	vstr	s15, [r7]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000aba:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);//rising?���????????? ?��리거
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 020a 	bic.w	r2, r2, #10
 8000ad0:	621a      	str	r2, [r3, #32]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a12      	ldr	r2, [r2, #32]
 8000adc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0202 	bic.w	r2, r2, #2
 8000aec:	60da      	str	r2, [r3, #12]
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	b020c49c 	.word	0xb020c49c
 8000afc:	3fa16872 	.word	0x3fa16872
 8000b00:	2400009c 	.word	0x2400009c
 8000b04:	24000090 	.word	0x24000090
 8000b08:	24000094 	.word	0x24000094
 8000b0c:	24000098 	.word	0x24000098
 8000b10:	2400009d 	.word	0x2400009d
 8000b14:	240001d8 	.word	0x240001d8

08000b18 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2120      	movs	r1, #32
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <HCSR04_Read+0x34>)
 8000b22:	f002 f8df 	bl	8002ce4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000b26:	200a      	movs	r0, #10
 8000b28:	f7ff ff44 	bl	80009b4 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2120      	movs	r1, #32
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <HCSR04_Read+0x34>)
 8000b32:	f002 f8d7 	bl	8002ce4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HCSR04_Read+0x38>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HCSR04_Read+0x38>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f042 0202 	orr.w	r2, r2, #2
 8000b44:	60da      	str	r2, [r3, #12]
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	58020000 	.word	0x58020000
 8000b50:	240001d8 	.word	0x240001d8

08000b54 <HAL_FDCAN_RxFifo0Callback>:
int indx1 = 0;
int indx2= 0;
int indx3 = 0;
int indx4 = 0;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
//    printf("%s\r\n",);

//    HAL_Delay (1000);
   if(FDCAN1 == hfdcan->Instance){
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d119      	bne.n	8000b9c <HAL_FDCAN_RxFifo0Callback+0x48>
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d014      	beq.n	8000b9c <HAL_FDCAN_RxFifo0Callback+0x48>
  {

//       HAL_Delay (1000);
    /* Retreive Rx messages from RX FIFO0 */
     //?  기서?   �???? ? RX FIFO0?   ?  ?   ?  �???? ?? RxHeader ??????? 복사?   ??????? ?  ?  ?   ??????? RxData 배열 ??????? 복사?  ?  ?  .
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node2) != HAL_OK)
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 f80d 	bl	8001b98 <HAL_FDCAN_GetRxMessage>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_FDCAN_RxFifo0Callback+0x34>
    {
    /* Reception Error */
    Error_Handler();
 8000b84:	f000 f8b8 	bl	8000cf8 <Error_Handler>
//        {
//        /* Reception Error */
//        Error_Handler();
//        }
    //그런 ?  ?   ?   메시 ????????   ???   ?  림을 ?  ?   ?  ?  ?  ?  ?  ?  .
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f001 f971 	bl	8001e74 <HAL_FDCAN_ActivateNotification>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_FDCAN_RxFifo0Callback+0x48>
    {
      /* Notification Error */
      Error_Handler();
 8000b98:	f000 f8ae 	bl	8000cf8 <Error_Handler>
    }
    //FDCAN2 콜백 ??????? ?   ??????? ?  기서?   ?  ?  ?   ??????? ?  ?  ?   ??????? ?  ?  ?  ?  . while 루프?  ?   FDCAN1?   ?  ?   매초 ?  ?  ?   ??????? ?  ?  ?   ??????? ?  문입?  ?  .
   }
   }
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	4000a000 	.word	0x4000a000
 8000ba8:	240001c8 	.word	0x240001c8
 8000bac:	24000190 	.word	0x24000190

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f000 fb4c 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f830 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f7ff fe80 	bl	80008c0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000bc0:	f7ff fd62 	bl	8000688 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000bc4:	f000 fa68 	bl	8001098 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000bc8:	f000 f9a2 	bl	8000f10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <main+0x54>)
 8000bd0:	f004 fc72 	bl	80054b8 <HAL_TIM_IC_Start_IT>
//  		  	indx2=((int)i/10)%10;
//  		  	indx1= i%10;
//  		 }
//  		sprintf ((char *)TxData_Node3_To_Node2,"%d",Distance);

	  HCSR04_Read();
 8000bd4:	f7ff ffa0 	bl	8000b18 <HCSR04_Read>
	  sprintf ((char *)TxData_Node3_To_Node2,"%d",Distance);
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <main+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	490b      	ldr	r1, [pc, #44]	; (8000c0c <main+0x5c>)
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <main+0x60>)
 8000be2:	f006 fdb3 	bl	800774c <siprintf>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData_Node3_To_Node2)!= HAL_OK)
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <main+0x60>)
 8000be8:	490a      	ldr	r1, [pc, #40]	; (8000c14 <main+0x64>)
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <main+0x68>)
 8000bec:	f000 ff79 	bl	8001ae2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <main+0x4a>
	  		                           {
	  		                              Error_Handler();
 8000bf6:	f000 f87f 	bl	8000cf8 <Error_Handler>
	  		                           }

  		HAL_Delay(500);
 8000bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfe:	f000 fbb9 	bl	8001374 <HAL_Delay>
	  HCSR04_Read();
 8000c02:	e7e7      	b.n	8000bd4 <main+0x24>
 8000c04:	240001d8 	.word	0x240001d8
 8000c08:	2400009d 	.word	0x2400009d
 8000c0c:	08007fa4 	.word	0x08007fa4
 8000c10:	240001d0 	.word	0x240001d0
 8000c14:	2400016c 	.word	0x2400016c
 8000c18:	240000cc 	.word	0x240000cc

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09c      	sub	sp, #112	; 0x70
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	224c      	movs	r2, #76	; 0x4c
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 fd86 	bl	800773c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f006 fd80 	bl	800773c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f002 f86b 	bl	8002d18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <SystemClock_Config+0xd8>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <SystemClock_Config+0xd8>)
 8000c4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <SystemClock_Config+0xd8>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c5e:	bf00      	nop
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <SystemClock_Config+0xd8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c6c:	d1f8      	bne.n	8000c60 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c82:	2304      	movs	r3, #4
 8000c84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c86:	2308      	movs	r3, #8
 8000c88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c96:	230c      	movs	r3, #12
 8000c98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 f890 	bl	8002dcc <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cb2:	f000 f821 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	233f      	movs	r3, #63	; 0x3f
 8000cb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fc79 	bl	80035d4 <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ce8:	f000 f806 	bl	8000cf8 <Error_Handler>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3770      	adds	r7, #112	; 0x70
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58024800 	.word	0x58024800

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_MspInit+0x30>)
 8000d0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d10:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x30>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x30>)
 8000d1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	58024400 	.word	0x58024400

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 fad6 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <FDCAN1_IT0_IRQHandler+0x10>)
 8000d92:	f001 f8e9 	bl	8001f68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	240000cc 	.word	0x240000cc

08000da0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM3_IRQHandler+0x10>)
 8000da6:	f004 fcd7 	bl	8005758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240001d8 	.word	0x240001d8

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f006 fc72 	bl	80076cc <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	24100000 	.word	0x24100000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	240000a0 	.word	0x240000a0
 8000e1c:	240002c8 	.word	0x240002c8

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <SystemInit+0xd0>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <SystemInit+0xd0>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <SystemInit+0xd4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d807      	bhi.n	8000e50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <SystemInit+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 030f 	bic.w	r3, r3, #15
 8000e48:	4a2a      	ldr	r2, [pc, #168]	; (8000ef4 <SystemInit+0xd4>)
 8000e4a:	f043 0303 	orr.w	r3, r3, #3
 8000e4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <SystemInit+0xd8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <SystemInit+0xd8>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <SystemInit+0xd8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <SystemInit+0xd8>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4924      	ldr	r1, [pc, #144]	; (8000ef8 <SystemInit+0xd8>)
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <SystemInit+0xdc>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <SystemInit+0xd4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <SystemInit+0xd4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 030f 	bic.w	r3, r3, #15
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <SystemInit+0xd4>)
 8000e84:	f043 0303 	orr.w	r3, r3, #3
 8000e88:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <SystemInit+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <SystemInit+0xd8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <SystemInit+0xd8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <SystemInit+0xd8>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <SystemInit+0xe0>)
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <SystemInit+0xd8>)
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <SystemInit+0xe4>)
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <SystemInit+0xd8>)
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <SystemInit+0xe8>)
 8000eac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <SystemInit+0xd8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <SystemInit+0xd8>)
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <SystemInit+0xe8>)
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <SystemInit+0xd8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <SystemInit+0xd8>)
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <SystemInit+0xe8>)
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <SystemInit+0xd8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <SystemInit+0xd8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <SystemInit+0xd8>)
 8000ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <SystemInit+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <SystemInit+0xec>)
 8000ee0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ee4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	52002000 	.word	0x52002000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f00:	02020200 	.word	0x02020200
 8000f04:	01ff0000 	.word	0x01ff0000
 8000f08:	01010280 	.word	0x01010280
 8000f0c:	52004000 	.word	0x52004000

08000f10 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <MX_TIM3_Init+0xe0>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f44:	223f      	movs	r2, #63	; 0x3f
 8000f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f62:	4822      	ldr	r0, [pc, #136]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f64:	f004 f9f0 	bl	8005348 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000f6e:	f7ff fec3 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481b      	ldr	r0, [pc, #108]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f80:	f004 fda6 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f8a:	f7ff feb5 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f8e:	4817      	ldr	r0, [pc, #92]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000f90:	f004 fa31 	bl	80053f6 <HAL_TIM_IC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000f9a:	f7ff fead 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480f      	ldr	r0, [pc, #60]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000fae:	f005 f97b 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000fb8:	f7ff fe9e 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_TIM3_Init+0xdc>)
 8000fd4:	f004 fcdf 	bl	8005996 <HAL_TIM_IC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000fde:	f7ff fe8b 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240001d8 	.word	0x240001d8
 8000ff0:	40000400 	.word	0x40000400

08000ff4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_TIM_Base_MspInit+0x98>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d135      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HAL_TIM_Base_MspInit+0x9c>)
 8001018:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_TIM_Base_MspInit+0x9c>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_TIM_Base_MspInit+0x9c>)
 8001028:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_TIM_Base_MspInit+0x9c>)
 8001036:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <HAL_TIM_Base_MspInit+0x9c>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_TIM_Base_MspInit+0x9c>)
 8001046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001052:	2340      	movs	r3, #64	; 0x40
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001062:	2302      	movs	r3, #2
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0xa0>)
 800106e:	f001 fc89 	bl	8002984 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	201d      	movs	r0, #29
 8001078:	f000 fa7b 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800107c:	201d      	movs	r0, #29
 800107e:	f000 fa92 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40000400 	.word	0x40000400
 8001090:	58024400 	.word	0x58024400
 8001094:	58020000 	.word	0x58020000

08001098 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_USART3_UART_Init+0x90>)
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <MX_USART3_UART_Init+0x94>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010e2:	f005 f98d 	bl	8006400 <HAL_UART_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010ec:	f7ff fe04 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f0:	2100      	movs	r1, #0
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_USART3_UART_Init+0x90>)
 80010f4:	f006 fa20 	bl	8007538 <HAL_UARTEx_SetTxFifoThreshold>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fe:	f7ff fdfb 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <MX_USART3_UART_Init+0x90>)
 8001106:	f006 fa55 	bl	80075b4 <HAL_UARTEx_SetRxFifoThreshold>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001110:	f7ff fdf2 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_USART3_UART_Init+0x90>)
 8001116:	f006 f9d6 	bl	80074c6 <HAL_UARTEx_DisableFifoMode>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001120:	f7ff fdea 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	24000224 	.word	0x24000224
 800112c:	40004800 	.word	0x40004800

08001130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0b8      	sub	sp, #224	; 0xe0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	22b8      	movs	r2, #184	; 0xb8
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f006 faf3 	bl	800773c <memset>
  if(uartHandle->Instance==USART3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <HAL_UART_MspInit+0xc0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d142      	bne.n	80011e6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fdbc 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800117a:	f7ff fdbd 	bl	8000cf8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_UART_MspInit+0xc4>)
 8001180:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_UART_MspInit+0xc4>)
 8001186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0xc4>)
 8001190:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0xc4>)
 800119e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_UART_MspInit+0xc4>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_UART_MspInit+0xc4>)
 80011ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d4:	2307      	movs	r3, #7
 80011d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_UART_MspInit+0xc8>)
 80011e2:	f001 fbcf 	bl	8002984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011e6:	bf00      	nop
 80011e8:	37e0      	adds	r7, #224	; 0xe0
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40004800 	.word	0x40004800
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020c00 	.word	0x58020c00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001200:	f7ff fe0e 	bl	8000e20 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800122a:	f006 fa55 	bl	80076d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff fcbf 	bl	8000bb0 <main>
  bx  lr
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001238:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800123c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001240:	08008080 	.word	0x08008080
  ldr r2, =_sbss
 8001244:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001248:	240002c8 	.word	0x240002c8

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001256:	2003      	movs	r0, #3
 8001258:	f000 f980 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800125c:	f002 fb70 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 8001260:	4602      	mov	r2, r0
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_Init+0x68>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	4913      	ldr	r1, [pc, #76]	; (80012bc <HAL_Init+0x6c>)
 800126e:	5ccb      	ldrb	r3, [r1, r3]
 8001270:	f003 031f 	and.w	r3, r3, #31
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_Init+0x68>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_Init+0x6c>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_Init+0x70>)
 8001292:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <HAL_Init+0x74>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f814 	bl	80012c8 <HAL_InitTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e002      	b.n	80012b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012aa:	f7ff fd2b 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	58024400 	.word	0x58024400
 80012bc:	08007ff4 	.word	0x08007ff4
 80012c0:	24000004 	.word	0x24000004
 80012c4:	24000000 	.word	0x24000000

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_InitTick+0x60>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e021      	b.n	8001320 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_InitTick+0x64>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_InitTick+0x60>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f965 	bl	80015c2 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f92f 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x68>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2400000c 	.word	0x2400000c
 800132c:	24000000 	.word	0x24000000
 8001330:	24000008 	.word	0x24000008

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2400000c 	.word	0x2400000c
 8001358:	240002b4 	.word	0x240002b4

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	240002b4 	.word	0x240002b4

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2400000c 	.word	0x2400000c

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	05fa0000 	.word	0x05fa0000

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff29 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff40 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff90 	bl	80014b0 <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5f 	bl	800145c <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff33 	bl	8001420 <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa4 	bl	8001518 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b098      	sub	sp, #96	; 0x60
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80015e4:	4a84      	ldr	r2, [pc, #528]	; (80017f8 <HAL_FDCAN_Init+0x21c>)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4611      	mov	r1, r2
 80015ec:	224c      	movs	r2, #76	; 0x4c
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 f896 	bl	8007720 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e1ca      	b.n	8001994 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7e      	ldr	r2, [pc, #504]	; (80017fc <HAL_FDCAN_Init+0x220>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d106      	bne.n	8001616 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001610:	461a      	mov	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff f8da 	bl	80007e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0210 	bic.w	r2, r2, #16
 800163e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001640:	f7ff fe8c 	bl	800135c <HAL_GetTick>
 8001644:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001646:	e014      	b.n	8001672 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001648:	f7ff fe88 	bl	800135c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d90d      	bls.n	8001672 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2203      	movs	r2, #3
 800166a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e190      	b.n	8001994 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b08      	cmp	r3, #8
 800167e:	d0e3      	beq.n	8001648 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff fe64 	bl	800135c <HAL_GetTick>
 8001694:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001696:	e014      	b.n	80016c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001698:	f7ff fe60 	bl	800135c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d90d      	bls.n	80016c2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2203      	movs	r2, #3
 80016ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e168      	b.n	8001994 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0e3      	beq.n	8001698 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0202 	orr.w	r2, r2, #2
 80016de:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7c1b      	ldrb	r3, [r3, #16]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016f6:	619a      	str	r2, [r3, #24]
 80016f8:	e007      	b.n	800170a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001708:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7c5b      	ldrb	r3, [r3, #17]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d108      	bne.n	8001724 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001720:	619a      	str	r2, [r3, #24]
 8001722:	e007      	b.n	8001734 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699a      	ldr	r2, [r3, #24]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001732:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7c9b      	ldrb	r3, [r3, #18]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d108      	bne.n	800174e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	e007      	b.n	800175e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800175c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001782:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0210 	bic.w	r2, r2, #16
 8001792:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0204 	orr.w	r2, r2, #4
 80017aa:	619a      	str	r2, [r3, #24]
 80017ac:	e030      	b.n	8001810 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d02c      	beq.n	8001810 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d020      	beq.n	8001800 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0210 	orr.w	r2, r2, #16
 80017dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d114      	bne.n	8001810 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	619a      	str	r2, [r3, #24]
 80017f6:	e00b      	b.n	8001810 <HAL_FDCAN_Init+0x234>
 80017f8:	08007fa8 	.word	0x08007fa8
 80017fc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	3b01      	subs	r3, #1
 8001816:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	3b01      	subs	r3, #1
 800181e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001820:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001828:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	3b01      	subs	r3, #1
 8001832:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001838:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800183a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001844:	d115      	bne.n	8001872 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	3b01      	subs	r3, #1
 8001852:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001854:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	3b01      	subs	r3, #1
 800185c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800185e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	3b01      	subs	r3, #1
 8001868:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800186e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001870:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00a      	beq.n	8001890 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	4413      	add	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d012      	beq.n	80018c4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80018a6:	f023 0107 	bic.w	r1, r3, #7
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018b4:	4413      	add	r3, r2
 80018b6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d012      	beq.n	80018f2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80018d4:	f023 0107 	bic.w	r1, r3, #7
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018e2:	4413      	add	r3, r2
 80018e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d013      	beq.n	8001922 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001902:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001910:	4413      	add	r3, r2
 8001912:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001916:	011a      	lsls	r2, r3, #4
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001926:	2b00      	cmp	r3, #0
 8001928:	d013      	beq.n	8001952 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001932:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001940:	4413      	add	r3, r2
 8001942:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001946:	021a      	lsls	r2, r3, #8
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_FDCAN_Init+0x3c0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d107      	bne.n	800196c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f022 0203 	bic.w	r2, r2, #3
 800196a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fdf9 	bl	800257c <FDCAN_CalcultateRamBlockAddresses>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001990:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001994:	4618      	mov	r0, r3
 8001996:	3760      	adds	r7, #96	; 0x60
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	4000a000 	.word	0x4000a000

080019a0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80019b0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d002      	beq.n	80019be <HAL_FDCAN_ConfigFilter+0x1e>
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d157      	bne.n	8001a6e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d12b      	bne.n	8001a1e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b07      	cmp	r3, #7
 80019cc:	d10d      	bne.n	80019ea <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80019da:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80019e0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80019e2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00e      	b.n	8001a08 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019f6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80019fe:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e025      	b.n	8001a6a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	075a      	lsls	r2, r3, #29
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d103      	bne.n	8001a3c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	e006      	b.n	8001a4a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	079a      	lsls	r2, r3, #30
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3304      	adds	r3, #4
 8001a62:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e008      	b.n	8001a80 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
  }
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d111      	bne.n	8001ac4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e008      	b.n	8001ad6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aca:	f043 0204 	orr.w	r2, r3, #4
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
  }
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d141      	bne.n	8001b7e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b02:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e038      	b.n	8001b90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e026      	b.n	8001b90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fe95 	bl	8002888 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2101      	movs	r1, #1
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e008      	b.n	8001b90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b84:	f043 0208 	orr.w	r2, r3, #8
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
  }
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b08b      	sub	sp, #44	; 0x2c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001bb0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001bb2:	7efb      	ldrb	r3, [r7, #27]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	f040 814b 	bne.w	8001e50 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d14d      	bne.n	8001c5c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001bc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bd6:	f043 0220 	orr.w	r2, r3, #32
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e13e      	b.n	8001e62 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e12c      	b.n	8001e62 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c10:	0e1b      	lsrs	r3, r3, #24
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10b      	bne.n	8001c32 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001c22:	0fdb      	lsrs	r3, r3, #31
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c2c:	d101      	bne.n	8001c32 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	69f9      	ldr	r1, [r7, #28]
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	e069      	b.n	8001d30 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b41      	cmp	r3, #65	; 0x41
 8001c60:	d14d      	bne.n	8001cfe <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0ed      	b.n	8001e62 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0db      	b.n	8001e62 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cb2:	0e1b      	lsrs	r3, r3, #24
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10b      	bne.n	8001cd4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cc4:	0fdb      	lsrs	r3, r3, #31
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cce:	d101      	bne.n	8001cd4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	69f9      	ldr	r1, [r7, #28]
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	e018      	b.n	8001d30 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d309      	bcc.n	8001d1c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d0e:	f043 0220 	orr.w	r2, r3, #32
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0a2      	b.n	8001e62 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0c9b      	lsrs	r3, r3, #18
 8001d4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e005      	b.n	8001d60 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0e1b      	lsrs	r3, r3, #24
 8001db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0fda      	lsrs	r2, r3, #31
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	e00a      	b.n	8001dea <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	441a      	add	r2, r3
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	440b      	add	r3, r1
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	3301      	adds	r3, #1
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	0c1b      	lsrs	r3, r3, #16
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	461a      	mov	r2, r3
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d3eb      	bcc.n	8001dd4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d105      	bne.n	8001e0e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001e0c:	e01e      	b.n	8001e4c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b41      	cmp	r3, #65	; 0x41
 8001e12:	d105      	bne.n	8001e20 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001e1e:	e015      	b.n	8001e4c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b1f      	cmp	r3, #31
 8001e24:	d808      	bhi.n	8001e38 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001e36:	e009      	b.n	8001e4c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 021f 	and.w	r2, r3, #31
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f202 	lsl.w	r2, r1, r2
 8001e48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e008      	b.n	8001e62 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e56:	f043 0208 	orr.w	r2, r3, #8
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	372c      	adds	r7, #44	; 0x2c
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	08008004 	.word	0x08008004

08001e74 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e86:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d002      	beq.n	8001e94 <HAL_FDCAN_ActivateNotification+0x20>
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d155      	bne.n	8001f40 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eb2:	e014      	b.n	8001ede <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d108      	bne.n	8001ed6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0202 	orr.w	r2, r2, #2
 8001ed2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ed4:	e003      	b.n	8001ede <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2203      	movs	r2, #3
 8001edc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_FDCAN_ActivateNotification+0xec>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	6553      	str	r3, [r2, #84]	; 0x54
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0f9b      	lsrs	r3, r3, #30
 8001f36:	490b      	ldr	r1, [pc, #44]	; (8001f64 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e008      	b.n	8001f52 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	3fcfffff 	.word	0x3fcfffff
 8001f64:	4000a800 	.word	0x4000a800

08001f68 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b092      	sub	sp, #72	; 0x48
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001f70:	4b90      	ldr	r3, [pc, #576]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	079b      	lsls	r3, r3, #30
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001f78:	4b8e      	ldr	r3, [pc, #568]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	079b      	lsls	r3, r3, #30
 8001f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f80:	4013      	ands	r3, r2
 8001f82:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f98:	4013      	ands	r3, r2
 8001f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fc8:	4013      	ands	r3, r2
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fea:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d011      	beq.n	800202e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002020:	651a      	str	r2, [r3, #80]	; 0x50
 8002022:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fa5a 	bl	80024e2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01e      	beq.n	800207a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d017      	beq.n	800207a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800205c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800205e:	4013      	ands	r3, r2
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206a:	651a      	str	r2, [r3, #80]	; 0x50
 800206c:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa0b 	bl	8002490 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800207a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002086:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_FDCAN_IRQHandler+0x250>)
 8002088:	400b      	ands	r3, r1
 800208a:	6513      	str	r3, [r2, #80]	; 0x50
 800208c:	4a49      	ldr	r2, [pc, #292]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 800208e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002090:	0f9b      	lsrs	r3, r3, #30
 8002092:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f9c4 	bl	8002424 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800209c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_FDCAN_IRQHandler+0x250>)
 80020aa:	400b      	ands	r3, r1
 80020ac:	6513      	str	r3, [r2, #80]	; 0x50
 80020ae:	4a41      	ldr	r2, [pc, #260]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80020b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b2:	0f9b      	lsrs	r3, r3, #30
 80020b4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80020b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f9be 	bl	800243a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80020be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_FDCAN_IRQHandler+0x250>)
 80020cc:	400b      	ands	r3, r1
 80020ce:	6513      	str	r3, [r2, #80]	; 0x50
 80020d0:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	0f9b      	lsrs	r3, r3, #30
 80020d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80020d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fd3a 	bl	8000b54 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80020e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00d      	beq.n	8002102 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_FDCAN_IRQHandler+0x250>)
 80020ee:	400b      	ands	r3, r1
 80020f0:	6513      	str	r3, [r2, #80]	; 0x50
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	0f9b      	lsrs	r3, r3, #30
 80020f8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80020fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9a7 	bl	8002450 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210c:	2b00      	cmp	r3, #0
 800210e:	d011      	beq.n	8002134 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002126:	651a      	str	r2, [r3, #80]	; 0x50
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f999 	bl	8002466 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01e      	beq.n	8002180 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002164:	4013      	ands	r3, r2
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002170:	651a      	str	r2, [r3, #80]	; 0x50
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f97d 	bl	800247a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00f      	beq.n	80021bc <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021a4:	651a      	str	r2, [r3, #80]	; 0x50
 80021a6:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f97a 	bl	80024a6 <HAL_FDCAN_RxBufferNewMessageCallback>
 80021b2:	e003      	b.n	80021bc <HAL_FDCAN_IRQHandler+0x254>
 80021b4:	4000a800 	.word	0x4000a800
 80021b8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d011      	beq.n	80021ee <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021e0:	651a      	str	r2, [r3, #80]	; 0x50
 80021e2:	4b8d      	ldr	r3, [pc, #564]	; (8002418 <HAL_FDCAN_IRQHandler+0x4b0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f966 	bl	80024ba <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d011      	beq.n	8002220 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002212:	651a      	str	r2, [r3, #80]	; 0x50
 8002214:	4b80      	ldr	r3, [pc, #512]	; (8002418 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f957 	bl	80024ce <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00f      	beq.n	800225c <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002244:	651a      	str	r2, [r3, #80]	; 0x50
 8002246:	4b74      	ldr	r3, [pc, #464]	; (8002418 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002252:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002268:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_FDCAN_IRQHandler+0x4b4>)
 800226a:	400b      	ands	r3, r1
 800226c:	6513      	str	r3, [r2, #80]	; 0x50
 800226e:	4a6a      	ldr	r2, [pc, #424]	; (8002418 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	0f9b      	lsrs	r3, r3, #30
 8002274:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f946 	bl	800250a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	2b00      	cmp	r3, #0
 8002282:	d011      	beq.n	80022a8 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800228a:	4b64      	ldr	r3, [pc, #400]	; (800241c <HAL_FDCAN_IRQHandler+0x4b4>)
 800228c:	400b      	ands	r3, r1
 800228e:	6513      	str	r3, [r2, #80]	; 0x50
 8002290:	4a61      	ldr	r2, [pc, #388]	; (8002418 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	0f9b      	lsrs	r3, r3, #30
 8002296:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800229e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a5c      	ldr	r2, [pc, #368]	; (8002420 <HAL_FDCAN_IRQHandler+0x4b8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f040 80a6 	bne.w	8002400 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 809e 	beq.w	8002400 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	4013      	ands	r3, r2
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022e6:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	6a3a      	ldr	r2, [r7, #32]
 80022f0:	4013      	ands	r3, r2
 80022f2:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80022fe:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002316:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800232e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4013      	ands	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800234a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f8e7 	bl	8002520 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002360:	6a39      	ldr	r1, [r7, #32]
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8e7 	bl	8002536 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01b      	beq.n	80023ae <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d014      	beq.n	80023ae <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	b29b      	uxth	r3, r3
 800238e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800239a:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2240      	movs	r2, #64	; 0x40
 80023a2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6939      	ldr	r1, [r7, #16]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f8cf 	bl	800254c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80023bc:	69f9      	ldr	r1, [r7, #28]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8d0 	bl	8002564 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f873 	bl	80024f6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002410:	bf00      	nop
 8002412:	3748      	adds	r7, #72	; 0x48
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	4000a800 	.word	0x4000a800
 800241c:	3fcfffff 	.word	0x3fcfffff
 8002420:	4000a000 	.word	0x4000a000

08002424 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002592:	4ba7      	ldr	r3, [pc, #668]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002594:	4013      	ands	r3, r2
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	0091      	lsls	r1, r2, #2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	430b      	orrs	r3, r1
 80025a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	4413      	add	r3, r2
 80025c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025d2:	4b97      	ldr	r3, [pc, #604]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	0091      	lsls	r1, r2, #2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	430b      	orrs	r3, r1
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002614:	4b86      	ldr	r3, [pc, #536]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002616:	4013      	ands	r3, r2
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	0091      	lsls	r1, r2, #2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	430b      	orrs	r3, r1
 8002622:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800262e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	041a      	lsls	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800265e:	4013      	ands	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	0091      	lsls	r1, r2, #2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002676:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267e:	041a      	lsls	r2, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80026a4:	4b62      	ldr	r3, [pc, #392]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	0091      	lsls	r1, r2, #2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	430b      	orrs	r3, r1
 80026b2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	4413      	add	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80026d0:	4b57      	ldr	r3, [pc, #348]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	0091      	lsls	r1, r2, #2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	430b      	orrs	r3, r1
 80026de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	041a      	lsls	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	4413      	add	r3, r2
 8002708:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002714:	4013      	ands	r3, r2
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	0091      	lsls	r1, r2, #2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	430b      	orrs	r3, r1
 8002720:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800272c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002748:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	061a      	lsls	r2, r3, #24
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002762:	4413      	add	r3, r2
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	441a      	add	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	441a      	add	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	441a      	add	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d915      	bls.n	8002858 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800282c:	e006      	b.n	800283c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800282e:	bf00      	nop
 8002830:	ffff0003 	.word	0xffff0003
 8002834:	10002b00 	.word	0x10002b00
 8002838:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e010      	b.n	800287a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e005      	b.n	800286c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3304      	adds	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d3f3      	bcc.n	8002860 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80028a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e00a      	b.n	80028ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80028bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80028c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80028d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80028da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80028e0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3304      	adds	r3, #4
 800290a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	3304      	adds	r3, #4
 8002916:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e020      	b.n	8002960 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3303      	adds	r3, #3
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3302      	adds	r3, #2
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	440b      	add	r3, r1
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002936:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	440b      	add	r3, r1
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002944:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	440a      	add	r2, r1
 800294c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800294e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3304      	adds	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3304      	adds	r3, #4
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	4a06      	ldr	r2, [pc, #24]	; (8002980 <FDCAN_CopyMessageToRAM+0xf8>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	461a      	mov	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4293      	cmp	r3, r2
 8002970:	d3d5      	bcc.n	800291e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	3724      	adds	r7, #36	; 0x24
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	08008004 	.word	0x08008004

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002992:	4b89      	ldr	r3, [pc, #548]	; (8002bb8 <HAL_GPIO_Init+0x234>)
 8002994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002996:	e194      	b.n	8002cc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8186 	beq.w	8002cbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d005      	beq.n	80029c8 <HAL_GPIO_Init+0x44>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d130      	bne.n	8002a2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fe:	2201      	movs	r2, #1
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0201 	and.w	r2, r3, #1
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d017      	beq.n	8002a66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d123      	bne.n	8002aba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	69b9      	ldr	r1, [r7, #24]
 8002ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80e0 	beq.w	8002cbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_GPIO_Init+0x238>)
 8002afe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b02:	4a2e      	ldr	r2, [pc, #184]	; (8002bbc <HAL_GPIO_Init+0x238>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_GPIO_Init+0x238>)
 8002b0e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1a:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <HAL_GPIO_Init+0x23c>)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <HAL_GPIO_Init+0x240>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d052      	beq.n	8002bec <HAL_GPIO_Init+0x268>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_GPIO_Init+0x244>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_GPIO_Init+0x22e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <HAL_GPIO_Init+0x248>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <HAL_GPIO_Init+0x22a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <HAL_GPIO_Init+0x24c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d025      	beq.n	8002baa <HAL_GPIO_Init+0x226>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_GPIO_Init+0x250>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01f      	beq.n	8002ba6 <HAL_GPIO_Init+0x222>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_GPIO_Init+0x254>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x21e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1a      	ldr	r2, [pc, #104]	; (8002bdc <HAL_GPIO_Init+0x258>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <HAL_GPIO_Init+0x25c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x216>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_GPIO_Init+0x260>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x212>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_GPIO_Init+0x264>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x20e>
 8002b8e:	2309      	movs	r3, #9
 8002b90:	e02d      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002b92:	230a      	movs	r3, #10
 8002b94:	e02b      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e029      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e027      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e025      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e023      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e021      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e01f      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e01d      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e01b      	b.n	8002bee <HAL_GPIO_Init+0x26a>
 8002bb6:	bf00      	nop
 8002bb8:	58000080 	.word	0x58000080
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	58000400 	.word	0x58000400
 8002bc4:	58020000 	.word	0x58020000
 8002bc8:	58020400 	.word	0x58020400
 8002bcc:	58020800 	.word	0x58020800
 8002bd0:	58020c00 	.word	0x58020c00
 8002bd4:	58021000 	.word	0x58021000
 8002bd8:	58021400 	.word	0x58021400
 8002bdc:	58021800 	.word	0x58021800
 8002be0:	58021c00 	.word	0x58021c00
 8002be4:	58022000 	.word	0x58022000
 8002be8:	58022400 	.word	0x58022400
 8002bec:	2300      	movs	r3, #0
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	f002 0203 	and.w	r2, r2, #3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4093      	lsls	r3, r2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bfe:	4938      	ldr	r1, [pc, #224]	; (8002ce0 <HAL_GPIO_Init+0x35c>)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f ae63 	bne.w	8002998 <HAL_GPIO_Init+0x14>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	3724      	adds	r7, #36	; 0x24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	58000400 	.word	0x58000400

08002ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d00:	e003      	b.n	8002d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	619a      	str	r2, [r3, #24]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d00a      	beq.n	8002d42 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d001      	beq.n	8002d3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e040      	b.n	8002dc0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e03e      	b.n	8002dc0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d4a:	491f      	ldr	r1, [pc, #124]	; (8002dc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d52:	f7fe fb03 	bl	800135c <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d58:	e009      	b.n	8002d6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d5a:	f7fe faff 	bl	800135c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d68:	d901      	bls.n	8002d6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e028      	b.n	8002dc0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b1e      	cmp	r3, #30
 8002d80:	d008      	beq.n	8002d94 <HAL_PWREx_ConfigSupply+0x7c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b2e      	cmp	r3, #46	; 0x2e
 8002d86:	d005      	beq.n	8002d94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b1d      	cmp	r3, #29
 8002d8c:	d002      	beq.n	8002d94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b2d      	cmp	r3, #45	; 0x2d
 8002d92:	d114      	bne.n	8002dbe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002d94:	f7fe fae2 	bl	800135c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d9a:	e009      	b.n	8002db0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d9c:	f7fe fade 	bl	800135c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002daa:	d901      	bls.n	8002db0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e007      	b.n	8002dc0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d1ee      	bne.n	8002d9c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	58024800 	.word	0x58024800

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	; 0x30
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e3f3      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80b3 	beq.w	8002f52 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dec:	4b9e      	ldr	r3, [pc, #632]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002df6:	4b9c      	ldr	r3, [pc, #624]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d007      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46>
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	2b18      	cmp	r3, #24
 8002e06:	d112      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62>
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d10d      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	4b95      	ldr	r3, [pc, #596]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8098 	beq.w	8002f50 <HAL_RCC_OscConfig+0x184>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 8093 	bne.w	8002f50 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e3cb      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x7a>
 8002e38:	4b8b      	ldr	r3, [pc, #556]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a8a      	ldr	r2, [pc, #552]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e058      	b.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d112      	bne.n	8002e74 <HAL_RCC_OscConfig+0xa8>
 8002e4e:	4b86      	ldr	r3, [pc, #536]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a85      	ldr	r2, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b83      	ldr	r3, [pc, #524]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a82      	ldr	r2, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b80      	ldr	r3, [pc, #512]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7f      	ldr	r2, [pc, #508]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e041      	b.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d112      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a79      	ldr	r2, [pc, #484]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b77      	ldr	r3, [pc, #476]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a76      	ldr	r2, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b74      	ldr	r3, [pc, #464]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a73      	ldr	r2, [pc, #460]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e029      	b.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002eac:	d112      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002eae:	4b6e      	ldr	r3, [pc, #440]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6d      	ldr	r2, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a67      	ldr	r2, [pc, #412]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e011      	b.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
 8002ed4:	4b64      	ldr	r3, [pc, #400]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a63      	ldr	r2, [pc, #396]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a60      	ldr	r2, [pc, #384]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ef2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fa2c 	bl	800135c <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fa28 	bl	800135c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e355      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f1a:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x13c>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fa18 	bl	800135c <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fa14 	bl	800135c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e341      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f42:	4b49      	ldr	r3, [pc, #292]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x164>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 808c 	beq.w	8003078 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f60:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1ba>
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	2b18      	cmp	r3, #24
 8002f7a:	d137      	bne.n	8002fec <HAL_RCC_OscConfig+0x220>
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d132      	bne.n	8002fec <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e313      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f9e:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0219 	bic.w	r2, r3, #25
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	492f      	ldr	r1, [pc, #188]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb0:	f7fe f9d4 	bl	800135c <HAL_GetTick>
 8002fb4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe f9d0 	bl	800135c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e2fd      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	4920      	ldr	r1, [pc, #128]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fea:	e045      	b.n	8003078 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d026      	beq.n	8003042 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 0219 	bic.w	r2, r3, #25
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4919      	ldr	r1, [pc, #100]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fe f9a9 	bl	800135c <HAL_GetTick>
 800300a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300e:	f7fe f9a5 	bl	800135c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e2d2      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	490b      	ldr	r1, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	e01a      	b.n	8003078 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_RCC_OscConfig+0x29c>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe f985 	bl	800135c <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe f981 	bl	800135c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d903      	bls.n	800306c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e2ae      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
 8003068:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800306c:	4b99      	ldr	r3, [pc, #612]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ee      	bne.n	8003056 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d06a      	beq.n	800315a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003084:	4b93      	ldr	r3, [pc, #588]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800308e:	4b91      	ldr	r3, [pc, #580]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b08      	cmp	r3, #8
 8003098:	d007      	beq.n	80030aa <HAL_RCC_OscConfig+0x2de>
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b18      	cmp	r3, #24
 800309e:	d11b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x30c>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d116      	bne.n	80030d8 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030aa:	4b8a      	ldr	r3, [pc, #552]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2f6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e281      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030c2:	4b84      	ldr	r3, [pc, #528]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	4980      	ldr	r1, [pc, #512]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030d6:	e040      	b.n	800315a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030e0:	4b7c      	ldr	r3, [pc, #496]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a7b      	ldr	r2, [pc, #492]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80030e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe f936 	bl	800135c <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030f4:	f7fe f932 	bl	800135c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e25f      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003106:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003112:	4b70      	ldr	r3, [pc, #448]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	496c      	ldr	r1, [pc, #432]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003122:	4313      	orrs	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
 8003126:	e018      	b.n	800315a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003128:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a69      	ldr	r2, [pc, #420]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800312e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe f912 	bl	800135c <HAL_GetTick>
 8003138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800313c:	f7fe f90e 	bl	800135c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e23b      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800314e:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d036      	beq.n	80031d4 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d019      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003172:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe f8ef 	bl	800135c <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003182:	f7fe f8eb 	bl	800135c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e218      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003194:	4b4f      	ldr	r3, [pc, #316]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x3b6>
 80031a0:	e018      	b.n	80031d4 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	4b4c      	ldr	r3, [pc, #304]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	4a4b      	ldr	r2, [pc, #300]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe f8d5 	bl	800135c <HAL_GetTick>
 80031b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe f8d1 	bl	800135c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1fe      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031c8:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d036      	beq.n	800324e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d019      	beq.n	800321c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031e8:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a39      	ldr	r2, [pc, #228]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80031ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031f4:	f7fe f8b2 	bl	800135c <HAL_GetTick>
 80031f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031fc:	f7fe f8ae 	bl	800135c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1db      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x430>
 800321a:	e018      	b.n	800324e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800321c:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003226:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003228:	f7fe f898 	bl	800135c <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003230:	f7fe f894 	bl	800135c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1c1      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80af 	beq.w	80033ba <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800325c:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <HAL_RCC_OscConfig+0x50c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_RCC_OscConfig+0x50c>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003268:	f7fe f878 	bl	800135c <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003270:	f7fe f874 	bl	800135c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1a1      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x50c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4d8>
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	e05b      	b.n	800335c <HAL_RCC_OscConfig+0x590>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d117      	bne.n	80032dc <HAL_RCC_OscConfig+0x510>
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80032be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 80032ca:	f023 0304 	bic.w	r3, r3, #4
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	e044      	b.n	800335c <HAL_RCC_OscConfig+0x590>
 80032d2:	bf00      	nop
 80032d4:	58024400 	.word	0x58024400
 80032d8:	58024800 	.word	0x58024800
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d112      	bne.n	800330a <HAL_RCC_OscConfig+0x53e>
 80032e4:	4b95      	ldr	r3, [pc, #596]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a94      	ldr	r2, [pc, #592]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	4b92      	ldr	r3, [pc, #584]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a91      	ldr	r2, [pc, #580]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80032f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	4b8f      	ldr	r3, [pc, #572]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a8e      	ldr	r2, [pc, #568]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	e028      	b.n	800335c <HAL_RCC_OscConfig+0x590>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b85      	cmp	r3, #133	; 0x85
 8003310:	d112      	bne.n	8003338 <HAL_RCC_OscConfig+0x56c>
 8003312:	4b8a      	ldr	r3, [pc, #552]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a89      	ldr	r2, [pc, #548]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
 800331e:	4b87      	ldr	r3, [pc, #540]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a86      	ldr	r2, [pc, #536]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a83      	ldr	r2, [pc, #524]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e011      	b.n	800335c <HAL_RCC_OscConfig+0x590>
 8003338:	4b80      	ldr	r3, [pc, #512]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a7f      	ldr	r2, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
 8003344:	4b7d      	ldr	r3, [pc, #500]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a7c      	ldr	r2, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	4b7a      	ldr	r3, [pc, #488]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a79      	ldr	r2, [pc, #484]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d015      	beq.n	8003390 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fd fffa 	bl	800135c <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fd fff6 	bl	800135c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e121      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003382:	4b6e      	ldr	r3, [pc, #440]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ee      	beq.n	800336c <HAL_RCC_OscConfig+0x5a0>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd ffe4 	bl	800135c <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fd ffe0 	bl	800135c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e10b      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ee      	bne.n	8003398 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8100 	beq.w	80035c4 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033c4:	4b5d      	ldr	r3, [pc, #372]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033cc:	2b18      	cmp	r3, #24
 80033ce:	f000 80bb 	beq.w	8003548 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	f040 8095 	bne.w	8003506 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a56      	ldr	r2, [pc, #344]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80033e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fd ffb8 	bl	800135c <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd ffb4 	bl	800135c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0e1      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003402:	4b4e      	ldr	r3, [pc, #312]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340e:	4b4b      	ldr	r3, [pc, #300]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCC_OscConfig+0x774>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	430a      	orrs	r2, r1
 8003422:	4946      	ldr	r1, [pc, #280]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003424:	4313      	orrs	r3, r2
 8003426:	628b      	str	r3, [r1, #40]	; 0x28
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	3b01      	subs	r3, #1
 800342e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	3b01      	subs	r3, #1
 8003438:	025b      	lsls	r3, r3, #9
 800343a:	b29b      	uxth	r3, r3
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	3b01      	subs	r3, #1
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003458:	4938      	ldr	r1, [pc, #224]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800345a:	4313      	orrs	r3, r2
 800345c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	4a36      	ldr	r2, [pc, #216]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800346a:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800346c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800346e:	4b35      	ldr	r3, [pc, #212]	; (8003544 <HAL_RCC_OscConfig+0x778>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003476:	00d2      	lsls	r2, r2, #3
 8003478:	4930      	ldr	r1, [pc, #192]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800347a:	4313      	orrs	r3, r2
 800347c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800347e:	4b2f      	ldr	r3, [pc, #188]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f023 020c 	bic.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	492c      	ldr	r1, [pc, #176]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800348c:	4313      	orrs	r3, r2
 800348e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	f023 0202 	bic.w	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	4927      	ldr	r1, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	4a25      	ldr	r2, [pc, #148]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4a22      	ldr	r2, [pc, #136]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fd ff3d 	bl	800135c <HAL_GetTick>
 80034e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fd ff39 	bl	800135c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e066      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_OscConfig+0x770>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x71a>
 8003504:	e05e      	b.n	80035c4 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_RCC_OscConfig+0x770>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a0c      	ldr	r2, [pc, #48]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800350c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fd ff23 	bl	800135c <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd ff1f 	bl	800135c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e04c      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_OscConfig+0x770>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x74e>
 8003538:	e044      	b.n	80035c4 <HAL_RCC_OscConfig+0x7f8>
 800353a:	bf00      	nop
 800353c:	58024400 	.word	0x58024400
 8003540:	fffffc0c 	.word	0xfffffc0c
 8003544:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <HAL_RCC_OscConfig+0x804>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_OscConfig+0x804>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2b01      	cmp	r3, #1
 800355a:	d031      	beq.n	80035c0 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0203 	and.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d12a      	bne.n	80035c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d122      	bne.n	80035c0 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d11a      	bne.n	80035c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	0a5b      	lsrs	r3, r3, #9
 800358e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d111      	bne.n	80035c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	0e1b      	lsrs	r3, r3, #24
 80035b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3730      	adds	r7, #48	; 0x30
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	58024400 	.word	0x58024400

080035d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e19c      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e8:	4b8a      	ldr	r3, [pc, #552]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d910      	bls.n	8003618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b87      	ldr	r3, [pc, #540]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 020f 	bic.w	r2, r3, #15
 80035fe:	4985      	ldr	r1, [pc, #532]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b83      	ldr	r3, [pc, #524]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e184      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d010      	beq.n	8003646 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003630:	429a      	cmp	r2, r3
 8003632:	d908      	bls.n	8003646 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003634:	4b78      	ldr	r3, [pc, #480]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	4975      	ldr	r1, [pc, #468]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003642:	4313      	orrs	r3, r2
 8003644:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d010      	beq.n	8003674 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	4b70      	ldr	r3, [pc, #448]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800365e:	429a      	cmp	r2, r3
 8003660:	d908      	bls.n	8003674 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003662:	4b6d      	ldr	r3, [pc, #436]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	496a      	ldr	r1, [pc, #424]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003670:	4313      	orrs	r3, r2
 8003672:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800368c:	429a      	cmp	r2, r3
 800368e:	d908      	bls.n	80036a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003690:	4b61      	ldr	r3, [pc, #388]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	495e      	ldr	r1, [pc, #376]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	4b59      	ldr	r3, [pc, #356]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d908      	bls.n	80036d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036be:	4b56      	ldr	r3, [pc, #344]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4953      	ldr	r1, [pc, #332]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d908      	bls.n	80036fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f023 020f 	bic.w	r2, r3, #15
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4947      	ldr	r1, [pc, #284]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d055      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800370a:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4940      	ldr	r1, [pc, #256]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003718:	4313      	orrs	r3, r2
 800371a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d107      	bne.n	8003734 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d121      	bne.n	8003774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0f6      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d107      	bne.n	800374c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800373c:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d115      	bne.n	8003774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0ea      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d107      	bne.n	8003764 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003754:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0de      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0d6      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f023 0207 	bic.w	r2, r3, #7
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4925      	ldr	r1, [pc, #148]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd fde9 	bl	800135c <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378e:	f7fd fde5 	bl	800135c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0be      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d1eb      	bne.n	800378e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d208      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f023 020f 	bic.w	r2, r3, #15
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	490e      	ldr	r1, [pc, #56]	; (8003818 <HAL_RCC_ClockConfig+0x244>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d214      	bcs.n	800381c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 020f 	bic.w	r2, r3, #15
 80037fa:	4906      	ldr	r1, [pc, #24]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <HAL_RCC_ClockConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e086      	b.n	8003922 <HAL_RCC_ClockConfig+0x34e>
 8003814:	52002000 	.word	0x52002000
 8003818:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d010      	beq.n	800384a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003834:	429a      	cmp	r2, r3
 8003836:	d208      	bcs.n	800384a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003838:	4b3c      	ldr	r3, [pc, #240]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4939      	ldr	r1, [pc, #228]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 8003846:	4313      	orrs	r3, r2
 8003848:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d010      	beq.n	8003878 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003862:	429a      	cmp	r2, r3
 8003864:	d208      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003866:	4b31      	ldr	r3, [pc, #196]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	492e      	ldr	r1, [pc, #184]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 8003874:	4313      	orrs	r3, r2
 8003876:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003890:	429a      	cmp	r2, r3
 8003892:	d208      	bcs.n	80038a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4922      	ldr	r1, [pc, #136]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d010      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038be:	429a      	cmp	r2, r3
 80038c0:	d208      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4917      	ldr	r1, [pc, #92]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80038d4:	f000 f834 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	4912      	ldr	r1, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x35c>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_RCC_ClockConfig+0x358>)
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <HAL_RCC_ClockConfig+0x35c>)
 80038fc:	5cd3      	ldrb	r3, [r2, r3]
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x360>)
 800390a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x364>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x368>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd fcd6 	bl	80012c8 <HAL_InitTick>
 800391c:	4603      	mov	r3, r0
 800391e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	58024400 	.word	0x58024400
 8003930:	08007ff4 	.word	0x08007ff4
 8003934:	24000004 	.word	0x24000004
 8003938:	24000000 	.word	0x24000000
 800393c:	24000008 	.word	0x24000008

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003946:	4bb3      	ldr	r3, [pc, #716]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800394e:	2b18      	cmp	r3, #24
 8003950:	f200 8155 	bhi.w	8003bfe <HAL_RCC_GetSysClockFreq+0x2be>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	080039c1 	.word	0x080039c1
 8003960:	08003bff 	.word	0x08003bff
 8003964:	08003bff 	.word	0x08003bff
 8003968:	08003bff 	.word	0x08003bff
 800396c:	08003bff 	.word	0x08003bff
 8003970:	08003bff 	.word	0x08003bff
 8003974:	08003bff 	.word	0x08003bff
 8003978:	08003bff 	.word	0x08003bff
 800397c:	080039e7 	.word	0x080039e7
 8003980:	08003bff 	.word	0x08003bff
 8003984:	08003bff 	.word	0x08003bff
 8003988:	08003bff 	.word	0x08003bff
 800398c:	08003bff 	.word	0x08003bff
 8003990:	08003bff 	.word	0x08003bff
 8003994:	08003bff 	.word	0x08003bff
 8003998:	08003bff 	.word	0x08003bff
 800399c:	080039ed 	.word	0x080039ed
 80039a0:	08003bff 	.word	0x08003bff
 80039a4:	08003bff 	.word	0x08003bff
 80039a8:	08003bff 	.word	0x08003bff
 80039ac:	08003bff 	.word	0x08003bff
 80039b0:	08003bff 	.word	0x08003bff
 80039b4:	08003bff 	.word	0x08003bff
 80039b8:	08003bff 	.word	0x08003bff
 80039bc:	080039f3 	.word	0x080039f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039c0:	4b94      	ldr	r3, [pc, #592]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039cc:	4b91      	ldr	r3, [pc, #580]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	4a90      	ldr	r2, [pc, #576]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
 80039dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80039de:	e111      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039e0:	4b8d      	ldr	r3, [pc, #564]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039e2:	61bb      	str	r3, [r7, #24]
    break;
 80039e4:	e10e      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80039e6:	4b8d      	ldr	r3, [pc, #564]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039e8:	61bb      	str	r3, [r7, #24]
    break;
 80039ea:	e10b      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039ee:	61bb      	str	r3, [r7, #24]
    break;
 80039f0:	e108      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80039fc:	4b85      	ldr	r3, [pc, #532]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a08:	4b82      	ldr	r3, [pc, #520]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a12:	4b80      	ldr	r3, [pc, #512]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80e1 	beq.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f000 8083 	beq.w	8003b44 <HAL_RCC_GetSysClockFreq+0x204>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	f200 80a1 	bhi.w	8003b88 <HAL_RCC_GetSysClockFreq+0x248>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x114>
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d056      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a52:	e099      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02d      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a60:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	4a6b      	ldr	r2, [pc, #428]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	ee07 3a90 	vmov	s15, r3
 8003a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003aba:	e087      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ae2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003afe:	e065      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b12:	4b40      	ldr	r3, [pc, #256]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b42:	e043      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b86:	e021      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	0a5b      	lsrs	r3, r3, #9
 8003bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf0:	ee17 3a90 	vmov	r3, s15
 8003bf4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003bf6:	e005      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
    break;
 8003bfc:	e002      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c00:	61bb      	str	r3, [r7, #24]
    break;
 8003c02:	bf00      	nop
  }

  return sysclockfreq;
 8003c04:	69bb      	ldr	r3, [r7, #24]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	58024400 	.word	0x58024400
 8003c18:	03d09000 	.word	0x03d09000
 8003c1c:	003d0900 	.word	0x003d0900
 8003c20:	016e3600 	.word	0x016e3600
 8003c24:	46000000 	.word	0x46000000
 8003c28:	4c742400 	.word	0x4c742400
 8003c2c:	4a742400 	.word	0x4a742400
 8003c30:	4bb71b00 	.word	0x4bb71b00

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003c3a:	f7ff fe81 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	490f      	ldr	r1, [pc, #60]	; (8003c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c4c:	5ccb      	ldrb	r3, [r1, r3]
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	58024400 	.word	0x58024400
 8003c88:	08007ff4 	.word	0x08007ff4
 8003c8c:	24000004 	.word	0x24000004
 8003c90:	24000000 	.word	0x24000000

08003c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003c98:	f7ff ffcc 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	08007ff4 	.word	0x08007ff4

08003cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003cc4:	f7ff ffb6 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	08007ff4 	.word	0x08007ff4

08003cec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d03f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d10:	d02a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d16:	d824      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1c:	d018      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d22:	d81e      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2c:	d007      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d2e:	e018      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d30:	4ba6      	ldr	r3, [pc, #664]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	4aa5      	ldr	r2, [pc, #660]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d3c:	e015      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f99b 	bl	8005080 <RCCEx_PLL2_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d4e:	e00c      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3324      	adds	r3, #36	; 0x24
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fa44 	bl	80051e4 <RCCEx_PLL3_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d70:	4b96      	ldr	r3, [pc, #600]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7c:	4993      	ldr	r1, [pc, #588]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	650b      	str	r3, [r1, #80]	; 0x50
 8003d82:	e001      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d03d      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d826      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003db9 	.word	0x08003db9
 8003da8:	08003dc7 	.word	0x08003dc7
 8003dac:	08003dd9 	.word	0x08003dd9
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df1 	.word	0x08003df1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4b84      	ldr	r3, [pc, #528]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4a83      	ldr	r2, [pc, #524]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dc4:	e015      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 f957 	bl	8005080 <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dd6:	e00c      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fa00 	bl	80051e4 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
      break;
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df8:	4b74      	ldr	r3, [pc, #464]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	f023 0207 	bic.w	r2, r3, #7
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	4971      	ldr	r1, [pc, #452]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	650b      	str	r3, [r1, #80]	; 0x50
 8003e0a:	e001      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d04a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e24:	d031      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003e26:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e2a:	d82b      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e30:	d02d      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e36:	d825      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e38:	2bc0      	cmp	r3, #192	; 0xc0
 8003e3a:	d02a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e3c:	2bc0      	cmp	r3, #192	; 0xc0
 8003e3e:	d821      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d016      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e44:	2b80      	cmp	r3, #128	; 0x80
 8003e46:	d81d      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d007      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003e50:	e018      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e52:	4b5e      	ldr	r3, [pc, #376]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	4a5d      	ldr	r2, [pc, #372]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e5e:	e019      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 f90a 	bl	8005080 <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e70:	e010      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3324      	adds	r3, #36	; 0x24
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 f9b3 	bl	80051e4 <RCCEx_PLL3_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e82:	e007      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75fb      	strb	r3, [r7, #23]
      break;
 8003e88:	e004      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e9a:	4b4c      	ldr	r3, [pc, #304]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	4949      	ldr	r1, [pc, #292]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	650b      	str	r3, [r1, #80]	; 0x50
 8003eac:	e001      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04f      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003ec6:	d036      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003ec8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003ecc:	d830      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed2:	d032      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed8:	d82a      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003eda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ede:	d02e      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003ee0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ee4:	d824      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eea:	d018      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef0:	d81e      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d007      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003efc:	e018      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efe:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f0a:	e019      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f8b4 	bl	8005080 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f1c:	e010      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f95d 	bl	80051e4 <RCCEx_PLL3_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f2e:	e007      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      break;
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	491e      	ldr	r1, [pc, #120]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	650b      	str	r3, [r1, #80]	; 0x50
 8003f58:	e001      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d034      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6e:	2b30      	cmp	r3, #48	; 0x30
 8003f70:	d01c      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003f72:	2b30      	cmp	r3, #48	; 0x30
 8003f74:	d817      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d813      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d10f      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003f92:	e00e      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	2102      	movs	r1, #2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 f870 	bl	8005080 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc4:	4901      	ldr	r1, [pc, #4]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fca:	e003      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003fcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d047      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe8:	d030      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fee:	d82a      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ff4:	d02c      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003ff6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ffa:	d824      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004000:	d018      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004006:	d81e      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d007      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004012:	e018      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4bb0      	ldr	r3, [pc, #704]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4aaf      	ldr	r2, [pc, #700]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004020:	e017      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f001 f829 	bl	8005080 <RCCEx_PLL2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004032:	e00e      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3324      	adds	r3, #36	; 0x24
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f8d2 	bl	80051e4 <RCCEx_PLL3_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004044:	e005      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004058:	4b9f      	ldr	r3, [pc, #636]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800405a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	499c      	ldr	r1, [pc, #624]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004066:	4313      	orrs	r3, r2
 8004068:	650b      	str	r3, [r1, #80]	; 0x50
 800406a:	e001      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d049      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004084:	d02e      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004086:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408a:	d828      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800408c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004090:	d02a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004092:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004096:	d822      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004098:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800409c:	d026      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 800409e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040a2:	d81c      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a8:	d010      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80040aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ae:	d816      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01d      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d111      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 ffdd 	bl	8005080 <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040ca:	e012      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3324      	adds	r3, #36	; 0x24
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 f886 	bl	80051e4 <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040dc:	e009      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
      break;
 80040e2:	e006      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040e4:	bf00      	nop
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040e8:	bf00      	nop
 80040ea:	e002      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040f8:	4b77      	ldr	r3, [pc, #476]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004104:	4974      	ldr	r1, [pc, #464]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004106:	4313      	orrs	r3, r2
 8004108:	650b      	str	r3, [r1, #80]	; 0x50
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d053      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004122:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004126:	d034      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004128:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800412c:	d82e      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800412e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004132:	d030      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004138:	d828      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d02c      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d822      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800414a:	d028      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800414c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004150:	d81c      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004156:	d010      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415c:	d816      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01f      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004166:	d111      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f000 ff86 	bl	8005080 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004178:	e014      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3324      	adds	r3, #36	; 0x24
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f82f 	bl	80051e4 <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800418a:	e00b      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
      break;
 8004190:	e008      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004192:	bf00      	nop
 8004194:	e006      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041aa:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041b8:	4947      	ldr	r1, [pc, #284]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	658b      	str	r3, [r1, #88]	; 0x58
 80041be:	e001      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02f      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d8:	d00e      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80041da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041de:	d814      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80041e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e8:	d10f      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041f6:	e00c      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 ff3e 	bl	8005080 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
      break;
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004224:	492c      	ldr	r1, [pc, #176]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	650b      	str	r3, [r1, #80]	; 0x50
 800422a:	e001      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d032      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	2b03      	cmp	r3, #3
 8004242:	d81b      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	08004283 	.word	0x08004283
 8004250:	0800425d 	.word	0x0800425d
 8004254:	0800426b 	.word	0x0800426b
 8004258:	08004283 	.word	0x08004283
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004268:	e00c      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f000 ff05 	bl	8005080 <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800427a:	e003      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8004282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	f023 0203 	bic.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4910      	ldr	r1, [pc, #64]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004298:	4313      	orrs	r3, r2
 800429a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800429c:	e001      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 808a 	beq.w	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042bc:	f7fd f84e 	bl	800135c <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c2:	e00d      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c4:	f7fd f84a 	bl	800135c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d906      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	75fb      	strb	r3, [r7, #23]
        break;
 80042d6:	e009      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x600>
 80042d8:	58024400 	.word	0x58024400
 80042dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e0:	4bba      	ldr	r3, [pc, #744]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0eb      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d166      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042f2:	4bb7      	ldr	r3, [pc, #732]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042fc:	4053      	eors	r3, r2
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d013      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004306:	4bb2      	ldr	r3, [pc, #712]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004310:	4baf      	ldr	r3, [pc, #700]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4aae      	ldr	r2, [pc, #696]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800431c:	4bac      	ldr	r3, [pc, #688]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	4aab      	ldr	r2, [pc, #684]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004328:	4aa9      	ldr	r2, [pc, #676]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004338:	d115      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd f80f 	bl	800135c <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004340:	e00b      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fd f80b 	bl	800135c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d902      	bls.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	75fb      	strb	r3, [r7, #23]
            break;
 8004358:	e005      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800435a:	4b9d      	ldr	r3, [pc, #628]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ed      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d126      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437a:	d10d      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800437c:	4b94      	ldr	r3, [pc, #592]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800438a:	0919      	lsrs	r1, r3, #4
 800438c:	4b91      	ldr	r3, [pc, #580]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800438e:	400b      	ands	r3, r1
 8004390:	498f      	ldr	r1, [pc, #572]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	610b      	str	r3, [r1, #16]
 8004396:	e005      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004398:	4b8d      	ldr	r3, [pc, #564]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4a8c      	ldr	r2, [pc, #560]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800439e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043a2:	6113      	str	r3, [r2, #16]
 80043a4:	4b8a      	ldr	r3, [pc, #552]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b2:	4987      	ldr	r1, [pc, #540]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	670b      	str	r3, [r1, #112]	; 0x70
 80043b8:	e004      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	75bb      	strb	r3, [r7, #22]
 80043be:	e001      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d07f      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d6:	2b28      	cmp	r3, #40	; 0x28
 80043d8:	d866      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	080044af 	.word	0x080044af
 80043e4:	080044a9 	.word	0x080044a9
 80043e8:	080044a9 	.word	0x080044a9
 80043ec:	080044a9 	.word	0x080044a9
 80043f0:	080044a9 	.word	0x080044a9
 80043f4:	080044a9 	.word	0x080044a9
 80043f8:	080044a9 	.word	0x080044a9
 80043fc:	080044a9 	.word	0x080044a9
 8004400:	08004485 	.word	0x08004485
 8004404:	080044a9 	.word	0x080044a9
 8004408:	080044a9 	.word	0x080044a9
 800440c:	080044a9 	.word	0x080044a9
 8004410:	080044a9 	.word	0x080044a9
 8004414:	080044a9 	.word	0x080044a9
 8004418:	080044a9 	.word	0x080044a9
 800441c:	080044a9 	.word	0x080044a9
 8004420:	08004497 	.word	0x08004497
 8004424:	080044a9 	.word	0x080044a9
 8004428:	080044a9 	.word	0x080044a9
 800442c:	080044a9 	.word	0x080044a9
 8004430:	080044a9 	.word	0x080044a9
 8004434:	080044a9 	.word	0x080044a9
 8004438:	080044a9 	.word	0x080044a9
 800443c:	080044a9 	.word	0x080044a9
 8004440:	080044af 	.word	0x080044af
 8004444:	080044a9 	.word	0x080044a9
 8004448:	080044a9 	.word	0x080044a9
 800444c:	080044a9 	.word	0x080044a9
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044a9 	.word	0x080044a9
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044a9 	.word	0x080044a9
 8004460:	080044af 	.word	0x080044af
 8004464:	080044a9 	.word	0x080044a9
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044a9 	.word	0x080044a9
 8004474:	080044a9 	.word	0x080044a9
 8004478:	080044a9 	.word	0x080044a9
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044af 	.word	0x080044af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	2101      	movs	r1, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fdf8 	bl	8005080 <RCCEx_PLL2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004494:	e00c      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3324      	adds	r3, #36	; 0x24
 800449a:	2101      	movs	r1, #1
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fea1 	bl	80051e4 <RCCEx_PLL3_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044a6:	e003      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80044ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044b6:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c4:	4942      	ldr	r1, [pc, #264]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	654b      	str	r3, [r1, #84]	; 0x54
 80044ca:	e001      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d038      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d821      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	0800452f 	.word	0x0800452f
 80044f0:	08004505 	.word	0x08004505
 80044f4:	08004517 	.word	0x08004517
 80044f8:	0800452f 	.word	0x0800452f
 80044fc:	0800452f 	.word	0x0800452f
 8004500:	0800452f 	.word	0x0800452f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fdb8 	bl	8005080 <RCCEx_PLL2_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004514:	e00c      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3324      	adds	r3, #36	; 0x24
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fe61 	bl	80051e4 <RCCEx_PLL3_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004526:	e003      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]
      break;
 800452c:	e000      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800452e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f023 0207 	bic.w	r2, r3, #7
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004542:	4923      	ldr	r1, [pc, #140]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	654b      	str	r3, [r1, #84]	; 0x54
 8004548:	e001      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d040      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004560:	2b05      	cmp	r3, #5
 8004562:	d821      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045af 	.word	0x080045af
 8004570:	08004585 	.word	0x08004585
 8004574:	08004597 	.word	0x08004597
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fd78 	bl	8005080 <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004594:	e00c      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3324      	adds	r3, #36	; 0x24
 800459a:	2101      	movs	r1, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fe21 	bl	80051e4 <RCCEx_PLL3_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	75fb      	strb	r3, [r7, #23]
      break;
 80045ac:	e000      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80045ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d110      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	f023 0207 	bic.w	r2, r3, #7
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c4:	4902      	ldr	r1, [pc, #8]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	658b      	str	r3, [r1, #88]	; 0x58
 80045ca:	e007      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80045cc:	58024800 	.word	0x58024800
 80045d0:	58024400 	.word	0x58024400
 80045d4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d04b      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f2:	d02e      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80045f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f8:	d828      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d02a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d822      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800460a:	d026      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800460c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004610:	d81c      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004616:	d010      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461c:	d816      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01d      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004626:	d111      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fd26 	bl	8005080 <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004638:	e012      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3324      	adds	r3, #36	; 0x24
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fdcf 	bl	80051e4 <RCCEx_PLL3_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800464a:	e009      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75fb      	strb	r3, [r7, #23]
      break;
 8004650:	e006      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004652:	bf00      	nop
 8004654:	e004      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800465e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004666:	4bb3      	ldr	r3, [pc, #716]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004674:	49af      	ldr	r1, [pc, #700]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004676:	4313      	orrs	r3, r2
 8004678:	654b      	str	r3, [r1, #84]	; 0x54
 800467a:	e001      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d04b      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004692:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004696:	d02e      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004698:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800469c:	d828      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d02a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	d822      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80046aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ae:	d026      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80046b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b4:	d81c      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80046b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ba:	d010      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d816      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01d      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ca:	d111      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fcd4 	bl	8005080 <RCCEx_PLL2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046dc:	e012      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3324      	adds	r3, #36	; 0x24
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fd7d 	bl	80051e4 <RCCEx_PLL3_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
      break;
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80046f6:	bf00      	nop
 80046f8:	e004      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800470a:	4b8a      	ldr	r3, [pc, #552]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004718:	4986      	ldr	r1, [pc, #536]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800471a:	4313      	orrs	r3, r2
 800471c:	658b      	str	r3, [r1, #88]	; 0x58
 800471e:	e001      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d04b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004736:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800473a:	d02e      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800473c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004740:	d828      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004746:	d02a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474c:	d822      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800474e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004752:	d026      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004754:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004758:	d81c      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800475e:	d010      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004764:	d816      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01d      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d111      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fc82 	bl	8005080 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004780:	e012      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd2b 	bl	80051e4 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004792:	e009      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
      break;
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800479a:	bf00      	nop
 800479c:	e004      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80047a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047ae:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047bc:	495d      	ldr	r1, [pc, #372]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	658b      	str	r3, [r1, #88]	; 0x58
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d10a      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fcfc 	bl	80051e4 <RCCEx_PLL3_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047f6:	4b4f      	ldr	r3, [pc, #316]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	494b      	ldr	r1, [pc, #300]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004806:	4313      	orrs	r3, r2
 8004808:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800481c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004820:	d10a      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3324      	adds	r3, #36	; 0x24
 8004826:	2102      	movs	r1, #2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fcdb 	bl	80051e4 <RCCEx_PLL3_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004838:	4b3e      	ldr	r3, [pc, #248]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004846:	493b      	ldr	r1, [pc, #236]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004848:	4313      	orrs	r3, r2
 800484a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d034      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800485e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004862:	d01d      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004868:	d817      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004872:	d009      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004874:	e011      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fbff 	bl	8005080 <RCCEx_PLL2_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004886:	e00c      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3324      	adds	r3, #36	; 0x24
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fca8 	bl	80051e4 <RCCEx_PLL3_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
      break;
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80048a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a8:	4b22      	ldr	r3, [pc, #136]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048b6:	491f      	ldr	r1, [pc, #124]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	658b      	str	r3, [r1, #88]	; 0x58
 80048bc:	e001      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d036      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d8:	d01c      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80048da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048de:	d816      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80048e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80048e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ea:	d007      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80048ec:	e00f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048fa:	e00c      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3324      	adds	r3, #36	; 0x24
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fc6e 	bl	80051e4 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
      break;
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10d      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492a:	4902      	ldr	r1, [pc, #8]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800492c:	4313      	orrs	r3, r2
 800492e:	654b      	str	r3, [r1, #84]	; 0x54
 8004930:	e004      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004932:	bf00      	nop
 8004934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d029      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d007      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004956:	e00f      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004958:	4b69      	ldr	r3, [pc, #420]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4a68      	ldr	r2, [pc, #416]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800495e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004964:	e00b      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	2102      	movs	r1, #2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fb87 	bl	8005080 <RCCEx_PLL2_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004976:	e002      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
      break;
 800497c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004984:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	495b      	ldr	r1, [pc, #364]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004992:	4313      	orrs	r3, r2
 8004994:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004996:	e001      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3324      	adds	r3, #36	; 0x24
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fc18 	bl	80051e4 <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d032      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d4:	d017      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049da:	d811      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d013      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d80b      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d010      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d106      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f2:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	4a42      	ldr	r2, [pc, #264]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049fe:	e007      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
      break;
 8004a04:	e004      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004a06:	bf00      	nop
 8004a08:	e002      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a16:	4b3a      	ldr	r3, [pc, #232]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a24:	4936      	ldr	r1, [pc, #216]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	654b      	str	r3, [r1, #84]	; 0x54
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a3c:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a48:	492d      	ldr	r1, [pc, #180]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a5a:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a66:	4926      	ldr	r1, [pc, #152]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	491e      	ldr	r1, [pc, #120]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004aa0:	6113      	str	r3, [r2, #16]
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004aac:	4914      	ldr	r1, [pc, #80]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da08      	bge.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	490e      	ldr	r1, [pc, #56]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	4906      	ldr	r1, [pc, #24]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004aec:	7dbb      	ldrb	r3, [r7, #22]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	58024400 	.word	0x58024400

08004b04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004b08:	f7ff f894 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4904      	ldr	r1, [pc, #16]	; (8004b2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	08007ff4 	.word	0x08007ff4

08004b30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	; 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b38:	4ba1      	ldr	r3, [pc, #644]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b42:	4b9f      	ldr	r3, [pc, #636]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	0b1b      	lsrs	r3, r3, #12
 8004b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b4e:	4b9c      	ldr	r3, [pc, #624]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b5a:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8111 	beq.w	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f000 8083 	beq.w	8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	f200 80a1 	bhi.w	8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d056      	beq.n	8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b9a:	e099      	b.n	8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9c:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02d      	beq.n	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ba8:	4b85      	ldr	r3, [pc, #532]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	08db      	lsrs	r3, r3, #3
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	4a84      	ldr	r2, [pc, #528]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b7b      	ldr	r3, [pc, #492]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c02:	e087      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c16:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c46:	e065      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c8a:	e043      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cce:	e021      	b.n	8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	0a5b      	lsrs	r3, r3, #9
 8004d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3a:	ee17 2a90 	vmov	r2, s15
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d42:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d68:	ee17 2a90 	vmov	r2, s15
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	0e1b      	lsrs	r3, r3, #24
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d96:	ee17 2a90 	vmov	r2, s15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	03d09000 	.word	0x03d09000
 8004dc8:	46000000 	.word	0x46000000
 8004dcc:	4c742400 	.word	0x4c742400
 8004dd0:	4a742400 	.word	0x4a742400
 8004dd4:	4bb71b00 	.word	0x4bb71b00

08004dd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004de0:	4ba1      	ldr	r3, [pc, #644]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004dea:	4b9f      	ldr	r3, [pc, #636]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	0d1b      	lsrs	r3, r3, #20
 8004df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004df6:	4b9c      	ldr	r3, [pc, #624]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e02:	4b99      	ldr	r3, [pc, #612]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	08db      	lsrs	r3, r3, #3
 8004e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8111 	beq.w	8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f000 8083 	beq.w	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f200 80a1 	bhi.w	8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d056      	beq.n	8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e42:	e099      	b.n	8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e44:	4b88      	ldr	r3, [pc, #544]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02d      	beq.n	8004eac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e50:	4b85      	ldr	r3, [pc, #532]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	08db      	lsrs	r3, r3, #3
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	4a84      	ldr	r2, [pc, #528]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b7b      	ldr	r3, [pc, #492]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004eaa:	e087      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebe:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eee:	e065      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f32:	e043      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800507c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b48      	ldr	r3, [pc, #288]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f76:	e021      	b.n	8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b37      	ldr	r3, [pc, #220]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004fbc:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	0a5b      	lsrs	r3, r3, #9
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe2:	ee17 2a90 	vmov	r2, s15
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004fea:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005004:	edd7 6a07 	vldr	s13, [r7, #28]
 8005008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005010:	ee17 2a90 	vmov	r2, s15
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	0e1b      	lsrs	r3, r3, #24
 800501e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800502e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005032:	edd7 6a07 	vldr	s13, [r7, #28]
 8005036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503e:	ee17 2a90 	vmov	r2, s15
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005046:	e008      	b.n	800505a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
}
 800505a:	bf00      	nop
 800505c:	3724      	adds	r7, #36	; 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	58024400 	.word	0x58024400
 800506c:	03d09000 	.word	0x03d09000
 8005070:	46000000 	.word	0x46000000
 8005074:	4c742400 	.word	0x4c742400
 8005078:	4a742400 	.word	0x4a742400
 800507c:	4bb71b00 	.word	0x4bb71b00

08005080 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800508e:	4b53      	ldr	r3, [pc, #332]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d101      	bne.n	800509e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e099      	b.n	80051d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800509e:	4b4f      	ldr	r3, [pc, #316]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a4e      	ldr	r2, [pc, #312]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fc f957 	bl	800135c <HAL_GetTick>
 80050ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050b0:	e008      	b.n	80050c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050b2:	f7fc f953 	bl	800135c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e086      	b.n	80051d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050c4:	4b45      	ldr	r3, [pc, #276]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f0      	bne.n	80050b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050d0:	4b42      	ldr	r3, [pc, #264]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	493f      	ldr	r1, [pc, #252]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	628b      	str	r3, [r1, #40]	; 0x28
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	025b      	lsls	r3, r3, #9
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	3b01      	subs	r3, #1
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005114:	4931      	ldr	r1, [pc, #196]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800511a:	4b30      	ldr	r3, [pc, #192]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	492d      	ldr	r1, [pc, #180]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800512c:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	f023 0220 	bic.w	r2, r3, #32
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	4928      	ldr	r1, [pc, #160]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800513e:	4b27      	ldr	r3, [pc, #156]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	4a26      	ldr	r2, [pc, #152]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005144:	f023 0310 	bic.w	r3, r3, #16
 8005148:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800514c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <RCCEx_PLL2_Config+0x160>)
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	69d2      	ldr	r2, [r2, #28]
 8005156:	00d2      	lsls	r2, r2, #3
 8005158:	4920      	ldr	r1, [pc, #128]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800515e:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005164:	f043 0310 	orr.w	r3, r3, #16
 8005168:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800517a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800517c:	e00f      	b.n	800519e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005184:	4b15      	ldr	r3, [pc, #84]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 800518a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800518e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005190:	e005      	b.n	800519e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	4a11      	ldr	r2, [pc, #68]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 8005198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a0e      	ldr	r2, [pc, #56]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80051a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051aa:	f7fc f8d7 	bl	800135c <HAL_GetTick>
 80051ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051b0:	e008      	b.n	80051c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051b2:	f7fc f8d3 	bl	800135c <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e006      	b.n	80051d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <RCCEx_PLL2_Config+0x15c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	58024400 	.word	0x58024400
 80051e0:	ffff0007 	.word	0xffff0007

080051e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051f2:	4b53      	ldr	r3, [pc, #332]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d101      	bne.n	8005202 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e099      	b.n	8005336 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005202:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a4e      	ldr	r2, [pc, #312]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fc f8a5 	bl	800135c <HAL_GetTick>
 8005212:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005214:	e008      	b.n	8005228 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005216:	f7fc f8a1 	bl	800135c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e086      	b.n	8005336 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005228:	4b45      	ldr	r3, [pc, #276]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f0      	bne.n	8005216 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005234:	4b42      	ldr	r3, [pc, #264]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	051b      	lsls	r3, r3, #20
 8005242:	493f      	ldr	r1, [pc, #252]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005244:	4313      	orrs	r3, r2
 8005246:	628b      	str	r3, [r1, #40]	; 0x28
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	3b01      	subs	r3, #1
 800524e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	3b01      	subs	r3, #1
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	b29b      	uxth	r3, r3
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	3b01      	subs	r3, #1
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	3b01      	subs	r3, #1
 8005272:	061b      	lsls	r3, r3, #24
 8005274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005278:	4931      	ldr	r1, [pc, #196]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800527a:	4313      	orrs	r3, r2
 800527c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800527e:	4b30      	ldr	r3, [pc, #192]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	492d      	ldr	r1, [pc, #180]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005290:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	4928      	ldr	r1, [pc, #160]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052a2:	4b27      	ldr	r3, [pc, #156]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	4a26      	ldr	r2, [pc, #152]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <RCCEx_PLL3_Config+0x160>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	69d2      	ldr	r2, [r2, #28]
 80052ba:	00d2      	lsls	r2, r2, #3
 80052bc:	4920      	ldr	r1, [pc, #128]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052c2:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052e0:	e00f      	b.n	8005302 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	4a14      	ldr	r2, [pc, #80]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052f4:	e005      	b.n	8005302 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a11      	ldr	r2, [pc, #68]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fc f825 	bl	800135c <HAL_GetTick>
 8005312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005314:	e008      	b.n	8005328 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005316:	f7fc f821 	bl	800135c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <RCCEx_PLL3_Config+0x15c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	58024400 	.word	0x58024400
 8005344:	ffff0007 	.word	0xffff0007

08005348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e049      	b.n	80053ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fb fe40 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f000 fd06 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e049      	b.n	800549c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f841 	bl	80054a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f000 fcaf 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_IC_Start_IT+0x1e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e023      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_IC_Start_IT+0x2e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e01b      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_IC_Start_IT+0x3e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e013      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_IC_Start_IT+0x4e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e00b      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b10      	cmp	r3, #16
 800550a:	d104      	bne.n	8005516 <HAL_TIM_IC_Start_IT+0x5e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e003      	b.n	800551e <HAL_TIM_IC_Start_IT+0x66>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800551c:	b2db      	uxtb	r3, r3
 800551e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <HAL_TIM_IC_Start_IT+0x78>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e013      	b.n	8005558 <HAL_TIM_IC_Start_IT+0xa0>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b04      	cmp	r3, #4
 8005534:	d104      	bne.n	8005540 <HAL_TIM_IC_Start_IT+0x88>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e00b      	b.n	8005558 <HAL_TIM_IC_Start_IT+0xa0>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b08      	cmp	r3, #8
 8005544:	d104      	bne.n	8005550 <HAL_TIM_IC_Start_IT+0x98>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e003      	b.n	8005558 <HAL_TIM_IC_Start_IT+0xa0>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005556:	b2db      	uxtb	r3, r3
 8005558:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800555a:	7bbb      	ldrb	r3, [r7, #14]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d102      	bne.n	8005566 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005560:	7b7b      	ldrb	r3, [r7, #13]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d001      	beq.n	800556a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e0e2      	b.n	8005730 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xc2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	e023      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xd2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	e01b      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_IC_Start_IT+0xe2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005598:	e013      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d104      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0xf2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_IC_Start_IT+0x102>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x10a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_IC_Start_IT+0x11a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d0:	e013      	b.n	80055fa <HAL_TIM_IC_Start_IT+0x142>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_IC_Start_IT+0x12a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e0:	e00b      	b.n	80055fa <HAL_TIM_IC_Start_IT+0x142>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_IC_Start_IT+0x13a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055f0:	e003      	b.n	80055fa <HAL_TIM_IC_Start_IT+0x142>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d841      	bhi.n	8005684 <HAL_TIM_IC_Start_IT+0x1cc>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <HAL_TIM_IC_Start_IT+0x150>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	0800563d 	.word	0x0800563d
 800560c:	08005685 	.word	0x08005685
 8005610:	08005685 	.word	0x08005685
 8005614:	08005685 	.word	0x08005685
 8005618:	0800564f 	.word	0x0800564f
 800561c:	08005685 	.word	0x08005685
 8005620:	08005685 	.word	0x08005685
 8005624:	08005685 	.word	0x08005685
 8005628:	08005661 	.word	0x08005661
 800562c:	08005685 	.word	0x08005685
 8005630:	08005685 	.word	0x08005685
 8005634:	08005685 	.word	0x08005685
 8005638:	08005673 	.word	0x08005673
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0202 	orr.w	r2, r2, #2
 800564a:	60da      	str	r2, [r3, #12]
      break;
 800564c:	e01d      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0204 	orr.w	r2, r2, #4
 800565c:	60da      	str	r2, [r3, #12]
      break;
 800565e:	e014      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0208 	orr.w	r2, r2, #8
 800566e:	60da      	str	r2, [r3, #12]
      break;
 8005670:	e00b      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0210 	orr.w	r2, r2, #16
 8005680:	60da      	str	r2, [r3, #12]
      break;
 8005682:	e002      	b.n	800568a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      break;
 8005688:	bf00      	nop
  }

  if (status == HAL_OK)
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d14e      	bne.n	800572e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2201      	movs	r2, #1
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fddf 	bl	800625c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a25      	ldr	r2, [pc, #148]	; (8005738 <HAL_TIM_IC_Start_IT+0x280>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d022      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d01d      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_TIM_IC_Start_IT+0x284>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <HAL_TIM_IC_Start_IT+0x288>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_TIM_IC_Start_IT+0x28c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_TIM_IC_Start_IT+0x290>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_TIM_IC_Start_IT+0x294>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIM_IC_Start_IT+0x236>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a19      	ldr	r2, [pc, #100]	; (8005750 <HAL_TIM_IC_Start_IT+0x298>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d115      	bne.n	800571a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	4b17      	ldr	r3, [pc, #92]	; (8005754 <HAL_TIM_IC_Start_IT+0x29c>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d015      	beq.n	800572c <HAL_TIM_IC_Start_IT+0x274>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d011      	beq.n	800572c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	e008      	b.n	800572c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e000      	b.n	800572e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40010400 	.word	0x40010400
 800574c:	40001800 	.word	0x40001800
 8005750:	40014000 	.word	0x40014000
 8005754:	00010007 	.word	0x00010007

08005758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b02      	cmp	r3, #2
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0202 	mvn.w	r2, #2
 8005784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fb f924 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fada 	bl	8005d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fae1 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0204 	mvn.w	r2, #4
 80057d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fb f8fa 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fab0 	bl	8005d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fab7 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b08      	cmp	r3, #8
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b08      	cmp	r3, #8
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0208 	mvn.w	r2, #8
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2204      	movs	r2, #4
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb f8d0 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa86 	bl	8005d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fa8d 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b10      	cmp	r3, #16
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0210 	mvn.w	r2, #16
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2208      	movs	r2, #8
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fb f8a6 	bl	80009e8 <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa5c 	bl	8005d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa63 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10e      	bne.n	80058dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0201 	mvn.w	r2, #1
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa36 	bl	8005d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d10e      	bne.n	8005908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f4:	2b80      	cmp	r3, #128	; 0x80
 80058f6:	d107      	bne.n	8005908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fd68 	bl	80063d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005916:	d10e      	bne.n	8005936 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d107      	bne.n	8005936 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800592e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fd5b 	bl	80063ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d10e      	bne.n	8005962 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d107      	bne.n	8005962 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800595a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fa11 	bl	8005d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d10e      	bne.n	800598e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b20      	cmp	r3, #32
 800597c:	d107      	bne.n	800598e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f06f 0220 	mvn.w	r2, #32
 8005986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fd1b 	bl	80063c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e088      	b.n	8005ac6 <HAL_TIM_IC_ConfigChannel+0x130>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d11b      	bne.n	80059fa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6819      	ldr	r1, [r3, #0]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f000 fa7b 	bl	8005ecc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 020c 	bic.w	r2, r2, #12
 80059e4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6999      	ldr	r1, [r3, #24]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	619a      	str	r2, [r3, #24]
 80059f8:	e060      	b.n	8005abc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d11c      	bne.n	8005a3a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6819      	ldr	r1, [r3, #0]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f000 faff 	bl	8006012 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a22:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6999      	ldr	r1, [r3, #24]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	619a      	str	r2, [r3, #24]
 8005a38:	e040      	b.n	8005abc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f000 fb4c 	bl	80060ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 020c 	bic.w	r2, r2, #12
 8005a62:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69d9      	ldr	r1, [r3, #28]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	61da      	str	r2, [r3, #28]
 8005a76:	e021      	b.n	8005abc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b0c      	cmp	r3, #12
 8005a7c:	d11c      	bne.n	8005ab8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f000 fb69 	bl	8006164 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005aa0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69d9      	ldr	r1, [r3, #28]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	021a      	lsls	r2, r3, #8
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	61da      	str	r2, [r3, #28]
 8005ab6:	e001      	b.n	8005abc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_TIM_ConfigClockSource+0x1c>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e0dc      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a64      	ldr	r2, [pc, #400]	; (8005cb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	f000 80a9 	beq.w	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b28:	4a62      	ldr	r2, [pc, #392]	; (8005cb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	f200 80ae 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b30:	4a61      	ldr	r2, [pc, #388]	; (8005cb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	f000 80a1 	beq.w	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b38:	4a5f      	ldr	r2, [pc, #380]	; (8005cb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f200 80a6 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b40:	4a5e      	ldr	r2, [pc, #376]	; (8005cbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	f000 8099 	beq.w	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b48:	4a5c      	ldr	r2, [pc, #368]	; (8005cbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	f200 809e 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b54:	f000 8091 	beq.w	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b5c:	f200 8096 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b64:	f000 8089 	beq.w	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6c:	f200 808e 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b74:	d03e      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0x124>
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7a:	f200 8087 	bhi.w	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b82:	f000 8086 	beq.w	8005c92 <HAL_TIM_ConfigClockSource+0x1c2>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	d87f      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b8c:	2b70      	cmp	r3, #112	; 0x70
 8005b8e:	d01a      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xf6>
 8005b90:	2b70      	cmp	r3, #112	; 0x70
 8005b92:	d87b      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b94:	2b60      	cmp	r3, #96	; 0x60
 8005b96:	d050      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x16a>
 8005b98:	2b60      	cmp	r3, #96	; 0x60
 8005b9a:	d877      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005b9c:	2b50      	cmp	r3, #80	; 0x50
 8005b9e:	d03c      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x14a>
 8005ba0:	2b50      	cmp	r3, #80	; 0x50
 8005ba2:	d873      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d058      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x18a>
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d86f      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005bac:	2b30      	cmp	r3, #48	; 0x30
 8005bae:	d064      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005bb0:	2b30      	cmp	r3, #48	; 0x30
 8005bb2:	d86b      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d060      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d867      	bhi.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d05c      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d05a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005bc4:	e062      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6899      	ldr	r1, [r3, #8]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f000 fb21 	bl	800621c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	609a      	str	r2, [r3, #8]
      break;
 8005bf2:	e04f      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f000 fb0a 	bl	800621c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c16:	609a      	str	r2, [r3, #8]
      break;
 8005c18:	e03c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f000 f9c4 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2150      	movs	r1, #80	; 0x50
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fad4 	bl	80061e0 <TIM_ITRx_SetConfig>
      break;
 8005c38:	e02c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f000 fa20 	bl	800608c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2160      	movs	r1, #96	; 0x60
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fac4 	bl	80061e0 <TIM_ITRx_SetConfig>
      break;
 8005c58:	e01c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 f9a4 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2140      	movs	r1, #64	; 0x40
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fab4 	bl	80061e0 <TIM_ITRx_SetConfig>
      break;
 8005c78:	e00c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f000 faab 	bl	80061e0 <TIM_ITRx_SetConfig>
      break;
 8005c8a:	e003      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c90:	e000      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	ffceff88 	.word	0xffceff88
 8005cb4:	00100040 	.word	0x00100040
 8005cb8:	00100030 	.word	0x00100030
 8005cbc:	00100020 	.word	0x00100020

08005cc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	d831      	bhi.n	8005d38 <HAL_TIM_ReadCapturedValue+0x78>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005d39 	.word	0x08005d39
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005d39 	.word	0x08005d39
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d39 	.word	0x08005d39
 8005cf4:	08005d39 	.word	0x08005d39
 8005cf8:	08005d39 	.word	0x08005d39
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	08005d39 	.word	0x08005d39
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d39 	.word	0x08005d39
 8005d0c:	08005d2f 	.word	0x08005d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	60fb      	str	r3, [r7, #12]

      break;
 8005d18:	e00f      	b.n	8005d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	60fb      	str	r3, [r7, #12]

      break;
 8005d22:	e00a      	b.n	8005d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	60fb      	str	r3, [r7, #12]

      break;
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	60fb      	str	r3, [r7, #12]

      break;
 8005d36:	e000      	b.n	8005d3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d38:	bf00      	nop
  }

  return tmpreg;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a40      	ldr	r2, [pc, #256]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d00f      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3d      	ldr	r2, [pc, #244]	; (8005eb0 <TIM_Base_SetConfig+0x118>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3c      	ldr	r2, [pc, #240]	; (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a3b      	ldr	r2, [pc, #236]	; (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a3a      	ldr	r2, [pc, #232]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d108      	bne.n	8005dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01f      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df8:	d01b      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2c      	ldr	r2, [pc, #176]	; (8005eb0 <TIM_Base_SetConfig+0x118>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d017      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2a      	ldr	r2, [pc, #168]	; (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00f      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00b      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d007      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <TIM_Base_SetConfig+0x12c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a26      	ldr	r2, [pc, #152]	; (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d108      	bne.n	8005e44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a11      	ldr	r2, [pc, #68]	; (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <TIM_Base_SetConfig+0x12c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0f      	ldr	r2, [pc, #60]	; (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d103      	bne.n	8005e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	615a      	str	r2, [r3, #20]
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40010400 	.word	0x40010400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0201 	bic.w	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a28      	ldr	r2, [pc, #160]	; (8005f98 <TIM_TI1_SetConfig+0xcc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01b      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d017      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a25      	ldr	r2, [pc, #148]	; (8005f9c <TIM_TI1_SetConfig+0xd0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a24      	ldr	r2, [pc, #144]	; (8005fa0 <TIM_TI1_SetConfig+0xd4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <TIM_TI1_SetConfig+0xd8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <TIM_TI1_SetConfig+0xdc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <TIM_TI1_SetConfig+0xe0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_TI1_SetConfig+0x66>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <TIM_TI1_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <TIM_TI1_SetConfig+0x6a>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <TIM_TI1_SetConfig+0x6c>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e003      	b.n	8005f56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f023 030a 	bic.w	r3, r3, #10
 8005f70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 030a 	and.w	r3, r3, #10
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40001800 	.word	0x40001800
 8005fb0:	40014000 	.word	0x40014000

08005fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 030a 	bic.w	r3, r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 0210 	bic.w	r2, r3, #16
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	b29b      	uxth	r3, r3
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006064:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	621a      	str	r2, [r3, #32]
}
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 0210 	bic.w	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	031b      	lsls	r3, r3, #12
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0303 	bic.w	r3, r3, #3
 8006118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	b2db      	uxtb	r3, r3
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800613c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	031b      	lsls	r3, r3, #12
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	031b      	lsls	r3, r3, #12
 80061bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <TIM_ITRx_SetConfig+0x38>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f043 0307 	orr.w	r3, r3, #7
 8006202:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	609a      	str	r2, [r3, #8]
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	ffcfff8f 	.word	0xffcfff8f

0800621c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	021a      	lsls	r2, r3, #8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	431a      	orrs	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4313      	orrs	r3, r2
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	609a      	str	r2, [r3, #8]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2201      	movs	r2, #1
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1a      	ldr	r2, [r3, #32]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	43db      	mvns	r3, r3
 800627e:	401a      	ands	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	431a      	orrs	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062bc:	2302      	movs	r3, #2
 80062be:	e06d      	b.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a30      	ldr	r2, [pc, #192]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2f      	ldr	r2, [pc, #188]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d108      	bne.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006332:	d01d      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1d      	ldr	r2, [pc, #116]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1c      	ldr	r2, [pc, #112]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1a      	ldr	r2, [pc, #104]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a15      	ldr	r2, [pc, #84]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10c      	bne.n	800638a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006376:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40010400 	.word	0x40010400
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40001800 	.word	0x40001800
 80063c0:	40014000 	.word	0x40014000

080063c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e042      	b.n	8006498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fa fe83 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2224      	movs	r2, #36	; 0x24
 800642e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f82c 	bl	80064a0 <UART_SetConfig>
 8006448:	4603      	mov	r3, r0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e022      	b.n	8006498 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fe7e 	bl	800715c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800646e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800647e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 ff05 	bl	80072a0 <UART_CheckIdleState>
 8006496:	4603      	mov	r3, r0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a0:	b5b0      	push	{r4, r5, r7, lr}
 80064a2:	b08e      	sub	sp, #56	; 0x38
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4bbf      	ldr	r3, [pc, #764]	; (80067cc <UART_SetConfig+0x32c>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4ab5      	ldr	r2, [pc, #724]	; (80067d0 <UART_SetConfig+0x330>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006506:	4313      	orrs	r3, r2
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	4bb0      	ldr	r3, [pc, #704]	; (80067d4 <UART_SetConfig+0x334>)
 8006512:	4013      	ands	r3, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800651a:	430b      	orrs	r3, r1
 800651c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	f023 010f 	bic.w	r1, r3, #15
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4aa7      	ldr	r2, [pc, #668]	; (80067d8 <UART_SetConfig+0x338>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d176      	bne.n	800662c <UART_SetConfig+0x18c>
 800653e:	4ba7      	ldr	r3, [pc, #668]	; (80067dc <UART_SetConfig+0x33c>)
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006546:	2b28      	cmp	r3, #40	; 0x28
 8006548:	d86c      	bhi.n	8006624 <UART_SetConfig+0x184>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <UART_SetConfig+0xb0>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	080065f5 	.word	0x080065f5
 8006554:	08006625 	.word	0x08006625
 8006558:	08006625 	.word	0x08006625
 800655c:	08006625 	.word	0x08006625
 8006560:	08006625 	.word	0x08006625
 8006564:	08006625 	.word	0x08006625
 8006568:	08006625 	.word	0x08006625
 800656c:	08006625 	.word	0x08006625
 8006570:	080065fd 	.word	0x080065fd
 8006574:	08006625 	.word	0x08006625
 8006578:	08006625 	.word	0x08006625
 800657c:	08006625 	.word	0x08006625
 8006580:	08006625 	.word	0x08006625
 8006584:	08006625 	.word	0x08006625
 8006588:	08006625 	.word	0x08006625
 800658c:	08006625 	.word	0x08006625
 8006590:	08006605 	.word	0x08006605
 8006594:	08006625 	.word	0x08006625
 8006598:	08006625 	.word	0x08006625
 800659c:	08006625 	.word	0x08006625
 80065a0:	08006625 	.word	0x08006625
 80065a4:	08006625 	.word	0x08006625
 80065a8:	08006625 	.word	0x08006625
 80065ac:	08006625 	.word	0x08006625
 80065b0:	0800660d 	.word	0x0800660d
 80065b4:	08006625 	.word	0x08006625
 80065b8:	08006625 	.word	0x08006625
 80065bc:	08006625 	.word	0x08006625
 80065c0:	08006625 	.word	0x08006625
 80065c4:	08006625 	.word	0x08006625
 80065c8:	08006625 	.word	0x08006625
 80065cc:	08006625 	.word	0x08006625
 80065d0:	08006615 	.word	0x08006615
 80065d4:	08006625 	.word	0x08006625
 80065d8:	08006625 	.word	0x08006625
 80065dc:	08006625 	.word	0x08006625
 80065e0:	08006625 	.word	0x08006625
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006625 	.word	0x08006625
 80065ec:	08006625 	.word	0x08006625
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e326      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80065fc:	2304      	movs	r3, #4
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e322      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006604:	2308      	movs	r3, #8
 8006606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660a:	e31e      	b.n	8006c4a <UART_SetConfig+0x7aa>
 800660c:	2310      	movs	r3, #16
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e31a      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006614:	2320      	movs	r3, #32
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e316      	b.n	8006c4a <UART_SetConfig+0x7aa>
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e312      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e30e      	b.n	8006c4a <UART_SetConfig+0x7aa>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6b      	ldr	r2, [pc, #428]	; (80067e0 <UART_SetConfig+0x340>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d130      	bne.n	8006698 <UART_SetConfig+0x1f8>
 8006636:	4b69      	ldr	r3, [pc, #420]	; (80067dc <UART_SetConfig+0x33c>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b05      	cmp	r3, #5
 8006640:	d826      	bhi.n	8006690 <UART_SetConfig+0x1f0>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x1a8>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006661 	.word	0x08006661
 800664c:	08006669 	.word	0x08006669
 8006650:	08006671 	.word	0x08006671
 8006654:	08006679 	.word	0x08006679
 8006658:	08006681 	.word	0x08006681
 800665c:	08006689 	.word	0x08006689
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006666:	e2f0      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006668:	2304      	movs	r3, #4
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e2ec      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006670:	2308      	movs	r3, #8
 8006672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006676:	e2e8      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006678:	2310      	movs	r3, #16
 800667a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800667e:	e2e4      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006680:	2320      	movs	r3, #32
 8006682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006686:	e2e0      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668e:	e2dc      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e2d8      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a51      	ldr	r2, [pc, #324]	; (80067e4 <UART_SetConfig+0x344>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d130      	bne.n	8006704 <UART_SetConfig+0x264>
 80066a2:	4b4e      	ldr	r3, [pc, #312]	; (80067dc <UART_SetConfig+0x33c>)
 80066a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d826      	bhi.n	80066fc <UART_SetConfig+0x25c>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0x214>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066d5 	.word	0x080066d5
 80066bc:	080066dd 	.word	0x080066dd
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	2300      	movs	r3, #0
 80066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d2:	e2ba      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80066d4:	2304      	movs	r3, #4
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e2b6      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80066dc:	2308      	movs	r3, #8
 80066de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e2:	e2b2      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80066e4:	2310      	movs	r3, #16
 80066e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ea:	e2ae      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80066ec:	2320      	movs	r3, #32
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e2aa      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80066f4:	2340      	movs	r3, #64	; 0x40
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fa:	e2a6      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006702:	e2a2      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a37      	ldr	r2, [pc, #220]	; (80067e8 <UART_SetConfig+0x348>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d130      	bne.n	8006770 <UART_SetConfig+0x2d0>
 800670e:	4b33      	ldr	r3, [pc, #204]	; (80067dc <UART_SetConfig+0x33c>)
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b05      	cmp	r3, #5
 8006718:	d826      	bhi.n	8006768 <UART_SetConfig+0x2c8>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x280>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006739 	.word	0x08006739
 8006724:	08006741 	.word	0x08006741
 8006728:	08006749 	.word	0x08006749
 800672c:	08006751 	.word	0x08006751
 8006730:	08006759 	.word	0x08006759
 8006734:	08006761 	.word	0x08006761
 8006738:	2300      	movs	r3, #0
 800673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673e:	e284      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006740:	2304      	movs	r3, #4
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	e280      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006748:	2308      	movs	r3, #8
 800674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674e:	e27c      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006750:	2310      	movs	r3, #16
 8006752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006756:	e278      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006758:	2320      	movs	r3, #32
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e274      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006760:	2340      	movs	r3, #64	; 0x40
 8006762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006766:	e270      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676e:	e26c      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <UART_SetConfig+0x34c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d142      	bne.n	8006800 <UART_SetConfig+0x360>
 800677a:	4b18      	ldr	r3, [pc, #96]	; (80067dc <UART_SetConfig+0x33c>)
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	2b05      	cmp	r3, #5
 8006784:	d838      	bhi.n	80067f8 <UART_SetConfig+0x358>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <UART_SetConfig+0x2ec>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067a5 	.word	0x080067a5
 8006790:	080067ad 	.word	0x080067ad
 8006794:	080067b5 	.word	0x080067b5
 8006798:	080067bd 	.word	0x080067bd
 800679c:	080067c5 	.word	0x080067c5
 80067a0:	080067f1 	.word	0x080067f1
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e24e      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80067ac:	2304      	movs	r3, #4
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e24a      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80067b4:	2308      	movs	r3, #8
 80067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ba:	e246      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80067bc:	2310      	movs	r3, #16
 80067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c2:	e242      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80067c4:	2320      	movs	r3, #32
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e23e      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80067cc:	cfff69f3 	.word	0xcfff69f3
 80067d0:	58000c00 	.word	0x58000c00
 80067d4:	11fff4ff 	.word	0x11fff4ff
 80067d8:	40011000 	.word	0x40011000
 80067dc:	58024400 	.word	0x58024400
 80067e0:	40004400 	.word	0x40004400
 80067e4:	40004800 	.word	0x40004800
 80067e8:	40004c00 	.word	0x40004c00
 80067ec:	40005000 	.word	0x40005000
 80067f0:	2340      	movs	r3, #64	; 0x40
 80067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f6:	e228      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fe:	e224      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4ab1      	ldr	r2, [pc, #708]	; (8006acc <UART_SetConfig+0x62c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d176      	bne.n	80068f8 <UART_SetConfig+0x458>
 800680a:	4bb1      	ldr	r3, [pc, #708]	; (8006ad0 <UART_SetConfig+0x630>)
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006812:	2b28      	cmp	r3, #40	; 0x28
 8006814:	d86c      	bhi.n	80068f0 <UART_SetConfig+0x450>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x37c>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	080068c1 	.word	0x080068c1
 8006820:	080068f1 	.word	0x080068f1
 8006824:	080068f1 	.word	0x080068f1
 8006828:	080068f1 	.word	0x080068f1
 800682c:	080068f1 	.word	0x080068f1
 8006830:	080068f1 	.word	0x080068f1
 8006834:	080068f1 	.word	0x080068f1
 8006838:	080068f1 	.word	0x080068f1
 800683c:	080068c9 	.word	0x080068c9
 8006840:	080068f1 	.word	0x080068f1
 8006844:	080068f1 	.word	0x080068f1
 8006848:	080068f1 	.word	0x080068f1
 800684c:	080068f1 	.word	0x080068f1
 8006850:	080068f1 	.word	0x080068f1
 8006854:	080068f1 	.word	0x080068f1
 8006858:	080068f1 	.word	0x080068f1
 800685c:	080068d1 	.word	0x080068d1
 8006860:	080068f1 	.word	0x080068f1
 8006864:	080068f1 	.word	0x080068f1
 8006868:	080068f1 	.word	0x080068f1
 800686c:	080068f1 	.word	0x080068f1
 8006870:	080068f1 	.word	0x080068f1
 8006874:	080068f1 	.word	0x080068f1
 8006878:	080068f1 	.word	0x080068f1
 800687c:	080068d9 	.word	0x080068d9
 8006880:	080068f1 	.word	0x080068f1
 8006884:	080068f1 	.word	0x080068f1
 8006888:	080068f1 	.word	0x080068f1
 800688c:	080068f1 	.word	0x080068f1
 8006890:	080068f1 	.word	0x080068f1
 8006894:	080068f1 	.word	0x080068f1
 8006898:	080068f1 	.word	0x080068f1
 800689c:	080068e1 	.word	0x080068e1
 80068a0:	080068f1 	.word	0x080068f1
 80068a4:	080068f1 	.word	0x080068f1
 80068a8:	080068f1 	.word	0x080068f1
 80068ac:	080068f1 	.word	0x080068f1
 80068b0:	080068f1 	.word	0x080068f1
 80068b4:	080068f1 	.word	0x080068f1
 80068b8:	080068f1 	.word	0x080068f1
 80068bc:	080068e9 	.word	0x080068e9
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e1c0      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80068c8:	2304      	movs	r3, #4
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e1bc      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80068d0:	2308      	movs	r3, #8
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e1b8      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80068d8:	2310      	movs	r3, #16
 80068da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068de:	e1b4      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80068e0:	2320      	movs	r3, #32
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e1b0      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80068e8:	2340      	movs	r3, #64	; 0x40
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e1ac      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e1a8      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a75      	ldr	r2, [pc, #468]	; (8006ad4 <UART_SetConfig+0x634>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d130      	bne.n	8006964 <UART_SetConfig+0x4c4>
 8006902:	4b73      	ldr	r3, [pc, #460]	; (8006ad0 <UART_SetConfig+0x630>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b05      	cmp	r3, #5
 800690c:	d826      	bhi.n	800695c <UART_SetConfig+0x4bc>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x474>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	0800692d 	.word	0x0800692d
 8006918:	08006935 	.word	0x08006935
 800691c:	0800693d 	.word	0x0800693d
 8006920:	08006945 	.word	0x08006945
 8006924:	0800694d 	.word	0x0800694d
 8006928:	08006955 	.word	0x08006955
 800692c:	2300      	movs	r3, #0
 800692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006932:	e18a      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006934:	2304      	movs	r3, #4
 8006936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693a:	e186      	b.n	8006c4a <UART_SetConfig+0x7aa>
 800693c:	2308      	movs	r3, #8
 800693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006942:	e182      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006944:	2310      	movs	r3, #16
 8006946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800694a:	e17e      	b.n	8006c4a <UART_SetConfig+0x7aa>
 800694c:	2320      	movs	r3, #32
 800694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006952:	e17a      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006954:	2340      	movs	r3, #64	; 0x40
 8006956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695a:	e176      	b.n	8006c4a <UART_SetConfig+0x7aa>
 800695c:	2380      	movs	r3, #128	; 0x80
 800695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006962:	e172      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a5b      	ldr	r2, [pc, #364]	; (8006ad8 <UART_SetConfig+0x638>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d130      	bne.n	80069d0 <UART_SetConfig+0x530>
 800696e:	4b58      	ldr	r3, [pc, #352]	; (8006ad0 <UART_SetConfig+0x630>)
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	2b05      	cmp	r3, #5
 8006978:	d826      	bhi.n	80069c8 <UART_SetConfig+0x528>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0x4e0>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006999 	.word	0x08006999
 8006984:	080069a1 	.word	0x080069a1
 8006988:	080069a9 	.word	0x080069a9
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069c1 	.word	0x080069c1
 8006998:	2300      	movs	r3, #0
 800699a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800699e:	e154      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069a6:	e150      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80069a8:	2308      	movs	r3, #8
 80069aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ae:	e14c      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80069b0:	2310      	movs	r3, #16
 80069b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069b6:	e148      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80069b8:	2320      	movs	r3, #32
 80069ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069be:	e144      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80069c0:	2340      	movs	r3, #64	; 0x40
 80069c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c6:	e140      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80069c8:	2380      	movs	r3, #128	; 0x80
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ce:	e13c      	b.n	8006c4a <UART_SetConfig+0x7aa>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a41      	ldr	r2, [pc, #260]	; (8006adc <UART_SetConfig+0x63c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	f040 8082 	bne.w	8006ae0 <UART_SetConfig+0x640>
 80069dc:	4b3c      	ldr	r3, [pc, #240]	; (8006ad0 <UART_SetConfig+0x630>)
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e4:	2b28      	cmp	r3, #40	; 0x28
 80069e6:	d86d      	bhi.n	8006ac4 <UART_SetConfig+0x624>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <UART_SetConfig+0x550>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a95 	.word	0x08006a95
 80069f4:	08006ac5 	.word	0x08006ac5
 80069f8:	08006ac5 	.word	0x08006ac5
 80069fc:	08006ac5 	.word	0x08006ac5
 8006a00:	08006ac5 	.word	0x08006ac5
 8006a04:	08006ac5 	.word	0x08006ac5
 8006a08:	08006ac5 	.word	0x08006ac5
 8006a0c:	08006ac5 	.word	0x08006ac5
 8006a10:	08006a9d 	.word	0x08006a9d
 8006a14:	08006ac5 	.word	0x08006ac5
 8006a18:	08006ac5 	.word	0x08006ac5
 8006a1c:	08006ac5 	.word	0x08006ac5
 8006a20:	08006ac5 	.word	0x08006ac5
 8006a24:	08006ac5 	.word	0x08006ac5
 8006a28:	08006ac5 	.word	0x08006ac5
 8006a2c:	08006ac5 	.word	0x08006ac5
 8006a30:	08006aa5 	.word	0x08006aa5
 8006a34:	08006ac5 	.word	0x08006ac5
 8006a38:	08006ac5 	.word	0x08006ac5
 8006a3c:	08006ac5 	.word	0x08006ac5
 8006a40:	08006ac5 	.word	0x08006ac5
 8006a44:	08006ac5 	.word	0x08006ac5
 8006a48:	08006ac5 	.word	0x08006ac5
 8006a4c:	08006ac5 	.word	0x08006ac5
 8006a50:	08006aad 	.word	0x08006aad
 8006a54:	08006ac5 	.word	0x08006ac5
 8006a58:	08006ac5 	.word	0x08006ac5
 8006a5c:	08006ac5 	.word	0x08006ac5
 8006a60:	08006ac5 	.word	0x08006ac5
 8006a64:	08006ac5 	.word	0x08006ac5
 8006a68:	08006ac5 	.word	0x08006ac5
 8006a6c:	08006ac5 	.word	0x08006ac5
 8006a70:	08006ab5 	.word	0x08006ab5
 8006a74:	08006ac5 	.word	0x08006ac5
 8006a78:	08006ac5 	.word	0x08006ac5
 8006a7c:	08006ac5 	.word	0x08006ac5
 8006a80:	08006ac5 	.word	0x08006ac5
 8006a84:	08006ac5 	.word	0x08006ac5
 8006a88:	08006ac5 	.word	0x08006ac5
 8006a8c:	08006ac5 	.word	0x08006ac5
 8006a90:	08006abd 	.word	0x08006abd
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9a:	e0d6      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa2:	e0d2      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006aa4:	2308      	movs	r3, #8
 8006aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aaa:	e0ce      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006aac:	2310      	movs	r3, #16
 8006aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab2:	e0ca      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006ab4:	2320      	movs	r3, #32
 8006ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aba:	e0c6      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006abc:	2340      	movs	r3, #64	; 0x40
 8006abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac2:	e0c2      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aca:	e0be      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006acc:	40011400 	.word	0x40011400
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	40007800 	.word	0x40007800
 8006ad8:	40007c00 	.word	0x40007c00
 8006adc:	40011800 	.word	0x40011800
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4aad      	ldr	r2, [pc, #692]	; (8006d9c <UART_SetConfig+0x8fc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d176      	bne.n	8006bd8 <UART_SetConfig+0x738>
 8006aea:	4bad      	ldr	r3, [pc, #692]	; (8006da0 <UART_SetConfig+0x900>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af2:	2b28      	cmp	r3, #40	; 0x28
 8006af4:	d86c      	bhi.n	8006bd0 <UART_SetConfig+0x730>
 8006af6:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0x65c>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006ba1 	.word	0x08006ba1
 8006b00:	08006bd1 	.word	0x08006bd1
 8006b04:	08006bd1 	.word	0x08006bd1
 8006b08:	08006bd1 	.word	0x08006bd1
 8006b0c:	08006bd1 	.word	0x08006bd1
 8006b10:	08006bd1 	.word	0x08006bd1
 8006b14:	08006bd1 	.word	0x08006bd1
 8006b18:	08006bd1 	.word	0x08006bd1
 8006b1c:	08006ba9 	.word	0x08006ba9
 8006b20:	08006bd1 	.word	0x08006bd1
 8006b24:	08006bd1 	.word	0x08006bd1
 8006b28:	08006bd1 	.word	0x08006bd1
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006bd1 	.word	0x08006bd1
 8006b3c:	08006bb1 	.word	0x08006bb1
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006bd1 	.word	0x08006bd1
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bb9 	.word	0x08006bb9
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bd1 	.word	0x08006bd1
 8006b6c:	08006bd1 	.word	0x08006bd1
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006bc1 	.word	0x08006bc1
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006bd1 	.word	0x08006bd1
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006bd1 	.word	0x08006bd1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bd1 	.word	0x08006bd1
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba6:	e050      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bae:	e04c      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb6:	e048      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bbe:	e044      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc6:	e040      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bce:	e03c      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd6:	e038      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a71      	ldr	r2, [pc, #452]	; (8006da4 <UART_SetConfig+0x904>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d130      	bne.n	8006c44 <UART_SetConfig+0x7a4>
 8006be2:	4b6f      	ldr	r3, [pc, #444]	; (8006da0 <UART_SetConfig+0x900>)
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d826      	bhi.n	8006c3c <UART_SetConfig+0x79c>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0x754>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c0d 	.word	0x08006c0d
 8006bf8:	08006c15 	.word	0x08006c15
 8006bfc:	08006c1d 	.word	0x08006c1d
 8006c00:	08006c25 	.word	0x08006c25
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c12:	e01a      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006c14:	2304      	movs	r3, #4
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1a:	e016      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c22:	e012      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006c24:	2310      	movs	r3, #16
 8006c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2a:	e00e      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c32:	e00a      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3a:	e006      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006c3c:	2380      	movs	r3, #128	; 0x80
 8006c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c42:	e002      	b.n	8006c4a <UART_SetConfig+0x7aa>
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a55      	ldr	r2, [pc, #340]	; (8006da4 <UART_SetConfig+0x904>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	f040 80f0 	bne.w	8006e36 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	dc46      	bgt.n	8006cec <UART_SetConfig+0x84c>
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	db75      	blt.n	8006d4e <UART_SetConfig+0x8ae>
 8006c62:	3b02      	subs	r3, #2
 8006c64:	2b1e      	cmp	r3, #30
 8006c66:	d872      	bhi.n	8006d4e <UART_SetConfig+0x8ae>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <UART_SetConfig+0x7d0>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006cf3 	.word	0x08006cf3
 8006c74:	08006d4f 	.word	0x08006d4f
 8006c78:	08006cfb 	.word	0x08006cfb
 8006c7c:	08006d4f 	.word	0x08006d4f
 8006c80:	08006d4f 	.word	0x08006d4f
 8006c84:	08006d4f 	.word	0x08006d4f
 8006c88:	08006d0b 	.word	0x08006d0b
 8006c8c:	08006d4f 	.word	0x08006d4f
 8006c90:	08006d4f 	.word	0x08006d4f
 8006c94:	08006d4f 	.word	0x08006d4f
 8006c98:	08006d4f 	.word	0x08006d4f
 8006c9c:	08006d4f 	.word	0x08006d4f
 8006ca0:	08006d4f 	.word	0x08006d4f
 8006ca4:	08006d4f 	.word	0x08006d4f
 8006ca8:	08006d1b 	.word	0x08006d1b
 8006cac:	08006d4f 	.word	0x08006d4f
 8006cb0:	08006d4f 	.word	0x08006d4f
 8006cb4:	08006d4f 	.word	0x08006d4f
 8006cb8:	08006d4f 	.word	0x08006d4f
 8006cbc:	08006d4f 	.word	0x08006d4f
 8006cc0:	08006d4f 	.word	0x08006d4f
 8006cc4:	08006d4f 	.word	0x08006d4f
 8006cc8:	08006d4f 	.word	0x08006d4f
 8006ccc:	08006d4f 	.word	0x08006d4f
 8006cd0:	08006d4f 	.word	0x08006d4f
 8006cd4:	08006d4f 	.word	0x08006d4f
 8006cd8:	08006d4f 	.word	0x08006d4f
 8006cdc:	08006d4f 	.word	0x08006d4f
 8006ce0:	08006d4f 	.word	0x08006d4f
 8006ce4:	08006d4f 	.word	0x08006d4f
 8006ce8:	08006d41 	.word	0x08006d41
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d02a      	beq.n	8006d46 <UART_SetConfig+0x8a6>
 8006cf0:	e02d      	b.n	8006d4e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006cf2:	f7fd ff07 	bl	8004b04 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cf6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cf8:	e02f      	b.n	8006d5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cfa:	f107 0314 	add.w	r3, r7, #20
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd ff16 	bl	8004b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d08:	e027      	b.n	8006d5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe f862 	bl	8004dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d18:	e01f      	b.n	8006d5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d1a:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <UART_SetConfig+0x900>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d26:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <UART_SetConfig+0x900>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	08db      	lsrs	r3, r3, #3
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <UART_SetConfig+0x908>)
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d38:	e00f      	b.n	8006d5a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <UART_SetConfig+0x908>)
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d3e:	e00c      	b.n	8006d5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d40:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <UART_SetConfig+0x90c>)
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d44:	e009      	b.n	8006d5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d4c:	e005      	b.n	8006d5a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 81e6 	beq.w	800712e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	4a12      	ldr	r2, [pc, #72]	; (8006db0 <UART_SetConfig+0x910>)
 8006d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d74:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d305      	bcc.n	8006d92 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d8c:	6a3a      	ldr	r2, [r7, #32]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d910      	bls.n	8006db4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d98:	e1c9      	b.n	800712e <UART_SetConfig+0xc8e>
 8006d9a:	bf00      	nop
 8006d9c:	40011c00 	.word	0x40011c00
 8006da0:	58024400 	.word	0x58024400
 8006da4:	58000c00 	.word	0x58000c00
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	08008014 	.word	0x08008014
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	4618      	mov	r0, r3
 8006db8:	f04f 0100 	mov.w	r1, #0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	4ac1      	ldr	r2, [pc, #772]	; (80070c8 <UART_SetConfig+0xc28>)
 8006dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	f7f9 fae0 	bl	8000390 <__aeabi_uldivmod>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	020b      	lsls	r3, r1, #8
 8006de2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006de6:	0202      	lsls	r2, r0, #8
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	6849      	ldr	r1, [r1, #4]
 8006dec:	0849      	lsrs	r1, r1, #1
 8006dee:	4608      	mov	r0, r1
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	1814      	adds	r4, r2, r0
 8006df6:	eb43 0501 	adc.w	r5, r3, r1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fac2 	bl	8000390 <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4613      	mov	r3, r2
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e1a:	d308      	bcc.n	8006e2e <UART_SetConfig+0x98e>
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e22:	d204      	bcs.n	8006e2e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e17f      	b.n	800712e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006e34:	e17b      	b.n	800712e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3e:	f040 80bd 	bne.w	8006fbc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006e42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	dc48      	bgt.n	8006edc <UART_SetConfig+0xa3c>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	db7b      	blt.n	8006f46 <UART_SetConfig+0xaa6>
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d879      	bhi.n	8006f46 <UART_SetConfig+0xaa6>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <UART_SetConfig+0x9b8>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006ee3 	.word	0x08006ee3
 8006e5c:	08006eeb 	.word	0x08006eeb
 8006e60:	08006f47 	.word	0x08006f47
 8006e64:	08006f47 	.word	0x08006f47
 8006e68:	08006ef3 	.word	0x08006ef3
 8006e6c:	08006f47 	.word	0x08006f47
 8006e70:	08006f47 	.word	0x08006f47
 8006e74:	08006f47 	.word	0x08006f47
 8006e78:	08006f03 	.word	0x08006f03
 8006e7c:	08006f47 	.word	0x08006f47
 8006e80:	08006f47 	.word	0x08006f47
 8006e84:	08006f47 	.word	0x08006f47
 8006e88:	08006f47 	.word	0x08006f47
 8006e8c:	08006f47 	.word	0x08006f47
 8006e90:	08006f47 	.word	0x08006f47
 8006e94:	08006f47 	.word	0x08006f47
 8006e98:	08006f13 	.word	0x08006f13
 8006e9c:	08006f47 	.word	0x08006f47
 8006ea0:	08006f47 	.word	0x08006f47
 8006ea4:	08006f47 	.word	0x08006f47
 8006ea8:	08006f47 	.word	0x08006f47
 8006eac:	08006f47 	.word	0x08006f47
 8006eb0:	08006f47 	.word	0x08006f47
 8006eb4:	08006f47 	.word	0x08006f47
 8006eb8:	08006f47 	.word	0x08006f47
 8006ebc:	08006f47 	.word	0x08006f47
 8006ec0:	08006f47 	.word	0x08006f47
 8006ec4:	08006f47 	.word	0x08006f47
 8006ec8:	08006f47 	.word	0x08006f47
 8006ecc:	08006f47 	.word	0x08006f47
 8006ed0:	08006f47 	.word	0x08006f47
 8006ed4:	08006f47 	.word	0x08006f47
 8006ed8:	08006f39 	.word	0x08006f39
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d02e      	beq.n	8006f3e <UART_SetConfig+0xa9e>
 8006ee0:	e031      	b.n	8006f46 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee2:	f7fc fed7 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 8006ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ee8:	e033      	b.n	8006f52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eea:	f7fc fee9 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 8006eee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ef0:	e02f      	b.n	8006f52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd fe1a 	bl	8004b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f00:	e027      	b.n	8006f52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fd ff66 	bl	8004dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f10:	e01f      	b.n	8006f52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f12:	4b6e      	ldr	r3, [pc, #440]	; (80070cc <UART_SetConfig+0xc2c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f1e:	4b6b      	ldr	r3, [pc, #428]	; (80070cc <UART_SetConfig+0xc2c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	08db      	lsrs	r3, r3, #3
 8006f24:	f003 0303 	and.w	r3, r3, #3
 8006f28:	4a69      	ldr	r2, [pc, #420]	; (80070d0 <UART_SetConfig+0xc30>)
 8006f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f30:	e00f      	b.n	8006f52 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006f32:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <UART_SetConfig+0xc30>)
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f36:	e00c      	b.n	8006f52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f38:	4b66      	ldr	r3, [pc, #408]	; (80070d4 <UART_SetConfig+0xc34>)
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f3c:	e009      	b.n	8006f52 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f44:	e005      	b.n	8006f52 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006f50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80ea 	beq.w	800712e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	4a5a      	ldr	r2, [pc, #360]	; (80070c8 <UART_SetConfig+0xc28>)
 8006f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6c:	005a      	lsls	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	441a      	add	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	2b0f      	cmp	r3, #15
 8006f84:	d916      	bls.n	8006fb4 <UART_SetConfig+0xb14>
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8c:	d212      	bcs.n	8006fb4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f023 030f 	bic.w	r3, r3, #15
 8006f96:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	e0bc      	b.n	800712e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006fba:	e0b8      	b.n	800712e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	dc4b      	bgt.n	800705c <UART_SetConfig+0xbbc>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f2c0 8087 	blt.w	80070d8 <UART_SetConfig+0xc38>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	f200 8084 	bhi.w	80070d8 <UART_SetConfig+0xc38>
 8006fd0:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <UART_SetConfig+0xb38>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	08007063 	.word	0x08007063
 8006fdc:	0800706b 	.word	0x0800706b
 8006fe0:	080070d9 	.word	0x080070d9
 8006fe4:	080070d9 	.word	0x080070d9
 8006fe8:	08007073 	.word	0x08007073
 8006fec:	080070d9 	.word	0x080070d9
 8006ff0:	080070d9 	.word	0x080070d9
 8006ff4:	080070d9 	.word	0x080070d9
 8006ff8:	08007083 	.word	0x08007083
 8006ffc:	080070d9 	.word	0x080070d9
 8007000:	080070d9 	.word	0x080070d9
 8007004:	080070d9 	.word	0x080070d9
 8007008:	080070d9 	.word	0x080070d9
 800700c:	080070d9 	.word	0x080070d9
 8007010:	080070d9 	.word	0x080070d9
 8007014:	080070d9 	.word	0x080070d9
 8007018:	08007093 	.word	0x08007093
 800701c:	080070d9 	.word	0x080070d9
 8007020:	080070d9 	.word	0x080070d9
 8007024:	080070d9 	.word	0x080070d9
 8007028:	080070d9 	.word	0x080070d9
 800702c:	080070d9 	.word	0x080070d9
 8007030:	080070d9 	.word	0x080070d9
 8007034:	080070d9 	.word	0x080070d9
 8007038:	080070d9 	.word	0x080070d9
 800703c:	080070d9 	.word	0x080070d9
 8007040:	080070d9 	.word	0x080070d9
 8007044:	080070d9 	.word	0x080070d9
 8007048:	080070d9 	.word	0x080070d9
 800704c:	080070d9 	.word	0x080070d9
 8007050:	080070d9 	.word	0x080070d9
 8007054:	080070d9 	.word	0x080070d9
 8007058:	080070b9 	.word	0x080070b9
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d02e      	beq.n	80070be <UART_SetConfig+0xc1e>
 8007060:	e03a      	b.n	80070d8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007062:	f7fc fe17 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 8007066:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007068:	e03c      	b.n	80070e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800706a:	f7fc fe29 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 800706e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007070:	e038      	b.n	80070e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0314 	add.w	r3, r7, #20
 8007076:	4618      	mov	r0, r3
 8007078:	f7fd fd5a 	bl	8004b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007080:	e030      	b.n	80070e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd fea6 	bl	8004dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007090:	e028      	b.n	80070e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007092:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <UART_SetConfig+0xc2c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800709e:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <UART_SetConfig+0xc2c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <UART_SetConfig+0xc30>)
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070b0:	e018      	b.n	80070e4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80070b2:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <UART_SetConfig+0xc30>)
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070b6:	e015      	b.n	80070e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <UART_SetConfig+0xc34>)
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070bc:	e012      	b.n	80070e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070c4:	e00e      	b.n	80070e4 <UART_SetConfig+0xc44>
 80070c6:	bf00      	nop
 80070c8:	08008014 	.word	0x08008014
 80070cc:	58024400 	.word	0x58024400
 80070d0:	03d09000 	.word	0x03d09000
 80070d4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80070e2:	bf00      	nop
    }

    if (pclk != 0U)
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d021      	beq.n	800712e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	4a1a      	ldr	r2, [pc, #104]	; (8007158 <UART_SetConfig+0xcb8>)
 80070f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f4:	461a      	mov	r2, r3
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	441a      	add	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d909      	bls.n	8007128 <UART_SetConfig+0xc88>
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711a:	d205      	bcs.n	8007128 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60da      	str	r2, [r3, #12]
 8007126:	e002      	b.n	800712e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800714a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800714e:	4618      	mov	r0, r3
 8007150:	3738      	adds	r7, #56	; 0x38
 8007152:	46bd      	mov	sp, r7
 8007154:	bdb0      	pop	{r4, r5, r7, pc}
 8007156:	bf00      	nop
 8007158:	08008014 	.word	0x08008014

0800715c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01a      	beq.n	8007272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800725a:	d10a      	bne.n	8007272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	605a      	str	r2, [r3, #4]
  }
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072b0:	f7fa f854 	bl	800135c <HAL_GetTick>
 80072b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d10e      	bne.n	80072e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f82f 	bl	8007336 <UART_WaitOnFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e025      	b.n	800732e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d10e      	bne.n	800730e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f819 	bl	8007336 <UART_WaitOnFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e00f      	b.n	800732e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b09c      	sub	sp, #112	; 0x70
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	4613      	mov	r3, r2
 8007344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007346:	e0a9      	b.n	800749c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	f000 80a5 	beq.w	800749c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007352:	f7fa f803 	bl	800135c <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800735e:	429a      	cmp	r2, r3
 8007360:	d302      	bcc.n	8007368 <UART_WaitOnFlagUntilTimeout+0x32>
 8007362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007364:	2b00      	cmp	r3, #0
 8007366:	d140      	bne.n	80073ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800737c:	667b      	str	r3, [r7, #100]	; 0x64
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007388:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800738c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e6      	bne.n	8007368 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	663b      	str	r3, [r7, #96]	; 0x60
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80073bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e5      	bne.n	800739a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e069      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d051      	beq.n	800749c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007406:	d149      	bne.n	800749c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007410:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
 8007432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e6      	bne.n	8007412 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	613b      	str	r3, [r7, #16]
   return(result);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f023 0301 	bic.w	r3, r3, #1
 800745a:	66bb      	str	r3, [r7, #104]	; 0x68
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007464:	623a      	str	r2, [r7, #32]
 8007466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	69f9      	ldr	r1, [r7, #28]
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	61bb      	str	r3, [r7, #24]
   return(result);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e5      	bne.n	8007444 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e010      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69da      	ldr	r2, [r3, #28]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4013      	ands	r3, r2
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	bf0c      	ite	eq
 80074ac:	2301      	moveq	r3, #1
 80074ae:	2300      	movne	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	f43f af46 	beq.w	8007348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3770      	adds	r7, #112	; 0x70
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_UARTEx_DisableFifoMode+0x16>
 80074d8:	2302      	movs	r3, #2
 80074da:	e027      	b.n	800752c <HAL_UARTEx_DisableFifoMode+0x66>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2224      	movs	r2, #36	; 0x24
 80074e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800750a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800754c:	2302      	movs	r3, #2
 800754e:	e02d      	b.n	80075ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2224      	movs	r2, #36	; 0x24
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f84f 	bl	8007630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e02d      	b.n	8007628 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2224      	movs	r2, #36	; 0x24
 80075d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0201 	bic.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f811 	bl	8007630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800763c:	2b00      	cmp	r3, #0
 800763e:	d108      	bne.n	8007652 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007650:	e031      	b.n	80076b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007652:	2310      	movs	r3, #16
 8007654:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007656:	2310      	movs	r3, #16
 8007658:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	0e5b      	lsrs	r3, r3, #25
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	0f5b      	lsrs	r3, r3, #29
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	7b3a      	ldrb	r2, [r7, #12]
 800767e:	4911      	ldr	r1, [pc, #68]	; (80076c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007680:	5c8a      	ldrb	r2, [r1, r2]
 8007682:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007686:	7b3a      	ldrb	r2, [r7, #12]
 8007688:	490f      	ldr	r1, [pc, #60]	; (80076c8 <UARTEx_SetNbDataToProcess+0x98>)
 800768a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800768c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	7b7a      	ldrb	r2, [r7, #13]
 800769c:	4909      	ldr	r1, [pc, #36]	; (80076c4 <UARTEx_SetNbDataToProcess+0x94>)
 800769e:	5c8a      	ldrb	r2, [r1, r2]
 80076a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076a4:	7b7a      	ldrb	r2, [r7, #13]
 80076a6:	4908      	ldr	r1, [pc, #32]	; (80076c8 <UARTEx_SetNbDataToProcess+0x98>)
 80076a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	0800802c 	.word	0x0800802c
 80076c8:	08008034 	.word	0x08008034

080076cc <__errno>:
 80076cc:	4b01      	ldr	r3, [pc, #4]	; (80076d4 <__errno+0x8>)
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	24000010 	.word	0x24000010

080076d8 <__libc_init_array>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4d0d      	ldr	r5, [pc, #52]	; (8007710 <__libc_init_array+0x38>)
 80076dc:	4c0d      	ldr	r4, [pc, #52]	; (8007714 <__libc_init_array+0x3c>)
 80076de:	1b64      	subs	r4, r4, r5
 80076e0:	10a4      	asrs	r4, r4, #2
 80076e2:	2600      	movs	r6, #0
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	d109      	bne.n	80076fc <__libc_init_array+0x24>
 80076e8:	4d0b      	ldr	r5, [pc, #44]	; (8007718 <__libc_init_array+0x40>)
 80076ea:	4c0c      	ldr	r4, [pc, #48]	; (800771c <__libc_init_array+0x44>)
 80076ec:	f000 fc4e 	bl	8007f8c <_init>
 80076f0:	1b64      	subs	r4, r4, r5
 80076f2:	10a4      	asrs	r4, r4, #2
 80076f4:	2600      	movs	r6, #0
 80076f6:	42a6      	cmp	r6, r4
 80076f8:	d105      	bne.n	8007706 <__libc_init_array+0x2e>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007700:	4798      	blx	r3
 8007702:	3601      	adds	r6, #1
 8007704:	e7ee      	b.n	80076e4 <__libc_init_array+0xc>
 8007706:	f855 3b04 	ldr.w	r3, [r5], #4
 800770a:	4798      	blx	r3
 800770c:	3601      	adds	r6, #1
 800770e:	e7f2      	b.n	80076f6 <__libc_init_array+0x1e>
 8007710:	08008078 	.word	0x08008078
 8007714:	08008078 	.word	0x08008078
 8007718:	08008078 	.word	0x08008078
 800771c:	0800807c 	.word	0x0800807c

08007720 <memcpy>:
 8007720:	440a      	add	r2, r1
 8007722:	4291      	cmp	r1, r2
 8007724:	f100 33ff 	add.w	r3, r0, #4294967295
 8007728:	d100      	bne.n	800772c <memcpy+0xc>
 800772a:	4770      	bx	lr
 800772c:	b510      	push	{r4, lr}
 800772e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007736:	4291      	cmp	r1, r2
 8007738:	d1f9      	bne.n	800772e <memcpy+0xe>
 800773a:	bd10      	pop	{r4, pc}

0800773c <memset>:
 800773c:	4402      	add	r2, r0
 800773e:	4603      	mov	r3, r0
 8007740:	4293      	cmp	r3, r2
 8007742:	d100      	bne.n	8007746 <memset+0xa>
 8007744:	4770      	bx	lr
 8007746:	f803 1b01 	strb.w	r1, [r3], #1
 800774a:	e7f9      	b.n	8007740 <memset+0x4>

0800774c <siprintf>:
 800774c:	b40e      	push	{r1, r2, r3}
 800774e:	b500      	push	{lr}
 8007750:	b09c      	sub	sp, #112	; 0x70
 8007752:	ab1d      	add	r3, sp, #116	; 0x74
 8007754:	9002      	str	r0, [sp, #8]
 8007756:	9006      	str	r0, [sp, #24]
 8007758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800775c:	4809      	ldr	r0, [pc, #36]	; (8007784 <siprintf+0x38>)
 800775e:	9107      	str	r1, [sp, #28]
 8007760:	9104      	str	r1, [sp, #16]
 8007762:	4909      	ldr	r1, [pc, #36]	; (8007788 <siprintf+0x3c>)
 8007764:	f853 2b04 	ldr.w	r2, [r3], #4
 8007768:	9105      	str	r1, [sp, #20]
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	a902      	add	r1, sp, #8
 8007770:	f000 f868 	bl	8007844 <_svfiprintf_r>
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	b01c      	add	sp, #112	; 0x70
 800777c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007780:	b003      	add	sp, #12
 8007782:	4770      	bx	lr
 8007784:	24000010 	.word	0x24000010
 8007788:	ffff0208 	.word	0xffff0208

0800778c <__ssputs_r>:
 800778c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007790:	688e      	ldr	r6, [r1, #8]
 8007792:	429e      	cmp	r6, r3
 8007794:	4682      	mov	sl, r0
 8007796:	460c      	mov	r4, r1
 8007798:	4690      	mov	r8, r2
 800779a:	461f      	mov	r7, r3
 800779c:	d838      	bhi.n	8007810 <__ssputs_r+0x84>
 800779e:	898a      	ldrh	r2, [r1, #12]
 80077a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077a4:	d032      	beq.n	800780c <__ssputs_r+0x80>
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	6909      	ldr	r1, [r1, #16]
 80077aa:	eba5 0901 	sub.w	r9, r5, r1
 80077ae:	6965      	ldr	r5, [r4, #20]
 80077b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077b8:	3301      	adds	r3, #1
 80077ba:	444b      	add	r3, r9
 80077bc:	106d      	asrs	r5, r5, #1
 80077be:	429d      	cmp	r5, r3
 80077c0:	bf38      	it	cc
 80077c2:	461d      	movcc	r5, r3
 80077c4:	0553      	lsls	r3, r2, #21
 80077c6:	d531      	bpl.n	800782c <__ssputs_r+0xa0>
 80077c8:	4629      	mov	r1, r5
 80077ca:	f000 fb39 	bl	8007e40 <_malloc_r>
 80077ce:	4606      	mov	r6, r0
 80077d0:	b950      	cbnz	r0, 80077e8 <__ssputs_r+0x5c>
 80077d2:	230c      	movs	r3, #12
 80077d4:	f8ca 3000 	str.w	r3, [sl]
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e8:	6921      	ldr	r1, [r4, #16]
 80077ea:	464a      	mov	r2, r9
 80077ec:	f7ff ff98 	bl	8007720 <memcpy>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	6126      	str	r6, [r4, #16]
 80077fe:	6165      	str	r5, [r4, #20]
 8007800:	444e      	add	r6, r9
 8007802:	eba5 0509 	sub.w	r5, r5, r9
 8007806:	6026      	str	r6, [r4, #0]
 8007808:	60a5      	str	r5, [r4, #8]
 800780a:	463e      	mov	r6, r7
 800780c:	42be      	cmp	r6, r7
 800780e:	d900      	bls.n	8007812 <__ssputs_r+0x86>
 8007810:	463e      	mov	r6, r7
 8007812:	4632      	mov	r2, r6
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	4641      	mov	r1, r8
 8007818:	f000 faa8 	bl	8007d6c <memmove>
 800781c:	68a3      	ldr	r3, [r4, #8]
 800781e:	6822      	ldr	r2, [r4, #0]
 8007820:	1b9b      	subs	r3, r3, r6
 8007822:	4432      	add	r2, r6
 8007824:	60a3      	str	r3, [r4, #8]
 8007826:	6022      	str	r2, [r4, #0]
 8007828:	2000      	movs	r0, #0
 800782a:	e7db      	b.n	80077e4 <__ssputs_r+0x58>
 800782c:	462a      	mov	r2, r5
 800782e:	f000 fb61 	bl	8007ef4 <_realloc_r>
 8007832:	4606      	mov	r6, r0
 8007834:	2800      	cmp	r0, #0
 8007836:	d1e1      	bne.n	80077fc <__ssputs_r+0x70>
 8007838:	6921      	ldr	r1, [r4, #16]
 800783a:	4650      	mov	r0, sl
 800783c:	f000 fab0 	bl	8007da0 <_free_r>
 8007840:	e7c7      	b.n	80077d2 <__ssputs_r+0x46>
	...

08007844 <_svfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	4698      	mov	r8, r3
 800784a:	898b      	ldrh	r3, [r1, #12]
 800784c:	061b      	lsls	r3, r3, #24
 800784e:	b09d      	sub	sp, #116	; 0x74
 8007850:	4607      	mov	r7, r0
 8007852:	460d      	mov	r5, r1
 8007854:	4614      	mov	r4, r2
 8007856:	d50e      	bpl.n	8007876 <_svfiprintf_r+0x32>
 8007858:	690b      	ldr	r3, [r1, #16]
 800785a:	b963      	cbnz	r3, 8007876 <_svfiprintf_r+0x32>
 800785c:	2140      	movs	r1, #64	; 0x40
 800785e:	f000 faef 	bl	8007e40 <_malloc_r>
 8007862:	6028      	str	r0, [r5, #0]
 8007864:	6128      	str	r0, [r5, #16]
 8007866:	b920      	cbnz	r0, 8007872 <_svfiprintf_r+0x2e>
 8007868:	230c      	movs	r3, #12
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	e0d1      	b.n	8007a16 <_svfiprintf_r+0x1d2>
 8007872:	2340      	movs	r3, #64	; 0x40
 8007874:	616b      	str	r3, [r5, #20]
 8007876:	2300      	movs	r3, #0
 8007878:	9309      	str	r3, [sp, #36]	; 0x24
 800787a:	2320      	movs	r3, #32
 800787c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007880:	f8cd 800c 	str.w	r8, [sp, #12]
 8007884:	2330      	movs	r3, #48	; 0x30
 8007886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a30 <_svfiprintf_r+0x1ec>
 800788a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800788e:	f04f 0901 	mov.w	r9, #1
 8007892:	4623      	mov	r3, r4
 8007894:	469a      	mov	sl, r3
 8007896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800789a:	b10a      	cbz	r2, 80078a0 <_svfiprintf_r+0x5c>
 800789c:	2a25      	cmp	r2, #37	; 0x25
 800789e:	d1f9      	bne.n	8007894 <_svfiprintf_r+0x50>
 80078a0:	ebba 0b04 	subs.w	fp, sl, r4
 80078a4:	d00b      	beq.n	80078be <_svfiprintf_r+0x7a>
 80078a6:	465b      	mov	r3, fp
 80078a8:	4622      	mov	r2, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ff6d 	bl	800778c <__ssputs_r>
 80078b2:	3001      	adds	r0, #1
 80078b4:	f000 80aa 	beq.w	8007a0c <_svfiprintf_r+0x1c8>
 80078b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ba:	445a      	add	r2, fp
 80078bc:	9209      	str	r2, [sp, #36]	; 0x24
 80078be:	f89a 3000 	ldrb.w	r3, [sl]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80a2 	beq.w	8007a0c <_svfiprintf_r+0x1c8>
 80078c8:	2300      	movs	r3, #0
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d2:	f10a 0a01 	add.w	sl, sl, #1
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	9307      	str	r3, [sp, #28]
 80078da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078de:	931a      	str	r3, [sp, #104]	; 0x68
 80078e0:	4654      	mov	r4, sl
 80078e2:	2205      	movs	r2, #5
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	4851      	ldr	r0, [pc, #324]	; (8007a30 <_svfiprintf_r+0x1ec>)
 80078ea:	f7f8 fd01 	bl	80002f0 <memchr>
 80078ee:	9a04      	ldr	r2, [sp, #16]
 80078f0:	b9d8      	cbnz	r0, 800792a <_svfiprintf_r+0xe6>
 80078f2:	06d0      	lsls	r0, r2, #27
 80078f4:	bf44      	itt	mi
 80078f6:	2320      	movmi	r3, #32
 80078f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078fc:	0711      	lsls	r1, r2, #28
 80078fe:	bf44      	itt	mi
 8007900:	232b      	movmi	r3, #43	; 0x2b
 8007902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007906:	f89a 3000 	ldrb.w	r3, [sl]
 800790a:	2b2a      	cmp	r3, #42	; 0x2a
 800790c:	d015      	beq.n	800793a <_svfiprintf_r+0xf6>
 800790e:	9a07      	ldr	r2, [sp, #28]
 8007910:	4654      	mov	r4, sl
 8007912:	2000      	movs	r0, #0
 8007914:	f04f 0c0a 	mov.w	ip, #10
 8007918:	4621      	mov	r1, r4
 800791a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800791e:	3b30      	subs	r3, #48	; 0x30
 8007920:	2b09      	cmp	r3, #9
 8007922:	d94e      	bls.n	80079c2 <_svfiprintf_r+0x17e>
 8007924:	b1b0      	cbz	r0, 8007954 <_svfiprintf_r+0x110>
 8007926:	9207      	str	r2, [sp, #28]
 8007928:	e014      	b.n	8007954 <_svfiprintf_r+0x110>
 800792a:	eba0 0308 	sub.w	r3, r0, r8
 800792e:	fa09 f303 	lsl.w	r3, r9, r3
 8007932:	4313      	orrs	r3, r2
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	46a2      	mov	sl, r4
 8007938:	e7d2      	b.n	80078e0 <_svfiprintf_r+0x9c>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	1d19      	adds	r1, r3, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	9103      	str	r1, [sp, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	bfbb      	ittet	lt
 8007946:	425b      	neglt	r3, r3
 8007948:	f042 0202 	orrlt.w	r2, r2, #2
 800794c:	9307      	strge	r3, [sp, #28]
 800794e:	9307      	strlt	r3, [sp, #28]
 8007950:	bfb8      	it	lt
 8007952:	9204      	strlt	r2, [sp, #16]
 8007954:	7823      	ldrb	r3, [r4, #0]
 8007956:	2b2e      	cmp	r3, #46	; 0x2e
 8007958:	d10c      	bne.n	8007974 <_svfiprintf_r+0x130>
 800795a:	7863      	ldrb	r3, [r4, #1]
 800795c:	2b2a      	cmp	r3, #42	; 0x2a
 800795e:	d135      	bne.n	80079cc <_svfiprintf_r+0x188>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	1d1a      	adds	r2, r3, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	9203      	str	r2, [sp, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfb8      	it	lt
 800796c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007970:	3402      	adds	r4, #2
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a40 <_svfiprintf_r+0x1fc>
 8007978:	7821      	ldrb	r1, [r4, #0]
 800797a:	2203      	movs	r2, #3
 800797c:	4650      	mov	r0, sl
 800797e:	f7f8 fcb7 	bl	80002f0 <memchr>
 8007982:	b140      	cbz	r0, 8007996 <_svfiprintf_r+0x152>
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	eba0 000a 	sub.w	r0, r0, sl
 800798a:	fa03 f000 	lsl.w	r0, r3, r0
 800798e:	9b04      	ldr	r3, [sp, #16]
 8007990:	4303      	orrs	r3, r0
 8007992:	3401      	adds	r4, #1
 8007994:	9304      	str	r3, [sp, #16]
 8007996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799a:	4826      	ldr	r0, [pc, #152]	; (8007a34 <_svfiprintf_r+0x1f0>)
 800799c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079a0:	2206      	movs	r2, #6
 80079a2:	f7f8 fca5 	bl	80002f0 <memchr>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d038      	beq.n	8007a1c <_svfiprintf_r+0x1d8>
 80079aa:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <_svfiprintf_r+0x1f4>)
 80079ac:	bb1b      	cbnz	r3, 80079f6 <_svfiprintf_r+0x1b2>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	3307      	adds	r3, #7
 80079b2:	f023 0307 	bic.w	r3, r3, #7
 80079b6:	3308      	adds	r3, #8
 80079b8:	9303      	str	r3, [sp, #12]
 80079ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079bc:	4433      	add	r3, r6
 80079be:	9309      	str	r3, [sp, #36]	; 0x24
 80079c0:	e767      	b.n	8007892 <_svfiprintf_r+0x4e>
 80079c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c6:	460c      	mov	r4, r1
 80079c8:	2001      	movs	r0, #1
 80079ca:	e7a5      	b.n	8007918 <_svfiprintf_r+0xd4>
 80079cc:	2300      	movs	r3, #0
 80079ce:	3401      	adds	r4, #1
 80079d0:	9305      	str	r3, [sp, #20]
 80079d2:	4619      	mov	r1, r3
 80079d4:	f04f 0c0a 	mov.w	ip, #10
 80079d8:	4620      	mov	r0, r4
 80079da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079de:	3a30      	subs	r2, #48	; 0x30
 80079e0:	2a09      	cmp	r2, #9
 80079e2:	d903      	bls.n	80079ec <_svfiprintf_r+0x1a8>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0c5      	beq.n	8007974 <_svfiprintf_r+0x130>
 80079e8:	9105      	str	r1, [sp, #20]
 80079ea:	e7c3      	b.n	8007974 <_svfiprintf_r+0x130>
 80079ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80079f0:	4604      	mov	r4, r0
 80079f2:	2301      	movs	r3, #1
 80079f4:	e7f0      	b.n	80079d8 <_svfiprintf_r+0x194>
 80079f6:	ab03      	add	r3, sp, #12
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	462a      	mov	r2, r5
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <_svfiprintf_r+0x1f8>)
 80079fe:	a904      	add	r1, sp, #16
 8007a00:	4638      	mov	r0, r7
 8007a02:	f3af 8000 	nop.w
 8007a06:	1c42      	adds	r2, r0, #1
 8007a08:	4606      	mov	r6, r0
 8007a0a:	d1d6      	bne.n	80079ba <_svfiprintf_r+0x176>
 8007a0c:	89ab      	ldrh	r3, [r5, #12]
 8007a0e:	065b      	lsls	r3, r3, #25
 8007a10:	f53f af2c 	bmi.w	800786c <_svfiprintf_r+0x28>
 8007a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a16:	b01d      	add	sp, #116	; 0x74
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1c:	ab03      	add	r3, sp, #12
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	462a      	mov	r2, r5
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <_svfiprintf_r+0x1f8>)
 8007a24:	a904      	add	r1, sp, #16
 8007a26:	4638      	mov	r0, r7
 8007a28:	f000 f87a 	bl	8007b20 <_printf_i>
 8007a2c:	e7eb      	b.n	8007a06 <_svfiprintf_r+0x1c2>
 8007a2e:	bf00      	nop
 8007a30:	0800803c 	.word	0x0800803c
 8007a34:	08008046 	.word	0x08008046
 8007a38:	00000000 	.word	0x00000000
 8007a3c:	0800778d 	.word	0x0800778d
 8007a40:	08008042 	.word	0x08008042

08007a44 <_printf_common>:
 8007a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	4616      	mov	r6, r2
 8007a4a:	4699      	mov	r9, r3
 8007a4c:	688a      	ldr	r2, [r1, #8]
 8007a4e:	690b      	ldr	r3, [r1, #16]
 8007a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a54:	4293      	cmp	r3, r2
 8007a56:	bfb8      	it	lt
 8007a58:	4613      	movlt	r3, r2
 8007a5a:	6033      	str	r3, [r6, #0]
 8007a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a60:	4607      	mov	r7, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	b10a      	cbz	r2, 8007a6a <_printf_common+0x26>
 8007a66:	3301      	adds	r3, #1
 8007a68:	6033      	str	r3, [r6, #0]
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	0699      	lsls	r1, r3, #26
 8007a6e:	bf42      	ittt	mi
 8007a70:	6833      	ldrmi	r3, [r6, #0]
 8007a72:	3302      	addmi	r3, #2
 8007a74:	6033      	strmi	r3, [r6, #0]
 8007a76:	6825      	ldr	r5, [r4, #0]
 8007a78:	f015 0506 	ands.w	r5, r5, #6
 8007a7c:	d106      	bne.n	8007a8c <_printf_common+0x48>
 8007a7e:	f104 0a19 	add.w	sl, r4, #25
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	6832      	ldr	r2, [r6, #0]
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	42ab      	cmp	r3, r5
 8007a8a:	dc26      	bgt.n	8007ada <_printf_common+0x96>
 8007a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a90:	1e13      	subs	r3, r2, #0
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	bf18      	it	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	0692      	lsls	r2, r2, #26
 8007a9a:	d42b      	bmi.n	8007af4 <_printf_common+0xb0>
 8007a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	47c0      	blx	r8
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d01e      	beq.n	8007ae8 <_printf_common+0xa4>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	68e5      	ldr	r5, [r4, #12]
 8007aae:	6832      	ldr	r2, [r6, #0]
 8007ab0:	f003 0306 	and.w	r3, r3, #6
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	bf08      	it	eq
 8007ab8:	1aad      	subeq	r5, r5, r2
 8007aba:	68a3      	ldr	r3, [r4, #8]
 8007abc:	6922      	ldr	r2, [r4, #16]
 8007abe:	bf0c      	ite	eq
 8007ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac4:	2500      	movne	r5, #0
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	bfc4      	itt	gt
 8007aca:	1a9b      	subgt	r3, r3, r2
 8007acc:	18ed      	addgt	r5, r5, r3
 8007ace:	2600      	movs	r6, #0
 8007ad0:	341a      	adds	r4, #26
 8007ad2:	42b5      	cmp	r5, r6
 8007ad4:	d11a      	bne.n	8007b0c <_printf_common+0xc8>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e008      	b.n	8007aec <_printf_common+0xa8>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4652      	mov	r2, sl
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	47c0      	blx	r8
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d103      	bne.n	8007af0 <_printf_common+0xac>
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	3501      	adds	r5, #1
 8007af2:	e7c6      	b.n	8007a82 <_printf_common+0x3e>
 8007af4:	18e1      	adds	r1, r4, r3
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	2030      	movs	r0, #48	; 0x30
 8007afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007afe:	4422      	add	r2, r4
 8007b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b08:	3302      	adds	r3, #2
 8007b0a:	e7c7      	b.n	8007a9c <_printf_common+0x58>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4649      	mov	r1, r9
 8007b12:	4638      	mov	r0, r7
 8007b14:	47c0      	blx	r8
 8007b16:	3001      	adds	r0, #1
 8007b18:	d0e6      	beq.n	8007ae8 <_printf_common+0xa4>
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7d9      	b.n	8007ad2 <_printf_common+0x8e>
	...

08007b20 <_printf_i>:
 8007b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	460c      	mov	r4, r1
 8007b26:	4691      	mov	r9, r2
 8007b28:	7e27      	ldrb	r7, [r4, #24]
 8007b2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b2c:	2f78      	cmp	r7, #120	; 0x78
 8007b2e:	4680      	mov	r8, r0
 8007b30:	469a      	mov	sl, r3
 8007b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b36:	d807      	bhi.n	8007b48 <_printf_i+0x28>
 8007b38:	2f62      	cmp	r7, #98	; 0x62
 8007b3a:	d80a      	bhi.n	8007b52 <_printf_i+0x32>
 8007b3c:	2f00      	cmp	r7, #0
 8007b3e:	f000 80d8 	beq.w	8007cf2 <_printf_i+0x1d2>
 8007b42:	2f58      	cmp	r7, #88	; 0x58
 8007b44:	f000 80a3 	beq.w	8007c8e <_printf_i+0x16e>
 8007b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b50:	e03a      	b.n	8007bc8 <_printf_i+0xa8>
 8007b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b56:	2b15      	cmp	r3, #21
 8007b58:	d8f6      	bhi.n	8007b48 <_printf_i+0x28>
 8007b5a:	a001      	add	r0, pc, #4	; (adr r0, 8007b60 <_printf_i+0x40>)
 8007b5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b60:	08007bb9 	.word	0x08007bb9
 8007b64:	08007bcd 	.word	0x08007bcd
 8007b68:	08007b49 	.word	0x08007b49
 8007b6c:	08007b49 	.word	0x08007b49
 8007b70:	08007b49 	.word	0x08007b49
 8007b74:	08007b49 	.word	0x08007b49
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007b49 	.word	0x08007b49
 8007b80:	08007b49 	.word	0x08007b49
 8007b84:	08007b49 	.word	0x08007b49
 8007b88:	08007b49 	.word	0x08007b49
 8007b8c:	08007cd9 	.word	0x08007cd9
 8007b90:	08007bfd 	.word	0x08007bfd
 8007b94:	08007cbb 	.word	0x08007cbb
 8007b98:	08007b49 	.word	0x08007b49
 8007b9c:	08007b49 	.word	0x08007b49
 8007ba0:	08007cfb 	.word	0x08007cfb
 8007ba4:	08007b49 	.word	0x08007b49
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007b49 	.word	0x08007b49
 8007bb0:	08007b49 	.word	0x08007b49
 8007bb4:	08007cc3 	.word	0x08007cc3
 8007bb8:	680b      	ldr	r3, [r1, #0]
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	600a      	str	r2, [r1, #0]
 8007bc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e0a3      	b.n	8007d14 <_printf_i+0x1f4>
 8007bcc:	6825      	ldr	r5, [r4, #0]
 8007bce:	6808      	ldr	r0, [r1, #0]
 8007bd0:	062e      	lsls	r6, r5, #24
 8007bd2:	f100 0304 	add.w	r3, r0, #4
 8007bd6:	d50a      	bpl.n	8007bee <_printf_i+0xce>
 8007bd8:	6805      	ldr	r5, [r0, #0]
 8007bda:	600b      	str	r3, [r1, #0]
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	da03      	bge.n	8007be8 <_printf_i+0xc8>
 8007be0:	232d      	movs	r3, #45	; 0x2d
 8007be2:	426d      	negs	r5, r5
 8007be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be8:	485e      	ldr	r0, [pc, #376]	; (8007d64 <_printf_i+0x244>)
 8007bea:	230a      	movs	r3, #10
 8007bec:	e019      	b.n	8007c22 <_printf_i+0x102>
 8007bee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bf2:	6805      	ldr	r5, [r0, #0]
 8007bf4:	600b      	str	r3, [r1, #0]
 8007bf6:	bf18      	it	ne
 8007bf8:	b22d      	sxthne	r5, r5
 8007bfa:	e7ef      	b.n	8007bdc <_printf_i+0xbc>
 8007bfc:	680b      	ldr	r3, [r1, #0]
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	1d18      	adds	r0, r3, #4
 8007c02:	6008      	str	r0, [r1, #0]
 8007c04:	0628      	lsls	r0, r5, #24
 8007c06:	d501      	bpl.n	8007c0c <_printf_i+0xec>
 8007c08:	681d      	ldr	r5, [r3, #0]
 8007c0a:	e002      	b.n	8007c12 <_printf_i+0xf2>
 8007c0c:	0669      	lsls	r1, r5, #25
 8007c0e:	d5fb      	bpl.n	8007c08 <_printf_i+0xe8>
 8007c10:	881d      	ldrh	r5, [r3, #0]
 8007c12:	4854      	ldr	r0, [pc, #336]	; (8007d64 <_printf_i+0x244>)
 8007c14:	2f6f      	cmp	r7, #111	; 0x6f
 8007c16:	bf0c      	ite	eq
 8007c18:	2308      	moveq	r3, #8
 8007c1a:	230a      	movne	r3, #10
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c22:	6866      	ldr	r6, [r4, #4]
 8007c24:	60a6      	str	r6, [r4, #8]
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	bfa2      	ittt	ge
 8007c2a:	6821      	ldrge	r1, [r4, #0]
 8007c2c:	f021 0104 	bicge.w	r1, r1, #4
 8007c30:	6021      	strge	r1, [r4, #0]
 8007c32:	b90d      	cbnz	r5, 8007c38 <_printf_i+0x118>
 8007c34:	2e00      	cmp	r6, #0
 8007c36:	d04d      	beq.n	8007cd4 <_printf_i+0x1b4>
 8007c38:	4616      	mov	r6, r2
 8007c3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c3e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c42:	5dc7      	ldrb	r7, [r0, r7]
 8007c44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c48:	462f      	mov	r7, r5
 8007c4a:	42bb      	cmp	r3, r7
 8007c4c:	460d      	mov	r5, r1
 8007c4e:	d9f4      	bls.n	8007c3a <_printf_i+0x11a>
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d10b      	bne.n	8007c6c <_printf_i+0x14c>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	07df      	lsls	r7, r3, #31
 8007c58:	d508      	bpl.n	8007c6c <_printf_i+0x14c>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	6861      	ldr	r1, [r4, #4]
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	bfde      	ittt	le
 8007c62:	2330      	movle	r3, #48	; 0x30
 8007c64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c6c:	1b92      	subs	r2, r2, r6
 8007c6e:	6122      	str	r2, [r4, #16]
 8007c70:	f8cd a000 	str.w	sl, [sp]
 8007c74:	464b      	mov	r3, r9
 8007c76:	aa03      	add	r2, sp, #12
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7ff fee2 	bl	8007a44 <_printf_common>
 8007c80:	3001      	adds	r0, #1
 8007c82:	d14c      	bne.n	8007d1e <_printf_i+0x1fe>
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	b004      	add	sp, #16
 8007c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8e:	4835      	ldr	r0, [pc, #212]	; (8007d64 <_printf_i+0x244>)
 8007c90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	680e      	ldr	r6, [r1, #0]
 8007c98:	061f      	lsls	r7, r3, #24
 8007c9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c9e:	600e      	str	r6, [r1, #0]
 8007ca0:	d514      	bpl.n	8007ccc <_printf_i+0x1ac>
 8007ca2:	07d9      	lsls	r1, r3, #31
 8007ca4:	bf44      	itt	mi
 8007ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8007caa:	6023      	strmi	r3, [r4, #0]
 8007cac:	b91d      	cbnz	r5, 8007cb6 <_printf_i+0x196>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	f023 0320 	bic.w	r3, r3, #32
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	2310      	movs	r3, #16
 8007cb8:	e7b0      	b.n	8007c1c <_printf_i+0xfc>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	f043 0320 	orr.w	r3, r3, #32
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	2378      	movs	r3, #120	; 0x78
 8007cc4:	4828      	ldr	r0, [pc, #160]	; (8007d68 <_printf_i+0x248>)
 8007cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cca:	e7e3      	b.n	8007c94 <_printf_i+0x174>
 8007ccc:	065e      	lsls	r6, r3, #25
 8007cce:	bf48      	it	mi
 8007cd0:	b2ad      	uxthmi	r5, r5
 8007cd2:	e7e6      	b.n	8007ca2 <_printf_i+0x182>
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	e7bb      	b.n	8007c50 <_printf_i+0x130>
 8007cd8:	680b      	ldr	r3, [r1, #0]
 8007cda:	6826      	ldr	r6, [r4, #0]
 8007cdc:	6960      	ldr	r0, [r4, #20]
 8007cde:	1d1d      	adds	r5, r3, #4
 8007ce0:	600d      	str	r5, [r1, #0]
 8007ce2:	0635      	lsls	r5, r6, #24
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	d501      	bpl.n	8007cec <_printf_i+0x1cc>
 8007ce8:	6018      	str	r0, [r3, #0]
 8007cea:	e002      	b.n	8007cf2 <_printf_i+0x1d2>
 8007cec:	0671      	lsls	r1, r6, #25
 8007cee:	d5fb      	bpl.n	8007ce8 <_printf_i+0x1c8>
 8007cf0:	8018      	strh	r0, [r3, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	4616      	mov	r6, r2
 8007cf8:	e7ba      	b.n	8007c70 <_printf_i+0x150>
 8007cfa:	680b      	ldr	r3, [r1, #0]
 8007cfc:	1d1a      	adds	r2, r3, #4
 8007cfe:	600a      	str	r2, [r1, #0]
 8007d00:	681e      	ldr	r6, [r3, #0]
 8007d02:	6862      	ldr	r2, [r4, #4]
 8007d04:	2100      	movs	r1, #0
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7f8 faf2 	bl	80002f0 <memchr>
 8007d0c:	b108      	cbz	r0, 8007d12 <_printf_i+0x1f2>
 8007d0e:	1b80      	subs	r0, r0, r6
 8007d10:	6060      	str	r0, [r4, #4]
 8007d12:	6863      	ldr	r3, [r4, #4]
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	2300      	movs	r3, #0
 8007d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1c:	e7a8      	b.n	8007c70 <_printf_i+0x150>
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	4632      	mov	r2, r6
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	47d0      	blx	sl
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d0ab      	beq.n	8007c84 <_printf_i+0x164>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	079b      	lsls	r3, r3, #30
 8007d30:	d413      	bmi.n	8007d5a <_printf_i+0x23a>
 8007d32:	68e0      	ldr	r0, [r4, #12]
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	4298      	cmp	r0, r3
 8007d38:	bfb8      	it	lt
 8007d3a:	4618      	movlt	r0, r3
 8007d3c:	e7a4      	b.n	8007c88 <_printf_i+0x168>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4632      	mov	r2, r6
 8007d42:	4649      	mov	r1, r9
 8007d44:	4640      	mov	r0, r8
 8007d46:	47d0      	blx	sl
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d09b      	beq.n	8007c84 <_printf_i+0x164>
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	68e3      	ldr	r3, [r4, #12]
 8007d50:	9903      	ldr	r1, [sp, #12]
 8007d52:	1a5b      	subs	r3, r3, r1
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dcf2      	bgt.n	8007d3e <_printf_i+0x21e>
 8007d58:	e7eb      	b.n	8007d32 <_printf_i+0x212>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	f104 0619 	add.w	r6, r4, #25
 8007d60:	e7f5      	b.n	8007d4e <_printf_i+0x22e>
 8007d62:	bf00      	nop
 8007d64:	0800804d 	.word	0x0800804d
 8007d68:	0800805e 	.word	0x0800805e

08007d6c <memmove>:
 8007d6c:	4288      	cmp	r0, r1
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	eb01 0402 	add.w	r4, r1, r2
 8007d74:	d902      	bls.n	8007d7c <memmove+0x10>
 8007d76:	4284      	cmp	r4, r0
 8007d78:	4623      	mov	r3, r4
 8007d7a:	d807      	bhi.n	8007d8c <memmove+0x20>
 8007d7c:	1e43      	subs	r3, r0, #1
 8007d7e:	42a1      	cmp	r1, r4
 8007d80:	d008      	beq.n	8007d94 <memmove+0x28>
 8007d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d8a:	e7f8      	b.n	8007d7e <memmove+0x12>
 8007d8c:	4402      	add	r2, r0
 8007d8e:	4601      	mov	r1, r0
 8007d90:	428a      	cmp	r2, r1
 8007d92:	d100      	bne.n	8007d96 <memmove+0x2a>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d9e:	e7f7      	b.n	8007d90 <memmove+0x24>

08007da0 <_free_r>:
 8007da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007da2:	2900      	cmp	r1, #0
 8007da4:	d048      	beq.n	8007e38 <_free_r+0x98>
 8007da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007daa:	9001      	str	r0, [sp, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f1a1 0404 	sub.w	r4, r1, #4
 8007db2:	bfb8      	it	lt
 8007db4:	18e4      	addlt	r4, r4, r3
 8007db6:	f000 f8d3 	bl	8007f60 <__malloc_lock>
 8007dba:	4a20      	ldr	r2, [pc, #128]	; (8007e3c <_free_r+0x9c>)
 8007dbc:	9801      	ldr	r0, [sp, #4]
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	4615      	mov	r5, r2
 8007dc2:	b933      	cbnz	r3, 8007dd2 <_free_r+0x32>
 8007dc4:	6063      	str	r3, [r4, #4]
 8007dc6:	6014      	str	r4, [r2, #0]
 8007dc8:	b003      	add	sp, #12
 8007dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dce:	f000 b8cd 	b.w	8007f6c <__malloc_unlock>
 8007dd2:	42a3      	cmp	r3, r4
 8007dd4:	d90b      	bls.n	8007dee <_free_r+0x4e>
 8007dd6:	6821      	ldr	r1, [r4, #0]
 8007dd8:	1862      	adds	r2, r4, r1
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	bf04      	itt	eq
 8007dde:	681a      	ldreq	r2, [r3, #0]
 8007de0:	685b      	ldreq	r3, [r3, #4]
 8007de2:	6063      	str	r3, [r4, #4]
 8007de4:	bf04      	itt	eq
 8007de6:	1852      	addeq	r2, r2, r1
 8007de8:	6022      	streq	r2, [r4, #0]
 8007dea:	602c      	str	r4, [r5, #0]
 8007dec:	e7ec      	b.n	8007dc8 <_free_r+0x28>
 8007dee:	461a      	mov	r2, r3
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	b10b      	cbz	r3, 8007df8 <_free_r+0x58>
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	d9fa      	bls.n	8007dee <_free_r+0x4e>
 8007df8:	6811      	ldr	r1, [r2, #0]
 8007dfa:	1855      	adds	r5, r2, r1
 8007dfc:	42a5      	cmp	r5, r4
 8007dfe:	d10b      	bne.n	8007e18 <_free_r+0x78>
 8007e00:	6824      	ldr	r4, [r4, #0]
 8007e02:	4421      	add	r1, r4
 8007e04:	1854      	adds	r4, r2, r1
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	6011      	str	r1, [r2, #0]
 8007e0a:	d1dd      	bne.n	8007dc8 <_free_r+0x28>
 8007e0c:	681c      	ldr	r4, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	6053      	str	r3, [r2, #4]
 8007e12:	4421      	add	r1, r4
 8007e14:	6011      	str	r1, [r2, #0]
 8007e16:	e7d7      	b.n	8007dc8 <_free_r+0x28>
 8007e18:	d902      	bls.n	8007e20 <_free_r+0x80>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	e7d3      	b.n	8007dc8 <_free_r+0x28>
 8007e20:	6825      	ldr	r5, [r4, #0]
 8007e22:	1961      	adds	r1, r4, r5
 8007e24:	428b      	cmp	r3, r1
 8007e26:	bf04      	itt	eq
 8007e28:	6819      	ldreq	r1, [r3, #0]
 8007e2a:	685b      	ldreq	r3, [r3, #4]
 8007e2c:	6063      	str	r3, [r4, #4]
 8007e2e:	bf04      	itt	eq
 8007e30:	1949      	addeq	r1, r1, r5
 8007e32:	6021      	streq	r1, [r4, #0]
 8007e34:	6054      	str	r4, [r2, #4]
 8007e36:	e7c7      	b.n	8007dc8 <_free_r+0x28>
 8007e38:	b003      	add	sp, #12
 8007e3a:	bd30      	pop	{r4, r5, pc}
 8007e3c:	240000a4 	.word	0x240000a4

08007e40 <_malloc_r>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	1ccd      	adds	r5, r1, #3
 8007e44:	f025 0503 	bic.w	r5, r5, #3
 8007e48:	3508      	adds	r5, #8
 8007e4a:	2d0c      	cmp	r5, #12
 8007e4c:	bf38      	it	cc
 8007e4e:	250c      	movcc	r5, #12
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	4606      	mov	r6, r0
 8007e54:	db01      	blt.n	8007e5a <_malloc_r+0x1a>
 8007e56:	42a9      	cmp	r1, r5
 8007e58:	d903      	bls.n	8007e62 <_malloc_r+0x22>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	6033      	str	r3, [r6, #0]
 8007e5e:	2000      	movs	r0, #0
 8007e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e62:	f000 f87d 	bl	8007f60 <__malloc_lock>
 8007e66:	4921      	ldr	r1, [pc, #132]	; (8007eec <_malloc_r+0xac>)
 8007e68:	680a      	ldr	r2, [r1, #0]
 8007e6a:	4614      	mov	r4, r2
 8007e6c:	b99c      	cbnz	r4, 8007e96 <_malloc_r+0x56>
 8007e6e:	4f20      	ldr	r7, [pc, #128]	; (8007ef0 <_malloc_r+0xb0>)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	b923      	cbnz	r3, 8007e7e <_malloc_r+0x3e>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4630      	mov	r0, r6
 8007e78:	f000 f862 	bl	8007f40 <_sbrk_r>
 8007e7c:	6038      	str	r0, [r7, #0]
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f85d 	bl	8007f40 <_sbrk_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	d123      	bne.n	8007ed2 <_malloc_r+0x92>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f86c 	bl	8007f6c <__malloc_unlock>
 8007e94:	e7e3      	b.n	8007e5e <_malloc_r+0x1e>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	1b5b      	subs	r3, r3, r5
 8007e9a:	d417      	bmi.n	8007ecc <_malloc_r+0x8c>
 8007e9c:	2b0b      	cmp	r3, #11
 8007e9e:	d903      	bls.n	8007ea8 <_malloc_r+0x68>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	441c      	add	r4, r3
 8007ea4:	6025      	str	r5, [r4, #0]
 8007ea6:	e004      	b.n	8007eb2 <_malloc_r+0x72>
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	42a2      	cmp	r2, r4
 8007eac:	bf0c      	ite	eq
 8007eae:	600b      	streq	r3, [r1, #0]
 8007eb0:	6053      	strne	r3, [r2, #4]
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 f85a 	bl	8007f6c <__malloc_unlock>
 8007eb8:	f104 000b 	add.w	r0, r4, #11
 8007ebc:	1d23      	adds	r3, r4, #4
 8007ebe:	f020 0007 	bic.w	r0, r0, #7
 8007ec2:	1ac2      	subs	r2, r0, r3
 8007ec4:	d0cc      	beq.n	8007e60 <_malloc_r+0x20>
 8007ec6:	1a1b      	subs	r3, r3, r0
 8007ec8:	50a3      	str	r3, [r4, r2]
 8007eca:	e7c9      	b.n	8007e60 <_malloc_r+0x20>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	6864      	ldr	r4, [r4, #4]
 8007ed0:	e7cc      	b.n	8007e6c <_malloc_r+0x2c>
 8007ed2:	1cc4      	adds	r4, r0, #3
 8007ed4:	f024 0403 	bic.w	r4, r4, #3
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d0e3      	beq.n	8007ea4 <_malloc_r+0x64>
 8007edc:	1a21      	subs	r1, r4, r0
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f000 f82e 	bl	8007f40 <_sbrk_r>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d1dd      	bne.n	8007ea4 <_malloc_r+0x64>
 8007ee8:	e7cf      	b.n	8007e8a <_malloc_r+0x4a>
 8007eea:	bf00      	nop
 8007eec:	240000a4 	.word	0x240000a4
 8007ef0:	240000a8 	.word	0x240000a8

08007ef4 <_realloc_r>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	4614      	mov	r4, r2
 8007efa:	460e      	mov	r6, r1
 8007efc:	b921      	cbnz	r1, 8007f08 <_realloc_r+0x14>
 8007efe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f02:	4611      	mov	r1, r2
 8007f04:	f7ff bf9c 	b.w	8007e40 <_malloc_r>
 8007f08:	b922      	cbnz	r2, 8007f14 <_realloc_r+0x20>
 8007f0a:	f7ff ff49 	bl	8007da0 <_free_r>
 8007f0e:	4625      	mov	r5, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f14:	f000 f830 	bl	8007f78 <_malloc_usable_size_r>
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d20f      	bcs.n	8007f3c <_realloc_r+0x48>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff ff8e 	bl	8007e40 <_malloc_r>
 8007f24:	4605      	mov	r5, r0
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d0f2      	beq.n	8007f10 <_realloc_r+0x1c>
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	f7ff fbf7 	bl	8007720 <memcpy>
 8007f32:	4631      	mov	r1, r6
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7ff ff33 	bl	8007da0 <_free_r>
 8007f3a:	e7e9      	b.n	8007f10 <_realloc_r+0x1c>
 8007f3c:	4635      	mov	r5, r6
 8007f3e:	e7e7      	b.n	8007f10 <_realloc_r+0x1c>

08007f40 <_sbrk_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d06      	ldr	r5, [pc, #24]	; (8007f5c <_sbrk_r+0x1c>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7f8 ff32 	bl	8000db4 <_sbrk>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_sbrk_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_sbrk_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	240002b8 	.word	0x240002b8

08007f60 <__malloc_lock>:
 8007f60:	4801      	ldr	r0, [pc, #4]	; (8007f68 <__malloc_lock+0x8>)
 8007f62:	f000 b811 	b.w	8007f88 <__retarget_lock_acquire_recursive>
 8007f66:	bf00      	nop
 8007f68:	240002c0 	.word	0x240002c0

08007f6c <__malloc_unlock>:
 8007f6c:	4801      	ldr	r0, [pc, #4]	; (8007f74 <__malloc_unlock+0x8>)
 8007f6e:	f000 b80c 	b.w	8007f8a <__retarget_lock_release_recursive>
 8007f72:	bf00      	nop
 8007f74:	240002c0 	.word	0x240002c0

08007f78 <_malloc_usable_size_r>:
 8007f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7c:	1f18      	subs	r0, r3, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bfbc      	itt	lt
 8007f82:	580b      	ldrlt	r3, [r1, r0]
 8007f84:	18c0      	addlt	r0, r0, r3
 8007f86:	4770      	bx	lr

08007f88 <__retarget_lock_acquire_recursive>:
 8007f88:	4770      	bx	lr

08007f8a <__retarget_lock_release_recursive>:
 8007f8a:	4770      	bx	lr

08007f8c <_init>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	bf00      	nop
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr

08007f98 <_fini>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr
