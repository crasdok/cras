
fdcan_rtos1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a4c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08005e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000042c0  24000078  08005ed8  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004338  08005ed8  00024338  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00028e80  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004037  00000000  00000000  00048f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001658  00000000  00000000  0004cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000014f0  00000000  00000000  0004e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032e97  00000000  00000000  0004faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00018ffe  00000000  00000000  0008293f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014bfef  00000000  00000000  0009b93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001e792c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005fb8  00000000  00000000  001e7980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005ce4 	.word	0x08005ce4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08005ce4 	.word	0x08005ce4

080002f0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002f4:	4b56      	ldr	r3, [pc, #344]	; (8000450 <MX_FDCAN1_Init+0x160>)
 80002f6:	4a57      	ldr	r2, [pc, #348]	; (8000454 <MX_FDCAN1_Init+0x164>)
 80002f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80002fa:	4b55      	ldr	r3, [pc, #340]	; (8000450 <MX_FDCAN1_Init+0x160>)
 80002fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000300:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000302:	4b53      	ldr	r3, [pc, #332]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000308:	4b51      	ldr	r3, [pc, #324]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800030a:	2201      	movs	r2, #1
 800030c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800030e:	4b50      	ldr	r3, [pc, #320]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000310:	2200      	movs	r2, #0
 8000312:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000314:	4b4e      	ldr	r3, [pc, #312]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000316:	2200      	movs	r2, #0
 8000318:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800031a:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800031c:	2201      	movs	r2, #1
 800031e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000320:	4b4b      	ldr	r3, [pc, #300]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000322:	2201      	movs	r2, #1
 8000324:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000326:	4b4a      	ldr	r3, [pc, #296]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000328:	2205      	movs	r2, #5
 800032a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800032c:	4b48      	ldr	r3, [pc, #288]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800032e:	2202      	movs	r2, #2
 8000330:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000332:	4b47      	ldr	r3, [pc, #284]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000334:	2201      	movs	r2, #1
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000338:	4b45      	ldr	r3, [pc, #276]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800033a:	2204      	movs	r2, #4
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800033e:	4b44      	ldr	r3, [pc, #272]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000340:	2205      	movs	r2, #5
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000344:	4b42      	ldr	r3, [pc, #264]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000346:	2204      	movs	r2, #4
 8000348:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800034a:	4b41      	ldr	r3, [pc, #260]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000350:	4b3f      	ldr	r3, [pc, #252]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000352:	2201      	movs	r2, #1
 8000354:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000356:	4b3e      	ldr	r3, [pc, #248]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000358:	2200      	movs	r2, #0
 800035a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800035c:	4b3c      	ldr	r3, [pc, #240]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800035e:	2201      	movs	r2, #1
 8000360:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000362:	4b3b      	ldr	r3, [pc, #236]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000364:	2204      	movs	r2, #4
 8000366:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000368:	4b39      	ldr	r3, [pc, #228]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800036a:	2200      	movs	r2, #0
 800036c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800036e:	4b38      	ldr	r3, [pc, #224]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000370:	2204      	movs	r2, #4
 8000372:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000374:	4b36      	ldr	r3, [pc, #216]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000376:	2201      	movs	r2, #1
 8000378:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800037a:	4b35      	ldr	r3, [pc, #212]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800037c:	2204      	movs	r2, #4
 800037e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000380:	4b33      	ldr	r3, [pc, #204]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000382:	2200      	movs	r2, #0
 8000384:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 1;
 8000386:	4b32      	ldr	r3, [pc, #200]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000388:	2201      	movs	r2, #1
 800038a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800038c:	4b30      	ldr	r3, [pc, #192]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800038e:	2201      	movs	r2, #1
 8000390:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000394:	2200      	movs	r2, #0
 8000396:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000398:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <MX_FDCAN1_Init+0x160>)
 800039a:	2204      	movs	r2, #4
 800039c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800039e:	482c      	ldr	r0, [pc, #176]	; (8000450 <MX_FDCAN1_Init+0x160>)
 80003a0:	f000 fcf8 	bl	8000d94 <HAL_FDCAN_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80003aa:	f000 fa5b 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
      sFilterConfig.FilterIndex = 0;
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
      sFilterConfig.FilterType = FDCAN_FILTER_MASK; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 80003ba:	4b27      	ldr	r3, [pc, #156]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003bc:	2202      	movs	r2, #2
 80003be:	609a      	str	r2, [r3, #8]
      sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	60da      	str	r2, [r3, #12]
      sFilterConfig.FilterID1 = 0x22; // ID Node2
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003c8:	2222      	movs	r2, #34	; 0x22
 80003ca:	611a      	str	r2, [r3, #16]
      sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80003d2:	615a      	str	r2, [r3, #20]
      sFilterConfig.RxBufferIndex = 0;
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	619a      	str	r2, [r3, #24]
      //HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
      if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80003da:	491f      	ldr	r1, [pc, #124]	; (8000458 <MX_FDCAN1_Init+0x168>)
 80003dc:	481c      	ldr	r0, [pc, #112]	; (8000450 <MX_FDCAN1_Init+0x160>)
 80003de:	f000 febb 	bl	8001158 <HAL_FDCAN_ConfigFilter>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_FDCAN1_Init+0xfc>
             {
                Error_Handler();
 80003e8:	f000 fa3c 	bl	8000864 <Error_Handler>
             }
      if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80003ec:	4818      	ldr	r0, [pc, #96]	; (8000450 <MX_FDCAN1_Init+0x160>)
 80003ee:	f000 ff29 	bl	8001244 <HAL_FDCAN_Start>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_FDCAN1_Init+0x10c>
            {
              Error_Handler();
 80003f8:	f000 fa34 	bl	8000864 <Error_Handler>
            }

          if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003fc:	2200      	movs	r2, #0
 80003fe:	2101      	movs	r1, #1
 8000400:	4813      	ldr	r0, [pc, #76]	; (8000450 <MX_FDCAN1_Init+0x160>)
 8000402:	f001 f8b9 	bl	8001578 <HAL_FDCAN_ActivateNotification>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_FDCAN1_Init+0x120>
            {
              /* Notification Error */
              Error_Handler();
 800040c:	f000 fa2a 	bl	8000864 <Error_Handler>
            }

          TxHeader.Identifier = 0x33;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_FDCAN1_Init+0x16c>)
 8000412:	2233      	movs	r2, #51	; 0x33
 8000414:	601a      	str	r2, [r3, #0]
          TxHeader.IdType = FDCAN_STANDARD_ID;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_FDCAN1_Init+0x16c>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
          TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_FDCAN1_Init+0x16c>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
          TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_FDCAN1_Init+0x16c>)
 8000424:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000428:	60da      	str	r2, [r3, #12]
          TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_FDCAN1_Init+0x16c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
          TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_FDCAN1_Init+0x16c>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
          TxHeader.FDFormat = FDCAN_FD_CAN;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_FDCAN1_Init+0x16c>)
 8000438:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800043c:	619a      	str	r2, [r3, #24]
          TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <MX_FDCAN1_Init+0x16c>)
 8000440:	2200      	movs	r2, #0
 8000442:	61da      	str	r2, [r3, #28]
          TxHeader.MessageMarker = 0x0;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_FDCAN1_Init+0x16c>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	240041d0 	.word	0x240041d0
 8000454:	4000a000 	.word	0x4000a000
 8000458:	240041b0 	.word	0x240041b0
 800045c:	24004270 	.word	0x24004270

08000460 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b0b8      	sub	sp, #224	; 0xe0
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	22b8      	movs	r2, #184	; 0xb8
 800047e:	2100      	movs	r1, #0
 8000480:	4618      	mov	r0, r3
 8000482:	f005 fc27 	bl	8005cd4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a29      	ldr	r2, [pc, #164]	; (8000530 <HAL_FDCAN_MspInit+0xd0>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d14b      	bne.n	8000528 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000494:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000496:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800049a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 ff6c 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80004ae:	f000 f9d9 	bl	8000864 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <HAL_FDCAN_MspInit+0xd4>)
 80004b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80004b8:	4a1e      	ldr	r2, [pc, #120]	; (8000534 <HAL_FDCAN_MspInit+0xd4>)
 80004ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004be:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <HAL_FDCAN_MspInit+0xd4>)
 80004c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80004c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HAL_FDCAN_MspInit+0xd4>)
 80004d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004d6:	4a17      	ldr	r2, [pc, #92]	; (8000534 <HAL_FDCAN_MspInit+0xd4>)
 80004d8:	f043 0308 	orr.w	r3, r3, #8
 80004dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <HAL_FDCAN_MspInit+0xd4>)
 80004e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004e6:	f003 0308 	and.w	r3, r3, #8
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004ee:	2303      	movs	r3, #3
 80004f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	2302      	movs	r3, #2
 80004f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	2300      	movs	r3, #0
 8000502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000506:	2309      	movs	r3, #9
 8000508:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800050c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000510:	4619      	mov	r1, r3
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <HAL_FDCAN_MspInit+0xd8>)
 8000514:	f001 fd3a 	bl	8001f8c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2013      	movs	r0, #19
 800051e:	f000 fc11 	bl	8000d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000522:	2013      	movs	r0, #19
 8000524:	f000 fc28 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000528:	bf00      	nop
 800052a:	37e0      	adds	r7, #224	; 0xe0
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	4000a000 	.word	0x4000a000
 8000534:	58024400 	.word	0x58024400
 8000538:	58020c00 	.word	0x58020c00

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <MX_FREERTOS_Init+0x38>)
 8000542:	2100      	movs	r1, #0
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <MX_FREERTOS_Init+0x3c>)
 8000546:	f004 fa99 	bl	8004a7c <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <MX_FREERTOS_Init+0x40>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <MX_FREERTOS_Init+0x44>)
 8000552:	2100      	movs	r1, #0
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_FREERTOS_Init+0x48>)
 8000556:	f004 fa91 	bl	8004a7c <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <MX_FREERTOS_Init+0x4c>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000560:	4a0a      	ldr	r2, [pc, #40]	; (800058c <MX_FREERTOS_Init+0x50>)
 8000562:	2100      	movs	r1, #0
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <MX_FREERTOS_Init+0x54>)
 8000566:	f004 fa89 	bl	8004a7c <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <MX_FREERTOS_Init+0x58>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	08005d6c 	.word	0x08005d6c
 8000578:	08000599 	.word	0x08000599
 800057c:	240042bc 	.word	0x240042bc
 8000580:	08005d90 	.word	0x08005d90
 8000584:	080005a9 	.word	0x080005a9
 8000588:	240042d0 	.word	0x240042d0
 800058c:	08005db4 	.word	0x08005db4
 8000590:	080005d9 	.word	0x080005d9
 8000594:	240042dc 	.word	0x240042dc

08000598 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f004 fafd 	bl	8004ba0 <osDelay>
 80005a6:	e7fb      	b.n	80005a0 <StartDefaultTask+0x8>

080005a8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(RxData_From_Node1[1] == '2')
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <StartTask02+0x28>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	2b32      	cmp	r3, #50	; 0x32
 80005b6:	d106      	bne.n	80005c6 <StartTask02+0x1e>
	  	 	  {
	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <StartTask02+0x2c>)
 80005bc:	f001 feaf 	bl	800231e <HAL_GPIO_TogglePin>
	  		  osDelay(200);
 80005c0:	20c8      	movs	r0, #200	; 0xc8
 80005c2:	f004 faed 	bl	8004ba0 <osDelay>
	  	 	  }
    osDelay(500);
 80005c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ca:	f004 fae9 	bl	8004ba0 <osDelay>
	  if(RxData_From_Node1[1] == '2')
 80005ce:	e7ef      	b.n	80005b0 <StartTask02+0x8>
 80005d0:	240042c8 	.word	0x240042c8
 80005d4:	58020400 	.word	0x58020400

080005d8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(RxData_From_Node1[0] == '1')
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <StartTask03+0x28>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b31      	cmp	r3, #49	; 0x31
 80005e6:	d107      	bne.n	80005f8 <StartTask03+0x20>
	 	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <StartTask03+0x2c>)
 80005ee:	f001 fe96 	bl	800231e <HAL_GPIO_TogglePin>
		  osDelay(200);
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f004 fad4 	bl	8004ba0 <osDelay>
	 	  }

    osDelay(200);
 80005f8:	20c8      	movs	r0, #200	; 0xc8
 80005fa:	f004 fad1 	bl	8004ba0 <osDelay>
	  if(RxData_From_Node1[0] == '1')
 80005fe:	e7ef      	b.n	80005e0 <StartTask03+0x8>
 8000600:	240042c8 	.word	0x240042c8
 8000604:	58020400 	.word	0x58020400

08000608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000624:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800063e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000642:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800064e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800065c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000660:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800066c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800067a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800068a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800068e:	f003 0310 	and.w	r3, r3, #16
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f244 0101 	movw	r1, #16385	; 0x4001
 800069c:	4815      	ldr	r0, [pc, #84]	; (80006f4 <MX_GPIO_Init+0xec>)
 800069e:	f001 fe25 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2102      	movs	r1, #2
 80006a6:	4814      	ldr	r0, [pc, #80]	; (80006f8 <MX_GPIO_Init+0xf0>)
 80006a8:	f001 fe20 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 80006ac:	f244 0301 	movw	r3, #16385	; 0x4001
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0xec>)
 80006c6:	f001 fc61 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006ca:	2302      	movs	r3, #2
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_GPIO_Init+0xf0>)
 80006e2:	f001 fc53 	bl	8001f8c <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58024400 	.word	0x58024400
 80006f4:	58020400 	.word	0x58020400
 80006f8:	58021000 	.word	0x58021000

080006fc <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
//    printf("%s\r\n",);

//    HAL_Delay (1000);
   if(FDCAN1 == hfdcan->Instance){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d10f      	bne.n	8000730 <HAL_FDCAN_RxFifo0Callback+0x34>
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00a      	beq.n	8000730 <HAL_FDCAN_RxFifo0Callback+0x34>
  {

//       HAL_Delay (1000);
    /* Retreive Rx messages from RX FIFO0 */
     //?  기서?   �???? ? RX FIFO0?   ?  ?   ?  �???? ?? RxHeader ??????? 복사?   ??????? ?  ?  ?   ??????? RxData 배열 ??????? 복사?  ?  ?  .
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node2) != HAL_OK)
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_FDCAN_RxFifo0Callback+0x40>)
 800071c:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_FDCAN_RxFifo0Callback+0x44>)
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 fdbb 	bl	800129c <HAL_FDCAN_GetRxMessage>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_FDCAN_RxFifo0Callback+0x34>
    {
    /* Reception Error */
    Error_Handler();
 800072c:	f000 f89a 	bl	8000864 <Error_Handler>
    }
   }
   }
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	4000a000 	.word	0x4000a000
 800073c:	240042d4 	.word	0x240042d4
 8000740:	24004294 	.word	0x24004294

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 f9e8 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f80a 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff ff5a 	bl	8000608 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000754:	f7ff fdcc 	bl	80002f0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000758:	f004 f96c 	bl	8004a34 <osKernelInitialize>
  MX_FREERTOS_Init();
 800075c:	f7ff feee 	bl	800053c <MX_FREERTOS_Init>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x1c>
	...

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	; 0x70
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	224c      	movs	r2, #76	; 0x4c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f005 faae 	bl	8005cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f005 faa8 	bl	8005cd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000784:	2004      	movs	r0, #4
 8000786:	f001 fde5 	bl	8002354 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <SystemClock_Config+0xd8>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <SystemClock_Config+0xd8>)
 8000794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <SystemClock_Config+0xd8>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a6:	bf00      	nop
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <SystemClock_Config+0xd8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b4:	d1f8      	bne.n	80007a8 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b6:	2302      	movs	r3, #2
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007ce:	2308      	movs	r3, #8
 80007d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 80007d6:	2320      	movs	r3, #32
 80007d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007de:	230c      	movs	r3, #12
 80007e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fe0a 	bl	8002408 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fa:	f000 f833 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	233f      	movs	r3, #63	; 0x3f
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2102      	movs	r1, #2
 8000824:	4618      	mov	r0, r3
 8000826:	f002 f9f3 	bl	8002c10 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000830:	f000 f818 	bl	8000864 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3770      	adds	r7, #112	; 0x70
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	58024800 	.word	0x58024800

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 f99f 	bl	8000b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40000800 	.word	0x40000800

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x38>)
 8000878:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_MspInit+0x38>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x38>)
 8000888:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	210f      	movs	r1, #15
 8000898:	f06f 0001 	mvn.w	r0, #1
 800089c:	f000 fa52 	bl	8000d44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58024400 	.word	0x58024400

080008ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b090      	sub	sp, #64	; 0x40
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d827      	bhi.n	800090a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0U);
 80008ba:	2200      	movs	r2, #0
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	201e      	movs	r0, #30
 80008c0:	f000 fa40 	bl	8000d44 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008c4:	201e      	movs	r0, #30
 80008c6:	f000 fa57 	bl	8000d78 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80008ca:	4a29      	ldr	r2, [pc, #164]	; (8000970 <HAL_InitTick+0xc4>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <HAL_InitTick+0xc8>)
 80008d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80008d6:	4a27      	ldr	r2, [pc, #156]	; (8000974 <HAL_InitTick+0xc8>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <HAL_InitTick+0xc8>)
 80008e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ee:	f107 0210 	add.w	r2, r7, #16
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fcff 	bl	80032fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000904:	2b00      	cmp	r3, #0
 8000906:	d106      	bne.n	8000916 <HAL_InitTick+0x6a>
 8000908:	e001      	b.n	800090e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e02b      	b.n	8000966 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090e:	f002 fcdf 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8000912:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000914:	e004      	b.n	8000920 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000916:	f002 fcdb 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 800091a:	4603      	mov	r3, r0
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_InitTick+0xcc>)
 8000924:	fba2 2303 	umull	r2, r3, r2, r3
 8000928:	0c9b      	lsrs	r3, r3, #18
 800092a:	3b01      	subs	r3, #1
 800092c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <HAL_InitTick+0xd0>)
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <HAL_InitTick+0xd4>)
 8000932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_InitTick+0xd0>)
 8000936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_InitTick+0xd0>)
 800093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000940:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_InitTick+0xd0>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_InitTick+0xd0>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <HAL_InitTick+0xd0>)
 8000950:	f003 fd86 	bl	8004460 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d104      	bne.n	8000964 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800095a:	4808      	ldr	r0, [pc, #32]	; (800097c <HAL_InitTick+0xd0>)
 800095c:	f003 fde2 	bl	8004524 <HAL_TIM_Base_Start_IT>
 8000960:	4603      	mov	r3, r0
 8000962:	e000      	b.n	8000966 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
}
 8000966:	4618      	mov	r0, r3
 8000968:	3740      	adds	r7, #64	; 0x40
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	24000008 	.word	0x24000008
 8000974:	58024400 	.word	0x58024400
 8000978:	431bde83 	.word	0x431bde83
 800097c:	240042e8 	.word	0x240042e8
 8000980:	40000800 	.word	0x40000800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <FDCAN1_IT0_IRQHandler+0x10>)
 80009b6:	f000 fe59 	bl	800166c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	240041d0 	.word	0x240041d0

080009c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM4_IRQHandler+0x10>)
 80009ca:	f003 fe23 	bl	8004614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	240042e8 	.word	0x240042e8

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <SystemInit+0xd0>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <SystemInit+0xd0>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ec:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <SystemInit+0xd4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 030f 	and.w	r3, r3, #15
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d807      	bhi.n	8000a08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <SystemInit+0xd4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f023 030f 	bic.w	r3, r3, #15
 8000a00:	4a2a      	ldr	r2, [pc, #168]	; (8000aac <SystemInit+0xd4>)
 8000a02:	f043 0303 	orr.w	r3, r3, #3
 8000a06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <SystemInit+0xd8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <SystemInit+0xd8>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <SystemInit+0xd8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <SystemInit+0xd8>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4924      	ldr	r1, [pc, #144]	; (8000ab0 <SystemInit+0xd8>)
 8000a20:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <SystemInit+0xdc>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <SystemInit+0xd4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 030c 	and.w	r3, r3, #12
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d007      	beq.n	8000a42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <SystemInit+0xd4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f023 030f 	bic.w	r3, r3, #15
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <SystemInit+0xd4>)
 8000a3c:	f043 0303 	orr.w	r3, r3, #3
 8000a40:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <SystemInit+0xd8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <SystemInit+0xd8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <SystemInit+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <SystemInit+0xd8>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <SystemInit+0xe0>)
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <SystemInit+0xd8>)
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <SystemInit+0xe4>)
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <SystemInit+0xd8>)
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <SystemInit+0xe8>)
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <SystemInit+0xd8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <SystemInit+0xd8>)
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <SystemInit+0xe8>)
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <SystemInit+0xd8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <SystemInit+0xd8>)
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <SystemInit+0xe8>)
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <SystemInit+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <SystemInit+0xd8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <SystemInit+0xd8>)
 8000a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <SystemInit+0xd8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <SystemInit+0xec>)
 8000a98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a9c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	52002000 	.word	0x52002000
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ab8:	02020200 	.word	0x02020200
 8000abc:	01ff0000 	.word	0x01ff0000
 8000ac0:	01010280 	.word	0x01010280
 8000ac4:	52004000 	.word	0x52004000

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000acc:	f7ff ff84 	bl	80009d8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f005 f8bb 	bl	8005c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fe23 	bl	8000744 <main>
  bx  lr
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000b04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b08:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000b0c:	08005e60 	.word	0x08005e60
  ldr r2, =_sbss
 8000b10:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000b14:	24004338 	.word	0x24004338

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 f903 	bl	8000d2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000b28:	f002 fa28 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_Init+0x68>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	f003 030f 	and.w	r3, r3, #15
 8000b38:	4913      	ldr	r1, [pc, #76]	; (8000b88 <HAL_Init+0x6c>)
 8000b3a:	5ccb      	ldrb	r3, [r1, r3]
 8000b3c:	f003 031f 	and.w	r3, r3, #31
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_Init+0x68>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_Init+0x6c>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <HAL_Init+0x70>)
 8000b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_Init+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	200f      	movs	r0, #15
 8000b68:	f7ff fea0 	bl	80008ac <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e002      	b.n	8000b7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b76:	f7ff fe7b 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400
 8000b88:	08005dd8 	.word	0x08005dd8
 8000b8c:	24000004 	.word	0x24000004
 8000b90:	24000000 	.word	0x24000000

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2400000c 	.word	0x2400000c
 8000bb8:	24004334 	.word	0x24004334

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	24004334 	.word	0x24004334

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <__NVIC_SetPriorityGrouping+0x40>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x40>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	05fa0000 	.word	0x05fa0000

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ff4c 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d52:	f7ff ff63 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff ffb3 	bl	8000cc8 <NVIC_EncodePriority>
 8000d62:	4602      	mov	r2, r0
 8000d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff82 	bl	8000c74 <__NVIC_SetPriority>
}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff56 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b098      	sub	sp, #96	; 0x60
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d9c:	4a84      	ldr	r2, [pc, #528]	; (8000fb0 <HAL_FDCAN_Init+0x21c>)
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4611      	mov	r1, r2
 8000da4:	224c      	movs	r2, #76	; 0x4c
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 ff86 	bl	8005cb8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e1ca      	b.n	800114c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a7e      	ldr	r2, [pc, #504]	; (8000fb4 <HAL_FDCAN_Init+0x220>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d106      	bne.n	8000dce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dc8:	461a      	mov	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d106      	bne.n	8000de8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fb3c 	bl	8000460 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	699a      	ldr	r2, [r3, #24]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0210 	bic.w	r2, r2, #16
 8000df6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df8:	f7ff fee0 	bl	8000bbc <HAL_GetTick>
 8000dfc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dfe:	e014      	b.n	8000e2a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e00:	f7ff fedc 	bl	8000bbc <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b0a      	cmp	r3, #10
 8000e0c:	d90d      	bls.n	8000e2a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e14:	f043 0201 	orr.w	r2, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2203      	movs	r2, #3
 8000e22:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e190      	b.n	800114c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d0e3      	beq.n	8000e00 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e48:	f7ff feb8 	bl	8000bbc <HAL_GetTick>
 8000e4c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e4e:	e014      	b.n	8000e7a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e50:	f7ff feb4 	bl	8000bbc <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90d      	bls.n	8000e7a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e64:	f043 0201 	orr.w	r2, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e168      	b.n	800114c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0e3      	beq.n	8000e50 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0202 	orr.w	r2, r2, #2
 8000e96:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7c1b      	ldrb	r3, [r3, #16]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	699a      	ldr	r2, [r3, #24]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eae:	619a      	str	r2, [r3, #24]
 8000eb0:	e007      	b.n	8000ec2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	699a      	ldr	r2, [r3, #24]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7c5b      	ldrb	r3, [r3, #17]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ed8:	619a      	str	r2, [r3, #24]
 8000eda:	e007      	b.n	8000eec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000eea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7c9b      	ldrb	r3, [r3, #18]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	e007      	b.n	8000f16 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699a      	ldr	r2, [r3, #24]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f14:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f3a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691a      	ldr	r2, [r3, #16]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0210 	bic.w	r2, r2, #16
 8000f4a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d108      	bne.n	8000f66 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699a      	ldr	r2, [r3, #24]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0204 	orr.w	r2, r2, #4
 8000f62:	619a      	str	r2, [r3, #24]
 8000f64:	e030      	b.n	8000fc8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d02c      	beq.n	8000fc8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d020      	beq.n	8000fb8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	699a      	ldr	r2, [r3, #24]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f84:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0210 	orr.w	r2, r2, #16
 8000f94:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d114      	bne.n	8000fc8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	699a      	ldr	r2, [r3, #24]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0220 	orr.w	r2, r2, #32
 8000fac:	619a      	str	r2, [r3, #24]
 8000fae:	e00b      	b.n	8000fc8 <HAL_FDCAN_Init+0x234>
 8000fb0:	08005d20 	.word	0x08005d20
 8000fb4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0220 	orr.w	r2, r2, #32
 8000fc6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fe0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ff0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ff2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ffc:	d115      	bne.n	800102a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	3b01      	subs	r3, #1
 800100a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800100c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	3b01      	subs	r3, #1
 8001014:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001016:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	3b01      	subs	r3, #1
 8001020:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001026:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001028:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00a      	beq.n	8001048 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001050:	4413      	add	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d012      	beq.n	800107c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800105e:	f023 0107 	bic.w	r1, r3, #7
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800106c:	4413      	add	r3, r2
 800106e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	2b00      	cmp	r3, #0
 8001082:	d012      	beq.n	80010aa <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800108c:	f023 0107 	bic.w	r1, r3, #7
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800109a:	4413      	add	r3, r2
 800109c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d013      	beq.n	80010da <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010ba:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010c8:	4413      	add	r3, r2
 80010ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010ce:	011a      	lsls	r2, r3, #4
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d013      	beq.n	800110a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010ea:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010f8:	4413      	add	r3, r2
 80010fa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010fe:	021a      	lsls	r2, r3, #8
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_FDCAN_Init+0x3c0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d107      	bne.n	8001124 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f022 0203 	bic.w	r2, r2, #3
 8001122:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fd9f 	bl	8001c80 <FDCAN_CalcultateRamBlockAddresses>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001148:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800114c:	4618      	mov	r0, r3
 800114e:	3760      	adds	r7, #96	; 0x60
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	4000a000 	.word	0x4000a000

08001158 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001168:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d002      	beq.n	8001176 <HAL_FDCAN_ConfigFilter+0x1e>
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d157      	bne.n	8001226 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12b      	bne.n	80011d6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d10d      	bne.n	80011a2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001192:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001198:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800119a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e00e      	b.n	80011c0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011ae:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80011b6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011bc:	4313      	orrs	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e025      	b.n	8001222 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	075a      	lsls	r2, r3, #29
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d103      	bne.n	80011f4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	e006      	b.n	8001202 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	079a      	lsls	r2, r3, #30
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3304      	adds	r3, #4
 800121a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e008      	b.n	8001238 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800122c:	f043 0202 	orr.w	r2, r3, #2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d111      	bne.n	800127c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e008      	b.n	800128e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001282:	f043 0204 	orr.w	r2, r3, #4
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
  }
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800129c:	b480      	push	{r7}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012b4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80012b6:	7efb      	ldrb	r3, [r7, #27]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	f040 814b 	bne.w	8001554 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b40      	cmp	r3, #64	; 0x40
 80012c2:	d14d      	bne.n	8001360 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80012cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d109      	bne.n	80012e8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012da:	f043 0220 	orr.w	r2, r3, #32
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e13e      	b.n	8001566 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80012f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e12c      	b.n	8001566 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001314:	0e1b      	lsrs	r3, r3, #24
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10b      	bne.n	8001336 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001326:	0fdb      	lsrs	r3, r3, #31
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001330:	d101      	bne.n	8001336 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001332:	2301      	movs	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	4413      	add	r3, r2
 8001348:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	69f9      	ldr	r1, [r7, #28]
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
 800135e:	e069      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b41      	cmp	r3, #65	; 0x41
 8001364:	d14d      	bne.n	8001402 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800136e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d109      	bne.n	800138a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800137c:	f043 0220 	orr.w	r2, r3, #32
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0ed      	b.n	8001566 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001396:	2b00      	cmp	r3, #0
 8001398:	d109      	bne.n	80013ae <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0db      	b.n	8001566 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80013b6:	0e1b      	lsrs	r3, r3, #24
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10b      	bne.n	80013d8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013c8:	0fdb      	lsrs	r3, r3, #31
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013d2:	d101      	bne.n	80013d8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	69f9      	ldr	r1, [r7, #28]
 80013f6:	fb01 f303 	mul.w	r3, r1, r3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001400:	e018      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	429a      	cmp	r2, r3
 800140a:	d309      	bcc.n	8001420 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001412:	f043 0220 	orr.w	r2, r3, #32
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0a2      	b.n	8001566 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0c9b      	lsrs	r3, r3, #18
 800144e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e005      	b.n	8001464 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	3304      	adds	r3, #4
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29a      	uxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0e1b      	lsrs	r3, r3, #24
 80014b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0fda      	lsrs	r2, r3, #31
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	3304      	adds	r3, #4
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
 80014d6:	e00a      	b.n	80014ee <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	441a      	add	r2, r3
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	440b      	add	r3, r1
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	3301      	adds	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	461a      	mov	r2, r3
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d3eb      	bcc.n	80014d8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b40      	cmp	r3, #64	; 0x40
 8001504:	d105      	bne.n	8001512 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001510:	e01e      	b.n	8001550 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b41      	cmp	r3, #65	; 0x41
 8001516:	d105      	bne.n	8001524 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001522:	e015      	b.n	8001550 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b1f      	cmp	r3, #31
 8001528:	d808      	bhi.n	800153c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800153a:	e009      	b.n	8001550 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f003 021f 	and.w	r2, r3, #31
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e008      	b.n	8001566 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800155a:	f043 0208 	orr.w	r2, r3, #8
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
  }
}
 8001566:	4618      	mov	r0, r3
 8001568:	372c      	adds	r7, #44	; 0x2c
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	08005de8 	.word	0x08005de8

08001578 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800158a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d002      	beq.n	8001598 <HAL_FDCAN_ActivateNotification+0x20>
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d155      	bne.n	8001644 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d108      	bne.n	80015b8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80015b6:	e014      	b.n	80015e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	4013      	ands	r3, r2
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d108      	bne.n	80015da <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0202 	orr.w	r2, r2, #2
 80015d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015d8:	e003      	b.n	80015e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2203      	movs	r2, #3
 80015e0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	430a      	orrs	r2, r1
 800161a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_FDCAN_ActivateNotification+0xec>)
 8001628:	4013      	ands	r3, r2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	430b      	orrs	r3, r1
 8001630:	6553      	str	r3, [r2, #84]	; 0x54
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	0f9b      	lsrs	r3, r3, #30
 800163a:	490b      	ldr	r1, [pc, #44]	; (8001668 <HAL_FDCAN_ActivateNotification+0xf0>)
 800163c:	4313      	orrs	r3, r2
 800163e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e008      	b.n	8001656 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800164a:	f043 0202 	orr.w	r2, r3, #2
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	3fcfffff 	.word	0x3fcfffff
 8001668:	4000a800 	.word	0x4000a800

0800166c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b092      	sub	sp, #72	; 0x48
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001674:	4b90      	ldr	r3, [pc, #576]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	079b      	lsls	r3, r3, #30
 800167a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800167c:	4b8e      	ldr	r3, [pc, #568]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	079b      	lsls	r3, r3, #30
 8001682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001684:	4013      	ands	r3, r2
 8001686:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001692:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800169c:	4013      	ands	r3, r2
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016b4:	4013      	ands	r3, r2
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016cc:	4013      	ands	r3, r2
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016e4:	4013      	ands	r3, r2
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ee:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016fc:	4013      	ands	r3, r2
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d011      	beq.n	8001732 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001724:	651a      	str	r2, [r3, #80]	; 0x50
 8001726:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fa5a 	bl	8001be6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01e      	beq.n	800177e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174a:	2b00      	cmp	r3, #0
 800174c:	d017      	beq.n	800177e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001762:	4013      	ands	r3, r2
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	651a      	str	r2, [r3, #80]	; 0x50
 8001770:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fa0b 	bl	8001b94 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800177e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00d      	beq.n	80017a0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800178a:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HAL_FDCAN_IRQHandler+0x250>)
 800178c:	400b      	ands	r3, r1
 800178e:	6513      	str	r3, [r2, #80]	; 0x50
 8001790:	4a49      	ldr	r2, [pc, #292]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001794:	0f9b      	lsrs	r3, r3, #30
 8001796:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001798:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f9c4 	bl	8001b28 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80017a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00d      	beq.n	80017c2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_FDCAN_IRQHandler+0x250>)
 80017ae:	400b      	ands	r3, r1
 80017b0:	6513      	str	r3, [r2, #80]	; 0x50
 80017b2:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80017b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b6:	0f9b      	lsrs	r3, r3, #30
 80017b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80017ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f9be 	bl	8001b3e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80017c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_FDCAN_IRQHandler+0x250>)
 80017d0:	400b      	ands	r3, r1
 80017d2:	6513      	str	r3, [r2, #80]	; 0x50
 80017d4:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80017d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d8:	0f9b      	lsrs	r3, r3, #30
 80017da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80017dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7fe ff8c 	bl	80006fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80017e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_FDCAN_IRQHandler+0x250>)
 80017f2:	400b      	ands	r3, r1
 80017f4:	6513      	str	r3, [r2, #80]	; 0x50
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80017f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017fa:	0f9b      	lsrs	r3, r3, #30
 80017fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80017fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f9a7 	bl	8001b54 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001810:	2b00      	cmp	r3, #0
 8001812:	d011      	beq.n	8001838 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00a      	beq.n	8001838 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800182a:	651a      	str	r2, [r3, #80]	; 0x50
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f999 	bl	8001b6a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01e      	beq.n	8001884 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001850:	2b00      	cmp	r3, #0
 8001852:	d017      	beq.n	8001884 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001868:	4013      	ands	r3, r2
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	651a      	str	r2, [r3, #80]	; 0x50
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800187c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f97d 	bl	8001b7e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00f      	beq.n	80018c0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018a8:	651a      	str	r2, [r3, #80]	; 0x50
 80018aa:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f97a 	bl	8001baa <HAL_FDCAN_RxBufferNewMessageCallback>
 80018b6:	e003      	b.n	80018c0 <HAL_FDCAN_IRQHandler+0x254>
 80018b8:	4000a800 	.word	0x4000a800
 80018bc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d011      	beq.n	80018f2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00a      	beq.n	80018f2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e4:	651a      	str	r2, [r3, #80]	; 0x50
 80018e6:	4b8d      	ldr	r3, [pc, #564]	; (8001b1c <HAL_FDCAN_IRQHandler+0x4b0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f966 	bl	8001bbe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d011      	beq.n	8001924 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001916:	651a      	str	r2, [r3, #80]	; 0x50
 8001918:	4b80      	ldr	r3, [pc, #512]	; (8001b1c <HAL_FDCAN_IRQHandler+0x4b0>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f957 	bl	8001bd2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d016      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00f      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001948:	651a      	str	r2, [r3, #80]	; 0x50
 800194a:	4b74      	ldr	r3, [pc, #464]	; (8001b1c <HAL_FDCAN_IRQHandler+0x4b0>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001956:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_FDCAN_IRQHandler+0x4b4>)
 800196e:	400b      	ands	r3, r1
 8001970:	6513      	str	r3, [r2, #80]	; 0x50
 8001972:	4a6a      	ldr	r2, [pc, #424]	; (8001b1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	0f9b      	lsrs	r3, r3, #30
 8001978:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800197a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f946 	bl	8001c0e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	2b00      	cmp	r3, #0
 8001986:	d011      	beq.n	80019ac <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800198e:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001990:	400b      	ands	r3, r1
 8001992:	6513      	str	r3, [r2, #80]	; 0x50
 8001994:	4a61      	ldr	r2, [pc, #388]	; (8001b1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	0f9b      	lsrs	r3, r3, #30
 800199a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80019a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5c      	ldr	r2, [pc, #368]	; (8001b24 <HAL_FDCAN_IRQHandler+0x4b8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	f040 80a6 	bne.w	8001b04 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 809e 	beq.w	8001b04 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	4013      	ands	r3, r2
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019ea:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	6a3a      	ldr	r2, [r7, #32]
 80019f4:	4013      	ands	r3, r2
 80019f6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a02:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001a1a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001a32:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8e7 	bl	8001c24 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001a64:	6a39      	ldr	r1, [r7, #32]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f8e7 	bl	8001c3a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d01b      	beq.n	8001ab2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d014      	beq.n	8001ab2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2240      	movs	r2, #64	; 0x40
 8001aa6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	6939      	ldr	r1, [r7, #16]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f8cf 	bl	8001c50 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001ac0:	69f9      	ldr	r1, [r7, #28]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8d0 	bl	8001c68 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00b      	beq.n	8001b04 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f873 	bl	8001bfa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b14:	bf00      	nop
 8001b16:	3748      	adds	r7, #72	; 0x48
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	4000a800 	.word	0x4000a800
 8001b20:	3fcfffff 	.word	0x3fcfffff
 8001b24:	4000a000 	.word	0x4000a000

08001b28 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c96:	4ba7      	ldr	r3, [pc, #668]	; (8001f34 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	0091      	lsls	r1, r2, #2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cb0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cd6:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	0091      	lsls	r1, r2, #2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	041a      	lsls	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001d18:	4b86      	ldr	r3, [pc, #536]	; (8001f34 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	0091      	lsls	r1, r2, #2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d32:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d60:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	0091      	lsls	r1, r2, #2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d7a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	041a      	lsls	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001da8:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	0091      	lsls	r1, r2, #2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	0091      	lsls	r1, r2, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dee:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	0091      	lsls	r1, r2, #2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	430b      	orrs	r3, r1
 8001e24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e30:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e4c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	061a      	lsls	r2, r3, #24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001e66:	4413      	add	r3, r2
 8001e68:	009a      	lsls	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	441a      	add	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	441a      	add	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	441a      	add	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	441a      	add	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	441a      	add	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d915      	bls.n	8001f5c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001f30:	e006      	b.n	8001f40 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001f32:	bf00      	nop
 8001f34:	ffff0003 	.word	0xffff0003
 8001f38:	10002b00 	.word	0x10002b00
 8001f3c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f46:	f043 0220 	orr.w	r2, r3, #32
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e010      	b.n	8001f7e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	e005      	b.n	8001f70 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d3f3      	bcc.n	8001f64 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f9a:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <HAL_GPIO_Init+0x234>)
 8001f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f9e:	e194      	b.n	80022ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8186 	beq.w	80022c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d005      	beq.n	8001fd0 <HAL_GPIO_Init+0x44>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d130      	bne.n	8002032 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002006:	2201      	movs	r2, #1
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f003 0201 	and.w	r2, r3, #1
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b03      	cmp	r3, #3
 800203c:	d017      	beq.n	800206e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d123      	bne.n	80020c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	69b9      	ldr	r1, [r7, #24]
 80020be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0203 	and.w	r2, r3, #3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80e0 	beq.w	80022c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x238>)
 8002106:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800210a:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <HAL_GPIO_Init+0x238>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_GPIO_Init+0x238>)
 8002116:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002122:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <HAL_GPIO_Init+0x23c>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a20      	ldr	r2, [pc, #128]	; (80021cc <HAL_GPIO_Init+0x240>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d052      	beq.n	80021f4 <HAL_GPIO_Init+0x268>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_GPIO_Init+0x244>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d031      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <HAL_GPIO_Init+0x248>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x22a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_GPIO_Init+0x24c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_GPIO_Init+0x250>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_GPIO_Init+0x254>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1a      	ldr	r2, [pc, #104]	; (80021e4 <HAL_GPIO_Init+0x258>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x21a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_GPIO_Init+0x25c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x216>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <HAL_GPIO_Init+0x260>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x212>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_GPIO_Init+0x264>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x20e>
 8002196:	2309      	movs	r3, #9
 8002198:	e02d      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 800219a:	230a      	movs	r3, #10
 800219c:	e02b      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 800219e:	2308      	movs	r3, #8
 80021a0:	e029      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e027      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021a6:	2306      	movs	r3, #6
 80021a8:	e025      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e023      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e021      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e01f      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e01d      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e01b      	b.n	80021f6 <HAL_GPIO_Init+0x26a>
 80021be:	bf00      	nop
 80021c0:	58000080 	.word	0x58000080
 80021c4:	58024400 	.word	0x58024400
 80021c8:	58000400 	.word	0x58000400
 80021cc:	58020000 	.word	0x58020000
 80021d0:	58020400 	.word	0x58020400
 80021d4:	58020800 	.word	0x58020800
 80021d8:	58020c00 	.word	0x58020c00
 80021dc:	58021000 	.word	0x58021000
 80021e0:	58021400 	.word	0x58021400
 80021e4:	58021800 	.word	0x58021800
 80021e8:	58021c00 	.word	0x58021c00
 80021ec:	58022000 	.word	0x58022000
 80021f0:	58022400 	.word	0x58022400
 80021f4:	2300      	movs	r3, #0
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	f002 0203 	and.w	r2, r2, #3
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	4093      	lsls	r3, r2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002206:	4938      	ldr	r1, [pc, #224]	; (80022e8 <HAL_GPIO_Init+0x35c>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800223a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f ae63 	bne.w	8001fa0 <HAL_GPIO_Init+0x14>
  }
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	3724      	adds	r7, #36	; 0x24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	58000400 	.word	0x58000400

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	041a      	lsls	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43d9      	mvns	r1, r3
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	400b      	ands	r3, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_PWREx_ConfigSupply+0xb0>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	2b06      	cmp	r3, #6
 8002366:	d00a      	beq.n	800237e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_PWREx_ConfigSupply+0xb0>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e040      	b.n	80023fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e03e      	b.n	80023fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_PWREx_ConfigSupply+0xb0>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002386:	491f      	ldr	r1, [pc, #124]	; (8002404 <HAL_PWREx_ConfigSupply+0xb0>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4313      	orrs	r3, r2
 800238c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800238e:	f7fe fc15 	bl	8000bbc <HAL_GetTick>
 8002392:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002394:	e009      	b.n	80023aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002396:	f7fe fc11 	bl	8000bbc <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a4:	d901      	bls.n	80023aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e028      	b.n	80023fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b6:	d1ee      	bne.n	8002396 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b1e      	cmp	r3, #30
 80023bc:	d008      	beq.n	80023d0 <HAL_PWREx_ConfigSupply+0x7c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b2e      	cmp	r3, #46	; 0x2e
 80023c2:	d005      	beq.n	80023d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b1d      	cmp	r3, #29
 80023c8:	d002      	beq.n	80023d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b2d      	cmp	r3, #45	; 0x2d
 80023ce:	d114      	bne.n	80023fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80023d0:	f7fe fbf4 	bl	8000bbc <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023d6:	e009      	b.n	80023ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023d8:	f7fe fbf0 	bl	8000bbc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023e6:	d901      	bls.n	80023ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e007      	b.n	80023fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d1ee      	bne.n	80023d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	58024800 	.word	0x58024800

08002408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e3f3      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80b3 	beq.w	800258e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002428:	4b9e      	ldr	r3, [pc, #632]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002432:	4b9c      	ldr	r3, [pc, #624]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	2b10      	cmp	r3, #16
 800243c:	d007      	beq.n	800244e <HAL_RCC_OscConfig+0x46>
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	2b18      	cmp	r3, #24
 8002442:	d112      	bne.n	800246a <HAL_RCC_OscConfig+0x62>
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d10d      	bne.n	800246a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244e:	4b95      	ldr	r3, [pc, #596]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8098 	beq.w	800258c <HAL_RCC_OscConfig+0x184>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 8093 	bne.w	800258c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e3cb      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x7a>
 8002474:	4b8b      	ldr	r3, [pc, #556]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a8a      	ldr	r2, [pc, #552]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e058      	b.n	8002534 <HAL_RCC_OscConfig+0x12c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d112      	bne.n	80024b0 <HAL_RCC_OscConfig+0xa8>
 800248a:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b83      	ldr	r3, [pc, #524]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a82      	ldr	r2, [pc, #520]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800249c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b80      	ldr	r3, [pc, #512]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7f      	ldr	r2, [pc, #508]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e041      	b.n	8002534 <HAL_RCC_OscConfig+0x12c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0xd8>
 80024ba:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a79      	ldr	r2, [pc, #484]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a76      	ldr	r2, [pc, #472]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a73      	ldr	r2, [pc, #460]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e029      	b.n	8002534 <HAL_RCC_OscConfig+0x12c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x108>
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6d      	ldr	r2, [pc, #436]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b6b      	ldr	r3, [pc, #428]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6a      	ldr	r2, [pc, #424]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80024fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b68      	ldr	r3, [pc, #416]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a67      	ldr	r2, [pc, #412]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e011      	b.n	8002534 <HAL_RCC_OscConfig+0x12c>
 8002510:	4b64      	ldr	r3, [pc, #400]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a63      	ldr	r2, [pc, #396]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b5e      	ldr	r3, [pc, #376]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5d      	ldr	r2, [pc, #372]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800252e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fb3e 	bl	8000bbc <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fb3a 	bl	8000bbc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e355      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002556:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x13c>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fb2a 	bl	8000bbc <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fb26 	bl	8000bbc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e341      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800257e:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x164>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 808c 	beq.w	80026b4 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259c:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a6:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1ba>
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b18      	cmp	r3, #24
 80025b6:	d137      	bne.n	8002628 <HAL_RCC_OscConfig+0x220>
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d132      	bne.n	8002628 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x1d2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e313      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0219 	bic.w	r2, r3, #25
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	492f      	ldr	r1, [pc, #188]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025ec:	f7fe fae6 	bl	8000bbc <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fae2 	bl	8000bbc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e2fd      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002606:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	4920      	ldr	r1, [pc, #128]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002626:	e045      	b.n	80026b4 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d026      	beq.n	800267e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 0219 	bic.w	r2, r3, #25
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4919      	ldr	r1, [pc, #100]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fabb 	bl	8000bbc <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe fab7 	bl	8000bbc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e2d2      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	490b      	ldr	r1, [pc, #44]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
 800267c:	e01a      	b.n	80026b4 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_RCC_OscConfig+0x29c>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7fe fa97 	bl	8000bbc <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002692:	f7fe fa93 	bl	8000bbc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d903      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e2ae      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
 80026a4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a8:	4b99      	ldr	r3, [pc, #612]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ee      	bne.n	8002692 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d06a      	beq.n	8002796 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c0:	4b93      	ldr	r3, [pc, #588]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d007      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2de>
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b18      	cmp	r3, #24
 80026da:	d11b      	bne.n	8002714 <HAL_RCC_OscConfig+0x30c>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d116      	bne.n	8002714 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e6:	4b8a      	ldr	r3, [pc, #552]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x2f6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e281      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026fe:	4b84      	ldr	r3, [pc, #528]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	4980      	ldr	r1, [pc, #512]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800270e:	4313      	orrs	r3, r2
 8002710:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002712:	e040      	b.n	8002796 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d023      	beq.n	8002764 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800271c:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a7b      	ldr	r2, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fa48 	bl	8000bbc <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002730:	f7fe fa44 	bl	8000bbc <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e25f      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	496c      	ldr	r1, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]
 8002762:	e018      	b.n	8002796 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800276a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fa24 	bl	8000bbc <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002778:	f7fe fa20 	bl	8000bbc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e23b      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800278a:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d036      	beq.n	8002810 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d019      	beq.n	80027de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ae:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fa01 	bl	8000bbc <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe f9fd 	bl	8000bbc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e218      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x3b6>
 80027dc:	e018      	b.n	8002810 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027de:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe f9e7 	bl	8000bbc <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7fe f9e3 	bl	8000bbc <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1fe      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d036      	beq.n	800288a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002824:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a39      	ldr	r2, [pc, #228]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800282a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800282e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002830:	f7fe f9c4 	bl	8000bbc <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002838:	f7fe f9c0 	bl	8000bbc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e1db      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800284a:	4b31      	ldr	r3, [pc, #196]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x430>
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002858:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2c      	ldr	r2, [pc, #176]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 800285e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002862:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002864:	f7fe f9aa 	bl	8000bbc <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800286c:	f7fe f9a6 	bl	8000bbc <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1c1      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80af 	beq.w	80029f6 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_RCC_OscConfig+0x50c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_RCC_OscConfig+0x50c>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a4:	f7fe f98a 	bl	8000bbc <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fe f986 	bl	8000bbc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1a1      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCC_OscConfig+0x50c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4d8>
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	e05b      	b.n	8002998 <HAL_RCC_OscConfig+0x590>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d117      	bne.n	8002918 <HAL_RCC_OscConfig+0x510>
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a05      	ldr	r2, [pc, #20]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 80028fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a02      	ldr	r2, [pc, #8]	; (8002910 <HAL_RCC_OscConfig+0x508>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
 800290c:	e044      	b.n	8002998 <HAL_RCC_OscConfig+0x590>
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
 8002914:	58024800 	.word	0x58024800
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d112      	bne.n	8002946 <HAL_RCC_OscConfig+0x53e>
 8002920:	4b95      	ldr	r3, [pc, #596]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a94      	ldr	r2, [pc, #592]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
 800292c:	4b92      	ldr	r3, [pc, #584]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a91      	ldr	r2, [pc, #580]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
 8002938:	4b8f      	ldr	r3, [pc, #572]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a8e      	ldr	r2, [pc, #568]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	e028      	b.n	8002998 <HAL_RCC_OscConfig+0x590>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b85      	cmp	r3, #133	; 0x85
 800294c:	d112      	bne.n	8002974 <HAL_RCC_OscConfig+0x56c>
 800294e:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a89      	ldr	r2, [pc, #548]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	4b87      	ldr	r3, [pc, #540]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a86      	ldr	r2, [pc, #536]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
 8002966:	4b84      	ldr	r3, [pc, #528]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a83      	ldr	r2, [pc, #524]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	e011      	b.n	8002998 <HAL_RCC_OscConfig+0x590>
 8002974:	4b80      	ldr	r3, [pc, #512]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a7f      	ldr	r2, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	4b7d      	ldr	r3, [pc, #500]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a7c      	ldr	r2, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a79      	ldr	r2, [pc, #484]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe f90c 	bl	8000bbc <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe f908 	bl	8000bbc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e121      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029be:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ee      	beq.n	80029a8 <HAL_RCC_OscConfig+0x5a0>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe f8f6 	bl	8000bbc <HAL_GetTick>
 80029d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe f8f2 	bl	8000bbc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e10b      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ee      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8100 	beq.w	8002c00 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a00:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a08:	2b18      	cmp	r3, #24
 8002a0a:	f000 80bb 	beq.w	8002b84 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	f040 8095 	bne.w	8002b42 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a18:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a56      	ldr	r2, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe f8ca 	bl	8000bbc <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe f8c6 	bl	8000bbc <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0e1      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a3e:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x774>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4946      	ldr	r1, [pc, #280]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	628b      	str	r3, [r1, #40]	; 0x28
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a72:	3b01      	subs	r3, #1
 8002a74:	025b      	lsls	r3, r3, #9
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	061b      	lsls	r3, r3, #24
 8002a90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a94:	4938      	ldr	r1, [pc, #224]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aaa:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <HAL_RCC_OscConfig+0x778>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ab2:	00d2      	lsls	r2, r2, #3
 8002ab4:	4930      	ldr	r1, [pc, #192]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	f023 020c 	bic.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	492c      	ldr	r1, [pc, #176]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	f023 0202 	bic.w	r2, r3, #2
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	4927      	ldr	r1, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f84f 	bl	8000bbc <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe f84b 	bl	8000bbc <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e066      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x71a>
 8002b40:	e05e      	b.n	8002c00 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe f835 	bl	8000bbc <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe f831 	bl	8000bbc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e04c      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_OscConfig+0x770>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x74e>
 8002b74:	e044      	b.n	8002c00 <HAL_RCC_OscConfig+0x7f8>
 8002b76:	bf00      	nop
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	fffffc0c 	.word	0xfffffc0c
 8002b80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b84:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_RCC_OscConfig+0x804>)
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_OscConfig+0x804>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d031      	beq.n	8002bfc <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d12a      	bne.n	8002bfc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d122      	bne.n	8002bfc <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d11a      	bne.n	8002bfc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0a5b      	lsrs	r3, r3, #9
 8002bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d111      	bne.n	8002bfc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d108      	bne.n	8002bfc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0e1b      	lsrs	r3, r3, #24
 8002bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3730      	adds	r7, #48	; 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	58024400 	.word	0x58024400

08002c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e19c      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b8a      	ldr	r3, [pc, #552]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d910      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 020f 	bic.w	r2, r3, #15
 8002c3a:	4985      	ldr	r1, [pc, #532]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b83      	ldr	r3, [pc, #524]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e184      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d908      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c70:	4b78      	ldr	r3, [pc, #480]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	4975      	ldr	r1, [pc, #468]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d010      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	4b70      	ldr	r3, [pc, #448]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d908      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	496a      	ldr	r1, [pc, #424]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	4b64      	ldr	r3, [pc, #400]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d908      	bls.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ccc:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	495e      	ldr	r1, [pc, #376]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d908      	bls.n	8002d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cfa:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4953      	ldr	r1, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d908      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f023 020f 	bic.w	r2, r3, #15
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4947      	ldr	r1, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d055      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d46:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4940      	ldr	r1, [pc, #256]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d60:	4b3c      	ldr	r3, [pc, #240]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d121      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0f6      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d115      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0ea      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d90:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0de      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da0:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0d6      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f023 0207 	bic.w	r2, r3, #7
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4925      	ldr	r1, [pc, #148]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fd fefb 	bl	8000bbc <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dca:	f7fd fef7 	bl	8000bbc <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0be      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d1eb      	bne.n	8002dca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d208      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f023 020f 	bic.w	r2, r3, #15
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d214      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 020f 	bic.w	r2, r3, #15
 8002e36:	4906      	ldr	r1, [pc, #24]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e086      	b.n	8002f5e <HAL_RCC_ClockConfig+0x34e>
 8002e50:	52002000 	.word	0x52002000
 8002e54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d208      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e74:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4939      	ldr	r1, [pc, #228]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d208      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	492e      	ldr	r1, [pc, #184]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d208      	bcs.n	8002ee2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4922      	ldr	r1, [pc, #136]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d208      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4917      	ldr	r1, [pc, #92]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f10:	f000 f834 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	4912      	ldr	r1, [pc, #72]	; (8002f6c <HAL_RCC_ClockConfig+0x35c>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_RCC_ClockConfig+0x358>)
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <HAL_RCC_ClockConfig+0x35c>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <HAL_RCC_ClockConfig+0x360>)
 8002f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_RCC_ClockConfig+0x364>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x368>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fcaa 	bl	80008ac <HAL_InitTick>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	08005dd8 	.word	0x08005dd8
 8002f70:	24000004 	.word	0x24000004
 8002f74:	24000000 	.word	0x24000000
 8002f78:	24000008 	.word	0x24000008

08002f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f82:	4bb3      	ldr	r3, [pc, #716]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8a:	2b18      	cmp	r3, #24
 8002f8c:	f200 8155 	bhi.w	800323a <HAL_RCC_GetSysClockFreq+0x2be>
 8002f90:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002ffd 	.word	0x08002ffd
 8002f9c:	0800323b 	.word	0x0800323b
 8002fa0:	0800323b 	.word	0x0800323b
 8002fa4:	0800323b 	.word	0x0800323b
 8002fa8:	0800323b 	.word	0x0800323b
 8002fac:	0800323b 	.word	0x0800323b
 8002fb0:	0800323b 	.word	0x0800323b
 8002fb4:	0800323b 	.word	0x0800323b
 8002fb8:	08003023 	.word	0x08003023
 8002fbc:	0800323b 	.word	0x0800323b
 8002fc0:	0800323b 	.word	0x0800323b
 8002fc4:	0800323b 	.word	0x0800323b
 8002fc8:	0800323b 	.word	0x0800323b
 8002fcc:	0800323b 	.word	0x0800323b
 8002fd0:	0800323b 	.word	0x0800323b
 8002fd4:	0800323b 	.word	0x0800323b
 8002fd8:	08003029 	.word	0x08003029
 8002fdc:	0800323b 	.word	0x0800323b
 8002fe0:	0800323b 	.word	0x0800323b
 8002fe4:	0800323b 	.word	0x0800323b
 8002fe8:	0800323b 	.word	0x0800323b
 8002fec:	0800323b 	.word	0x0800323b
 8002ff0:	0800323b 	.word	0x0800323b
 8002ff4:	0800323b 	.word	0x0800323b
 8002ff8:	0800302f 	.word	0x0800302f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ffc:	4b94      	ldr	r3, [pc, #592]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003008:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	4a90      	ldr	r2, [pc, #576]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
 8003018:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800301a:	e111      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800301c:	4b8d      	ldr	r3, [pc, #564]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800301e:	61bb      	str	r3, [r7, #24]
    break;
 8003020:	e10e      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003022:	4b8d      	ldr	r3, [pc, #564]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003024:	61bb      	str	r3, [r7, #24]
    break;
 8003026:	e10b      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003028:	4b8c      	ldr	r3, [pc, #560]	; (800325c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800302a:	61bb      	str	r3, [r7, #24]
    break;
 800302c:	e108      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003038:	4b85      	ldr	r3, [pc, #532]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003042:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003044:	4b82      	ldr	r3, [pc, #520]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800304e:	4b80      	ldr	r3, [pc, #512]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	08db      	lsrs	r3, r3, #3
 8003054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003066:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80e1 	beq.w	8003234 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b02      	cmp	r3, #2
 8003076:	f000 8083 	beq.w	8003180 <HAL_RCC_GetSysClockFreq+0x204>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b02      	cmp	r3, #2
 800307e:	f200 80a1 	bhi.w	80031c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x114>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d056      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x1c0>
 800308e:	e099      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d02d      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800309c:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	4a6b      	ldr	r2, [pc, #428]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80030f6:	e087      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003102:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003264 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310a:	4b51      	ldr	r3, [pc, #324]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311a:	ed97 6a02 	vldr	s12, [r7, #8]
 800311e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800312e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800313a:	e065      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2ec>
 800314a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314e:	4b40      	ldr	r3, [pc, #256]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003162:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800316e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800317e:	e043      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800326c <HAL_RCC_GetSysClockFreq+0x2f0>
 800318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031c2:	e021      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003206:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	0a5b      	lsrs	r3, r3, #9
 800320e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003212:	3301      	adds	r3, #1
 8003214:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003220:	edd7 6a07 	vldr	s13, [r7, #28]
 8003224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800322c:	ee17 3a90 	vmov	r3, s15
 8003230:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003232:	e005      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
    break;
 8003238:	e002      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800323c:	61bb      	str	r3, [r7, #24]
    break;
 800323e:	bf00      	nop
  }

  return sysclockfreq;
 8003240:	69bb      	ldr	r3, [r7, #24]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	58024400 	.word	0x58024400
 8003254:	03d09000 	.word	0x03d09000
 8003258:	003d0900 	.word	0x003d0900
 800325c:	016e3600 	.word	0x016e3600
 8003260:	46000000 	.word	0x46000000
 8003264:	4c742400 	.word	0x4c742400
 8003268:	4a742400 	.word	0x4a742400
 800326c:	4bb71b00 	.word	0x4bb71b00

08003270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003276:	f7ff fe81 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490f      	ldr	r1, [pc, #60]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80032ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	58024400 	.word	0x58024400
 80032c4:	08005dd8 	.word	0x08005dd8
 80032c8:	24000004 	.word	0x24000004
 80032cc:	24000000 	.word	0x24000000

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80032d4:	f7ff ffcc 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4904      	ldr	r1, [pc, #16]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	58024400 	.word	0x58024400
 80032f8:	08005dd8 	.word	0x08005dd8

080032fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223f      	movs	r2, #63	; 0x3f
 800330a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <HAL_RCC_GetClockConfig+0x7c>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 0207 	and.w	r2, r3, #7
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_RCC_GetClockConfig+0x7c>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_RCC_GetClockConfig+0x7c>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_RCC_GetClockConfig+0x7c>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_RCC_GetClockConfig+0x7c>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_GetClockConfig+0x7c>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <HAL_RCC_GetClockConfig+0x7c>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_GetClockConfig+0x80>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	601a      	str	r2, [r3, #0]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	58024400 	.word	0x58024400
 800337c:	52002000 	.word	0x52002000

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338c:	2300      	movs	r3, #0
 800338e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d03f      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033a4:	d02a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033aa:	d824      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b0:	d018      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b6:	d81e      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c0:	d007      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033c2:	e018      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c4:	4ba6      	ldr	r3, [pc, #664]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	4aa5      	ldr	r2, [pc, #660]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033d0:	e015      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2102      	movs	r1, #2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fedd 	bl	8004198 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033e2:	e00c      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3324      	adds	r3, #36	; 0x24
 80033e8:	2102      	movs	r1, #2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 ff86 	bl	80042fc <RCCEx_PLL3_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
      break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003404:	4b96      	ldr	r3, [pc, #600]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003410:	4993      	ldr	r1, [pc, #588]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	650b      	str	r3, [r1, #80]	; 0x50
 8003416:	e001      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d03d      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	2b04      	cmp	r3, #4
 800342e:	d826      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003430:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	0800344d 	.word	0x0800344d
 800343c:	0800345b 	.word	0x0800345b
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003485 	.word	0x08003485
 8003448:	08003485 	.word	0x08003485
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4b84      	ldr	r3, [pc, #528]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4a83      	ldr	r2, [pc, #524]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003458:	e015      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fe99 	bl	8004198 <RCCEx_PLL2_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f000 ff42 	bl	80042fc <RCCEx_PLL3_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800348c:	4b74      	ldr	r3, [pc, #464]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	f023 0207 	bic.w	r2, r3, #7
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	4971      	ldr	r1, [pc, #452]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800349a:	4313      	orrs	r3, r2
 800349c:	650b      	str	r3, [r1, #80]	; 0x50
 800349e:	e001      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d04a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80034b8:	d031      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80034ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80034be:	d82b      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c4:	d02d      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d825      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034cc:	2bc0      	cmp	r3, #192	; 0xc0
 80034ce:	d02a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034d0:	2bc0      	cmp	r3, #192	; 0xc0
 80034d2:	d821      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d016      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d81d      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d007      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80034e4:	e018      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4a5d      	ldr	r2, [pc, #372]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80034f2:	e019      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fe4c 	bl	8004198 <RCCEx_PLL2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003504:	e010      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3324      	adds	r3, #36	; 0x24
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fef5 	bl	80042fc <RCCEx_PLL3_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003516:	e007      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	e004      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800352e:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	4949      	ldr	r1, [pc, #292]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	650b      	str	r3, [r1, #80]	; 0x50
 8003540:	e001      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04f      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800355a:	d036      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800355c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003560:	d830      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003566:	d032      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356c:	d82a      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800356e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003572:	d02e      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003574:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003578:	d824      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d018      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003584:	d81e      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800358a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358e:	d007      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003590:	e018      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003592:	4b33      	ldr	r3, [pc, #204]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	4a32      	ldr	r2, [pc, #200]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800359e:	e019      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fdf6 	bl	8004198 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80035b0:	e010      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3324      	adds	r3, #36	; 0x24
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fe9f 	bl	80042fc <RCCEx_PLL3_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80035c2:	e007      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
      break;
 80035c8:	e004      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80035d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	491e      	ldr	r1, [pc, #120]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	650b      	str	r3, [r1, #80]	; 0x50
 80035ec:	e001      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d034      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003602:	2b30      	cmp	r3, #48	; 0x30
 8003604:	d01c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003606:	2b30      	cmp	r3, #48	; 0x30
 8003608:	d817      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800360a:	2b20      	cmp	r3, #32
 800360c:	d00c      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800360e:	2b20      	cmp	r3, #32
 8003610:	d813      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003616:	2b10      	cmp	r3, #16
 8003618:	d10f      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a10      	ldr	r2, [pc, #64]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003626:	e00e      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fdb2 	bl	8004198 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003638:	e005      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
      break;
 800363e:	e002      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800364e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	4901      	ldr	r1, [pc, #4]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800365e:	e003      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d047      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367c:	d030      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800367e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003682:	d82a      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003684:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003688:	d02c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800368a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800368e:	d824      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003694:	d018      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	d81e      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a4:	d007      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80036a6:	e018      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4bb0      	ldr	r3, [pc, #704]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	4aaf      	ldr	r2, [pc, #700]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036b4:	e017      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd6b 	bl	8004198 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036c6:	e00e      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3324      	adds	r3, #36	; 0x24
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fe14 	bl	80042fc <RCCEx_PLL3_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036d8:	e005      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036ec:	4b9f      	ldr	r3, [pc, #636]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f8:	499c      	ldr	r1, [pc, #624]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	650b      	str	r3, [r1, #80]	; 0x50
 80036fe:	e001      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d049      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d02e      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800371a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371e:	d828      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003720:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003724:	d02a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800372a:	d822      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800372c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003730:	d026      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003732:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003736:	d81c      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800373c:	d010      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800373e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003742:	d816      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01d      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d111      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fd1f 	bl	8004198 <RCCEx_PLL2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800375e:	e012      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3324      	adds	r3, #36	; 0x24
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fdc8 	bl	80042fc <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003770:	e009      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
      break;
 8003776:	e006      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003778:	bf00      	nop
 800377a:	e004      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800377c:	bf00      	nop
 800377e:	e002      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800378c:	4b77      	ldr	r3, [pc, #476]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003798:	4974      	ldr	r1, [pc, #464]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800379a:	4313      	orrs	r3, r2
 800379c:	650b      	str	r3, [r1, #80]	; 0x50
 800379e:	e001      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d053      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037b6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80037ba:	d034      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80037c0:	d82e      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c6:	d030      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80037c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037cc:	d828      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d02c      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d822      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037de:	d028      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80037e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037e4:	d81c      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ea:	d010      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80037ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f0:	d816      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01f      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80037f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037fa:	d111      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fcc8 	bl	8004198 <RCCEx_PLL2_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800380c:	e014      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3324      	adds	r3, #36	; 0x24
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fd71 	bl	80042fc <RCCEx_PLL3_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800381e:	e00b      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	75fb      	strb	r3, [r7, #23]
      break;
 8003824:	e008      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003826:	bf00      	nop
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800382a:	bf00      	nop
 800382c:	e004      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800382e:	bf00      	nop
 8003830:	e002      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003832:	bf00      	nop
 8003834:	e000      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800383e:	4b4b      	ldr	r3, [pc, #300]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800384c:	4947      	ldr	r1, [pc, #284]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800384e:	4313      	orrs	r3, r2
 8003850:	658b      	str	r3, [r1, #88]	; 0x58
 8003852:	e001      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02f      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800386c:	d00e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800386e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003872:	d814      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d015      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387c:	d10f      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	4a3a      	ldr	r2, [pc, #232]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800388a:	e00c      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	2101      	movs	r1, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fc80 	bl	8004198 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
      break;
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80038a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038ac:	4b2f      	ldr	r3, [pc, #188]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b8:	492c      	ldr	r1, [pc, #176]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	650b      	str	r3, [r1, #80]	; 0x50
 80038be:	e001      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d032      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d81b      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003917 	.word	0x08003917
 80038e4:	080038f1 	.word	0x080038f1
 80038e8:	080038ff 	.word	0x080038ff
 80038ec:	08003917 	.word	0x08003917
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038fc:	e00c      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2102      	movs	r1, #2
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fc47 	bl	8004198 <RCCEx_PLL2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800390e:	e003      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
      break;
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4910      	ldr	r1, [pc, #64]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800392c:	4313      	orrs	r3, r2
 800392e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003930:	e001      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 808a 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800394a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003950:	f7fd f934 	bl	8000bbc <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003956:	e00d      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003958:	f7fd f930 	bl	8000bbc <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d906      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	75fb      	strb	r3, [r7, #23]
        break;
 800396a:	e009      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800396c:	58024400 	.word	0x58024400
 8003970:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003974:	4bba      	ldr	r3, [pc, #744]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0eb      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d166      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003986:	4bb7      	ldr	r3, [pc, #732]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003990:	4053      	eors	r3, r2
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800399a:	4bb2      	ldr	r3, [pc, #712]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039a4:	4baf      	ldr	r3, [pc, #700]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4aae      	ldr	r2, [pc, #696]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039b0:	4bac      	ldr	r3, [pc, #688]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4aab      	ldr	r2, [pc, #684]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039bc:	4aa9      	ldr	r2, [pc, #676]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039cc:	d115      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fd f8f5 	bl	8000bbc <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039d4:	e00b      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fd f8f1 	bl	8000bbc <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d902      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	75fb      	strb	r3, [r7, #23]
            break;
 80039ec:	e005      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ee:	4b9d      	ldr	r3, [pc, #628]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ed      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d126      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003a10:	4b94      	ldr	r3, [pc, #592]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a1e:	0919      	lsrs	r1, r3, #4
 8003a20:	4b91      	ldr	r3, [pc, #580]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003a22:	400b      	ands	r3, r1
 8003a24:	498f      	ldr	r1, [pc, #572]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	610b      	str	r3, [r1, #16]
 8003a2a:	e005      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003a2c:	4b8d      	ldr	r3, [pc, #564]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	4a8c      	ldr	r2, [pc, #560]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a36:	6113      	str	r3, [r2, #16]
 8003a38:	4b8a      	ldr	r3, [pc, #552]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a46:	4987      	ldr	r1, [pc, #540]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	670b      	str	r3, [r1, #112]	; 0x70
 8003a4c:	e004      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	75bb      	strb	r3, [r7, #22]
 8003a52:	e001      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d07f      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6a:	2b28      	cmp	r3, #40	; 0x28
 8003a6c:	d866      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003b43 	.word	0x08003b43
 8003a78:	08003b3d 	.word	0x08003b3d
 8003a7c:	08003b3d 	.word	0x08003b3d
 8003a80:	08003b3d 	.word	0x08003b3d
 8003a84:	08003b3d 	.word	0x08003b3d
 8003a88:	08003b3d 	.word	0x08003b3d
 8003a8c:	08003b3d 	.word	0x08003b3d
 8003a90:	08003b3d 	.word	0x08003b3d
 8003a94:	08003b19 	.word	0x08003b19
 8003a98:	08003b3d 	.word	0x08003b3d
 8003a9c:	08003b3d 	.word	0x08003b3d
 8003aa0:	08003b3d 	.word	0x08003b3d
 8003aa4:	08003b3d 	.word	0x08003b3d
 8003aa8:	08003b3d 	.word	0x08003b3d
 8003aac:	08003b3d 	.word	0x08003b3d
 8003ab0:	08003b3d 	.word	0x08003b3d
 8003ab4:	08003b2b 	.word	0x08003b2b
 8003ab8:	08003b3d 	.word	0x08003b3d
 8003abc:	08003b3d 	.word	0x08003b3d
 8003ac0:	08003b3d 	.word	0x08003b3d
 8003ac4:	08003b3d 	.word	0x08003b3d
 8003ac8:	08003b3d 	.word	0x08003b3d
 8003acc:	08003b3d 	.word	0x08003b3d
 8003ad0:	08003b3d 	.word	0x08003b3d
 8003ad4:	08003b43 	.word	0x08003b43
 8003ad8:	08003b3d 	.word	0x08003b3d
 8003adc:	08003b3d 	.word	0x08003b3d
 8003ae0:	08003b3d 	.word	0x08003b3d
 8003ae4:	08003b3d 	.word	0x08003b3d
 8003ae8:	08003b3d 	.word	0x08003b3d
 8003aec:	08003b3d 	.word	0x08003b3d
 8003af0:	08003b3d 	.word	0x08003b3d
 8003af4:	08003b43 	.word	0x08003b43
 8003af8:	08003b3d 	.word	0x08003b3d
 8003afc:	08003b3d 	.word	0x08003b3d
 8003b00:	08003b3d 	.word	0x08003b3d
 8003b04:	08003b3d 	.word	0x08003b3d
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003b3d 	.word	0x08003b3d
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b43 	.word	0x08003b43
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fb3a 	bl	8004198 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b28:	e00c      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3324      	adds	r3, #36	; 0x24
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fbe3 	bl	80042fc <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b4a:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b58:	4942      	ldr	r1, [pc, #264]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	654b      	str	r3, [r1, #84]	; 0x54
 8003b5e:	e001      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d038      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d821      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003bc3 	.word	0x08003bc3
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003bab 	.word	0x08003bab
 8003b8c:	08003bc3 	.word	0x08003bc3
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bc3 	.word	0x08003bc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fafa 	bl	8004198 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e00c      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fba3 	bl	80042fc <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd6:	4923      	ldr	r1, [pc, #140]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	654b      	str	r3, [r1, #84]	; 0x54
 8003bdc:	e001      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d040      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d821      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c43 	.word	0x08003c43
 8003c04:	08003c19 	.word	0x08003c19
 8003c08:	08003c2b 	.word	0x08003c2b
 8003c0c:	08003c43 	.word	0x08003c43
 8003c10:	08003c43 	.word	0x08003c43
 8003c14:	08003c43 	.word	0x08003c43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 faba 	bl	8004198 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3324      	adds	r3, #36	; 0x24
 8003c2e:	2101      	movs	r1, #1
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fb63 	bl	80042fc <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d110      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c58:	4902      	ldr	r1, [pc, #8]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c5e:	e007      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003c60:	58024800 	.word	0x58024800
 8003c64:	58024400 	.word	0x58024400
 8003c68:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d04b      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c86:	d02e      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8c:	d828      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d02a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d822      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c9e:	d026      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ca4:	d81c      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003caa:	d010      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb0:	d816      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cba:	d111      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa68 	bl	8004198 <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ccc:	e012      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3324      	adds	r3, #36	; 0x24
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fb11 	bl	80042fc <RCCEx_PLL3_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cde:	e009      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce4:	e006      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e004      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cea:	bf00      	nop
 8003cec:	e002      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfa:	4bb3      	ldr	r3, [pc, #716]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d08:	49af      	ldr	r1, [pc, #700]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	654b      	str	r3, [r1, #84]	; 0x54
 8003d0e:	e001      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d04b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d2a:	d02e      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003d2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d30:	d828      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d02a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3c:	d822      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d42:	d026      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d48:	d81c      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4e:	d010      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d54:	d816      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01d      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d111      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fa16 	bl	8004198 <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d70:	e012      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3324      	adds	r3, #36	; 0x24
 8003d76:	2102      	movs	r1, #2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fabf 	bl	80042fc <RCCEx_PLL3_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d82:	e009      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
      break;
 8003d88:	e006      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e004      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d9e:	4b8a      	ldr	r3, [pc, #552]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dac:	4986      	ldr	r1, [pc, #536]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	658b      	str	r3, [r1, #88]	; 0x58
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dce:	d02e      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003dd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dd4:	d828      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d02a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d822      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003de2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003de6:	d026      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003de8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dec:	d81c      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df2:	d010      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df8:	d816      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01d      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e02:	d111      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f9c4 	bl	8004198 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e14:	e012      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3324      	adds	r3, #36	; 0x24
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fa6d 	bl	80042fc <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e26:	e009      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	e006      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e004      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e42:	4b61      	ldr	r3, [pc, #388]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e50:	495d      	ldr	r1, [pc, #372]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	658b      	str	r3, [r1, #88]	; 0x58
 8003e56:	e001      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d10a      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3324      	adds	r3, #36	; 0x24
 8003e78:	2102      	movs	r1, #2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fa3e 	bl	80042fc <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e8a:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	494b      	ldr	r1, [pc, #300]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb4:	d10a      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3324      	adds	r3, #36	; 0x24
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fa1d 	bl	80042fc <RCCEx_PLL3_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ecc:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eda:	493b      	ldr	r1, [pc, #236]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d034      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ef6:	d01d      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003efc:	d817      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f06:	d009      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f08:	e011      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f941 	bl	8004198 <RCCEx_PLL2_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f1a:	e00c      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3324      	adds	r3, #36	; 0x24
 8003f20:	2102      	movs	r1, #2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f9ea 	bl	80042fc <RCCEx_PLL3_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
      break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f4a:	491f      	ldr	r1, [pc, #124]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f50:	e001      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d036      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f6c:	d01c      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003f6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f72:	d816      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f78:	d003      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f7e:	d007      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003f80:	e00f      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	4a10      	ldr	r2, [pc, #64]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f8e:	e00c      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3324      	adds	r3, #36	; 0x24
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f9b0 	bl	80042fc <RCCEx_PLL3_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa6:	e000      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbe:	4902      	ldr	r1, [pc, #8]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	654b      	str	r3, [r1, #84]	; 0x54
 8003fc4:	e004      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003fc6:	bf00      	nop
 8003fc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d029      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d007      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003fea:	e00f      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fec:	4b69      	ldr	r3, [pc, #420]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a68      	ldr	r2, [pc, #416]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ff8:	e00b      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f8c9 	bl	8004198 <RCCEx_PLL2_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
      break;
 8004010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004018:	4b5e      	ldr	r3, [pc, #376]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	495b      	ldr	r1, [pc, #364]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004026:	4313      	orrs	r3, r2
 8004028:	64cb      	str	r3, [r1, #76]	; 0x4c
 800402a:	e001      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3324      	adds	r3, #36	; 0x24
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f95a 	bl	80042fc <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d032      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004068:	d017      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800406a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406e:	d811      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004074:	d013      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407a:	d80b      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004084:	d106      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004086:	4b43      	ldr	r3, [pc, #268]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	4a42      	ldr	r2, [pc, #264]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800408c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004090:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004092:	e007      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e004      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80040a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040aa:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b8:	4936      	ldr	r1, [pc, #216]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	654b      	str	r3, [r1, #84]	; 0x54
 80040be:	e001      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040d0:	4b30      	ldr	r3, [pc, #192]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	492d      	ldr	r1, [pc, #180]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fa:	4926      	ldr	r1, [pc, #152]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	491e      	ldr	r1, [pc, #120]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800411a:	4313      	orrs	r3, r2
 800411c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	4a19      	ldr	r2, [pc, #100]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004130:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004134:	6113      	str	r3, [r2, #16]
 8004136:	4b17      	ldr	r3, [pc, #92]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004140:	4914      	ldr	r1, [pc, #80]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004142:	4313      	orrs	r3, r2
 8004144:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da08      	bge.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	490e      	ldr	r1, [pc, #56]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800415c:	4313      	orrs	r3, r2
 800415e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4906      	ldr	r1, [pc, #24]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800417c:	4313      	orrs	r3, r2
 800417e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004180:	7dbb      	ldrb	r3, [r7, #22]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	58024400 	.word	0x58024400

08004198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041a6:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d101      	bne.n	80041b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e099      	b.n	80042ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041b6:	4b4f      	ldr	r3, [pc, #316]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a4e      	ldr	r2, [pc, #312]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c2:	f7fc fcfb 	bl	8000bbc <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041c8:	e008      	b.n	80041dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041ca:	f7fc fcf7 	bl	8000bbc <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e086      	b.n	80042ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041dc:	4b45      	ldr	r3, [pc, #276]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041e8:	4b42      	ldr	r3, [pc, #264]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	031b      	lsls	r3, r3, #12
 80041f6:	493f      	ldr	r1, [pc, #252]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	628b      	str	r3, [r1, #40]	; 0x28
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	3b01      	subs	r3, #1
 8004202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	025b      	lsls	r3, r3, #9
 800420e:	b29b      	uxth	r3, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	3b01      	subs	r3, #1
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800422c:	4931      	ldr	r1, [pc, #196]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	492d      	ldr	r1, [pc, #180]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004240:	4313      	orrs	r3, r2
 8004242:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004244:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	f023 0220 	bic.w	r2, r3, #32
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	4928      	ldr	r1, [pc, #160]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004256:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800425c:	f023 0310 	bic.w	r3, r3, #16
 8004260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <RCCEx_PLL2_Config+0x160>)
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	69d2      	ldr	r2, [r2, #28]
 800426e:	00d2      	lsls	r2, r2, #3
 8004270:	4920      	ldr	r1, [pc, #128]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004276:	4b1f      	ldr	r3, [pc, #124]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800427c:	f043 0310 	orr.w	r3, r3, #16
 8004280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800428e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004292:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004294:	e00f      	b.n	80042b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800429c:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042a8:	e005      	b.n	80042b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c2:	f7fc fc7b 	bl	8000bbc <HAL_GetTick>
 80042c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042c8:	e008      	b.n	80042dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042ca:	f7fc fc77 	bl	8000bbc <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e006      	b.n	80042ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <RCCEx_PLL2_Config+0x15c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	ffff0007 	.word	0xffff0007

080042fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800430a:	4b53      	ldr	r3, [pc, #332]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b03      	cmp	r3, #3
 8004314:	d101      	bne.n	800431a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e099      	b.n	800444e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800431a:	4b4f      	ldr	r3, [pc, #316]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a4e      	ldr	r2, [pc, #312]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004326:	f7fc fc49 	bl	8000bbc <HAL_GetTick>
 800432a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800432c:	e008      	b.n	8004340 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800432e:	f7fc fc45 	bl	8000bbc <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e086      	b.n	800444e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004340:	4b45      	ldr	r3, [pc, #276]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800434c:	4b42      	ldr	r3, [pc, #264]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	051b      	lsls	r3, r3, #20
 800435a:	493f      	ldr	r1, [pc, #252]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	628b      	str	r3, [r1, #40]	; 0x28
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	3b01      	subs	r3, #1
 8004366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	3b01      	subs	r3, #1
 8004370:	025b      	lsls	r3, r3, #9
 8004372:	b29b      	uxth	r3, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	3b01      	subs	r3, #1
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004390:	4931      	ldr	r1, [pc, #196]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004396:	4b30      	ldr	r3, [pc, #192]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	492d      	ldr	r1, [pc, #180]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4928      	ldr	r1, [pc, #160]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043ba:	4b27      	ldr	r3, [pc, #156]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	4a26      	ldr	r2, [pc, #152]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <RCCEx_PLL3_Config+0x160>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	69d2      	ldr	r2, [r2, #28]
 80043d2:	00d2      	lsls	r2, r2, #3
 80043d4:	4920      	ldr	r1, [pc, #128]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043da:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 80043f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043f8:	e00f      	b.n	800441a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d106      	bne.n	800440e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004400:	4b15      	ldr	r3, [pc, #84]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004406:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800440a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800440c:	e005      	b.n	800441a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	4a11      	ldr	r2, [pc, #68]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004418:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fc fbc9 	bl	8000bbc <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800442c:	e008      	b.n	8004440 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800442e:	f7fc fbc5 	bl	8000bbc <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <RCCEx_PLL3_Config+0x15c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	ffff0007 	.word	0xffff0007

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e049      	b.n	8004506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f841 	bl	800450e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fa00 	bl	80048a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e054      	b.n	80045e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d01d      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_TIM_Base_Start_IT+0xdc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <HAL_TIM_Base_Start_IT+0xe0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <HAL_TIM_Base_Start_IT+0xe4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_TIM_Base_Start_IT+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d115      	bne.n	80045d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_TIM_Base_Start_IT+0xec>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d015      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d011      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ce:	e008      	b.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40010400 	.word	0x40010400
 8004608:	40001800 	.word	0x40001800
 800460c:	40014000 	.word	0x40014000
 8004610:	00010007 	.word	0x00010007

08004614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d122      	bne.n	8004670 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b02      	cmp	r3, #2
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0202 	mvn.w	r2, #2
 8004640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f905 	bl	8004866 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8f7 	bl	8004852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f908 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b04      	cmp	r3, #4
 800467c:	d122      	bne.n	80046c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d11b      	bne.n	80046c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0204 	mvn.w	r2, #4
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f8db 	bl	8004866 <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8cd 	bl	8004852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f8de 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d122      	bne.n	8004718 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d11b      	bne.n	8004718 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0208 	mvn.w	r2, #8
 80046e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8b1 	bl	8004866 <HAL_TIM_IC_CaptureCallback>
 8004704:	e005      	b.n	8004712 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8a3 	bl	8004852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8b4 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b10      	cmp	r3, #16
 8004724:	d122      	bne.n	800476c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b10      	cmp	r3, #16
 8004732:	d11b      	bne.n	800476c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0210 	mvn.w	r2, #16
 800473c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2208      	movs	r2, #8
 8004742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f887 	bl	8004866 <HAL_TIM_IC_CaptureCallback>
 8004758:	e005      	b.n	8004766 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f879 	bl	8004852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f88a 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d10e      	bne.n	8004798 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d107      	bne.n	8004798 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0201 	mvn.w	r2, #1
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc f854 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d10e      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	d107      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f914 	bl	80049ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d2:	d10e      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f907 	bl	8004a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d10e      	bne.n	800481e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d107      	bne.n	800481e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f838 	bl	800488e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b20      	cmp	r3, #32
 800482a:	d10e      	bne.n	800484a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b20      	cmp	r3, #32
 8004838:	d107      	bne.n	800484a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f06f 0220 	mvn.w	r2, #32
 8004842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f8c7 	bl	80049d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <TIM_Base_SetConfig+0x114>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d00f      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3d      	ldr	r2, [pc, #244]	; (80049bc <TIM_Base_SetConfig+0x118>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00b      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3c      	ldr	r2, [pc, #240]	; (80049c0 <TIM_Base_SetConfig+0x11c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d007      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3b      	ldr	r2, [pc, #236]	; (80049c4 <TIM_Base_SetConfig+0x120>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3a      	ldr	r2, [pc, #232]	; (80049c8 <TIM_Base_SetConfig+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d108      	bne.n	80048f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2f      	ldr	r2, [pc, #188]	; (80049b8 <TIM_Base_SetConfig+0x114>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <TIM_Base_SetConfig+0x118>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <TIM_Base_SetConfig+0x11c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <TIM_Base_SetConfig+0x120>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <TIM_Base_SetConfig+0x124>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a28      	ldr	r2, [pc, #160]	; (80049cc <TIM_Base_SetConfig+0x128>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a27      	ldr	r2, [pc, #156]	; (80049d0 <TIM_Base_SetConfig+0x12c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <TIM_Base_SetConfig+0x130>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a10      	ldr	r2, [pc, #64]	; (80049b8 <TIM_Base_SetConfig+0x114>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00f      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <TIM_Base_SetConfig+0x124>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a11      	ldr	r2, [pc, #68]	; (80049cc <TIM_Base_SetConfig+0x128>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <TIM_Base_SetConfig+0x12c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <TIM_Base_SetConfig+0x130>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d103      	bne.n	80049a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	615a      	str	r2, [r3, #20]
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800

080049d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <SysTick_Handler+0x1c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a1c:	f000 fda6 	bl	800556c <xTaskGetSchedulerState>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d001      	beq.n	8004a2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a26:	f000 ff17 	bl	8005858 <xPortSysTickHandler>
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010

08004a34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a3a:	f3ef 8305 	mrs	r3, IPSR
 8004a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a46:	f06f 0305 	mvn.w	r3, #5
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	e00c      	b.n	8004a68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <osKernelInitialize+0x44>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <osKernelInitialize+0x44>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	e002      	b.n	8004a68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a62:	f04f 33ff 	mov.w	r3, #4294967295
 8004a66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a68:	687b      	ldr	r3, [r7, #4]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	24000094 	.word	0x24000094

08004a7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08e      	sub	sp, #56	; 0x38
 8004a80:	af04      	add	r7, sp, #16
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a8c:	f3ef 8305 	mrs	r3, IPSR
 8004a90:	617b      	str	r3, [r7, #20]
  return(result);
 8004a92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d17e      	bne.n	8004b96 <osThreadNew+0x11a>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d07b      	beq.n	8004b96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004aa2:	2318      	movs	r3, #24
 8004aa4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d045      	beq.n	8004b42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <osThreadNew+0x48>
        name = attr->name;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <osThreadNew+0x6e>
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b38      	cmp	r3, #56	; 0x38
 8004adc:	d805      	bhi.n	8004aea <osThreadNew+0x6e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <osThreadNew+0x72>
        return (NULL);
 8004aea:	2300      	movs	r3, #0
 8004aec:	e054      	b.n	8004b98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00e      	beq.n	8004b24 <osThreadNew+0xa8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2bbb      	cmp	r3, #187	; 0xbb
 8004b0c:	d90a      	bls.n	8004b24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d006      	beq.n	8004b24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <osThreadNew+0xa8>
        mem = 1;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e010      	b.n	8004b46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10c      	bne.n	8004b46 <osThreadNew+0xca>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <osThreadNew+0xca>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <osThreadNew+0xca>
          mem = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	e001      	b.n	8004b46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d110      	bne.n	8004b6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b54:	9202      	str	r2, [sp, #8]
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f8eb 	bl	8004d3e <xTaskCreateStatic>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e013      	b.n	8004b96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d110      	bne.n	8004b96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f107 0310 	add.w	r3, r7, #16
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f936 	bl	8004df8 <xTaskCreate>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <osThreadNew+0x11a>
            hTask = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b96:	693b      	ldr	r3, [r7, #16]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3728      	adds	r7, #40	; 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba8:	f3ef 8305 	mrs	r3, IPSR
 8004bac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <osDelay+0x1c>
    stat = osErrorISR;
 8004bb4:	f06f 0305 	mvn.w	r3, #5
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e007      	b.n	8004bcc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <osDelay+0x2c>
      vTaskDelay(ticks);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa72 	bl	80050b0 <vTaskDelay>
    }
  }

  return (stat);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f103 0208 	add.w	r2, r3, #8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f103 0208 	add.w	r2, r3, #8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f103 0208 	add.w	r2, r3, #8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d103      	bne.n	8004c98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e00c      	b.n	8004cb2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e002      	b.n	8004ca6 <vListInsert+0x2e>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d2f6      	bcs.n	8004ca0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	601a      	str	r2, [r3, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6892      	ldr	r2, [r2, #8]
 8004d00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6852      	ldr	r2, [r2, #4]
 8004d0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d103      	bne.n	8004d1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	1e5a      	subs	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b08e      	sub	sp, #56	; 0x38
 8004d42:	af04      	add	r7, sp, #16
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <xTaskCreateStatic+0x46>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	61fb      	str	r3, [r7, #28]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d84:	23bc      	movs	r3, #188	; 0xbc
 8004d86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2bbc      	cmp	r3, #188	; 0xbc
 8004d8c:	d00a      	beq.n	8004da4 <xTaskCreateStatic+0x66>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	61bb      	str	r3, [r7, #24]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004da4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01e      	beq.n	8004dea <xTaskCreateStatic+0xac>
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	9302      	str	r3, [sp, #8]
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f851 	bl	8004e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de4:	f000 f8f4 	bl	8004fd0 <prvAddNewTaskToReadyList>
 8004de8:	e001      	b.n	8004dee <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dee:	697b      	ldr	r3, [r7, #20]
	}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3728      	adds	r7, #40	; 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	; 0x30
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fd45 	bl	800589c <pvPortMalloc>
 8004e12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e1a:	20bc      	movs	r0, #188	; 0xbc
 8004e1c:	f000 fd3e 	bl	800589c <pvPortMalloc>
 8004e20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e2e:	e005      	b.n	8004e3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e30:	6978      	ldr	r0, [r7, #20]
 8004e32:	f000 fdff 	bl	8005a34 <vPortFree>
 8004e36:	e001      	b.n	8004e3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d017      	beq.n	8004e72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9303      	str	r3, [sp, #12]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	9302      	str	r3, [sp, #8]
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f80f 	bl	8004e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e66:	69f8      	ldr	r0, [r7, #28]
 8004e68:	f000 f8b2 	bl	8004fd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e002      	b.n	8004e78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295
 8004e76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e78:	69bb      	ldr	r3, [r7, #24]
	}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	21a5      	movs	r1, #165	; 0xa5
 8004e9e:	f000 ff19 	bl	8005cd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004eac:	440b      	add	r3, r1
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	617b      	str	r3, [r7, #20]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01f      	beq.n	8004f22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	e012      	b.n	8004f0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	7819      	ldrb	r1, [r3, #0]
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3334      	adds	r3, #52	; 0x34
 8004ef8:	460a      	mov	r2, r1
 8004efa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2b0f      	cmp	r3, #15
 8004f12:	d9e9      	bls.n	8004ee8 <prvInitialiseNewTask+0x64>
 8004f14:	e000      	b.n	8004f18 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f20:	e003      	b.n	8004f2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	2b37      	cmp	r3, #55	; 0x37
 8004f2e:	d901      	bls.n	8004f34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f30:	2337      	movs	r3, #55	; 0x37
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	2200      	movs	r2, #0
 8004f44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fe63 	bl	8004c16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	3318      	adds	r3, #24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fe5e 	bl	8004c16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	3354      	adds	r3, #84	; 0x54
 8004f84:	2260      	movs	r2, #96	; 0x60
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fea3 	bl	8005cd4 <memset>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	4a0c      	ldr	r2, [pc, #48]	; (8004fc4 <prvInitialiseNewTask+0x140>)
 8004f92:	659a      	str	r2, [r3, #88]	; 0x58
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <prvInitialiseNewTask+0x144>)
 8004f98:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	4a0b      	ldr	r2, [pc, #44]	; (8004fcc <prvInitialiseNewTask+0x148>)
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	69b8      	ldr	r0, [r7, #24]
 8004fa6:	f000 fb53 	bl	8005650 <pxPortInitialiseStack>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fbc:	bf00      	nop
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	08005e18 	.word	0x08005e18
 8004fc8:	08005e38 	.word	0x08005e38
 8004fcc:	08005df8 	.word	0x08005df8

08004fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fd8:	f000 fbae 	bl	8005738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004fe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d110      	bne.n	800501e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ffc:	f000 fa56 	bl	80054ac <prvInitialiseTaskLists>
 8005000:	e00d      	b.n	800501e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005002:	4b26      	ldr	r3, [pc, #152]	; (800509c <prvAddNewTaskToReadyList+0xcc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800500a:	4b23      	ldr	r3, [pc, #140]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d802      	bhi.n	800501e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800501e:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3301      	adds	r3, #1
 8005024:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 8005026:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <prvAddNewTaskToReadyList+0xd4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d903      	bls.n	8005044 <prvAddNewTaskToReadyList+0x74>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <prvAddNewTaskToReadyList+0xd4>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <prvAddNewTaskToReadyList+0xd8>)
 8005052:	441a      	add	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7ff fde8 	bl	8004c30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005060:	f000 fb9a 	bl	8005798 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <prvAddNewTaskToReadyList+0xcc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	429a      	cmp	r2, r3
 8005078:	d207      	bcs.n	800508a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <prvAddNewTaskToReadyList+0xdc>)
 800507c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	24000568 	.word	0x24000568
 8005098:	24000098 	.word	0x24000098
 800509c:	24000574 	.word	0x24000574
 80050a0:	24000584 	.word	0x24000584
 80050a4:	24000570 	.word	0x24000570
 80050a8:	2400009c 	.word	0x2400009c
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d017      	beq.n	80050f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <vTaskDelay+0x60>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <vTaskDelay+0x30>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60bb      	str	r3, [r7, #8]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050e0:	f000 f81a 	bl	8005118 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050e4:	2100      	movs	r1, #0
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa5e 	bl	80055a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050ec:	f000 f822 	bl	8005134 <xTaskResumeAll>
 80050f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <vTaskDelay+0x64>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	2400058c 	.word	0x2400058c
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <vTaskSuspendAll+0x18>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a03      	ldr	r2, [pc, #12]	; (8005130 <vTaskSuspendAll+0x18>)
 8005124:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005126:	bf00      	nop
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	2400058c 	.word	0x2400058c

08005134 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005142:	4b42      	ldr	r3, [pc, #264]	; (800524c <xTaskResumeAll+0x118>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <xTaskResumeAll+0x2c>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005160:	f000 faea 	bl	8005738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005164:	4b39      	ldr	r3, [pc, #228]	; (800524c <xTaskResumeAll+0x118>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3b01      	subs	r3, #1
 800516a:	4a38      	ldr	r2, [pc, #224]	; (800524c <xTaskResumeAll+0x118>)
 800516c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <xTaskResumeAll+0x118>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d162      	bne.n	800523c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005176:	4b36      	ldr	r3, [pc, #216]	; (8005250 <xTaskResumeAll+0x11c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d05e      	beq.n	800523c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800517e:	e02f      	b.n	80051e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005180:	4b34      	ldr	r3, [pc, #208]	; (8005254 <xTaskResumeAll+0x120>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3318      	adds	r3, #24
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fdac 	bl	8004cea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3304      	adds	r3, #4
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fda7 	bl	8004cea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	4b2d      	ldr	r3, [pc, #180]	; (8005258 <xTaskResumeAll+0x124>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d903      	bls.n	80051b0 <xTaskResumeAll+0x7c>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <xTaskResumeAll+0x124>)
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4a27      	ldr	r2, [pc, #156]	; (800525c <xTaskResumeAll+0x128>)
 80051be:	441a      	add	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f7ff fd32 	bl	8004c30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4b23      	ldr	r3, [pc, #140]	; (8005260 <xTaskResumeAll+0x12c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <xTaskResumeAll+0x130>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051e0:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <xTaskResumeAll+0x120>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1cb      	bne.n	8005180 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051ee:	f000 f99d 	bl	800552c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051f2:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <xTaskResumeAll+0x134>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051fe:	f000 f837 	bl	8005270 <xTaskIncrementTick>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005208:	4b16      	ldr	r3, [pc, #88]	; (8005264 <xTaskResumeAll+0x130>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3b01      	subs	r3, #1
 8005212:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f1      	bne.n	80051fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <xTaskResumeAll+0x134>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <xTaskResumeAll+0x130>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <xTaskResumeAll+0x138>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800523c:	f000 faac 	bl	8005798 <vPortExitCritical>

	return xAlreadyYielded;
 8005240:	68bb      	ldr	r3, [r7, #8]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	2400058c 	.word	0x2400058c
 8005250:	24000568 	.word	0x24000568
 8005254:	2400052c 	.word	0x2400052c
 8005258:	24000570 	.word	0x24000570
 800525c:	2400009c 	.word	0x2400009c
 8005260:	24000098 	.word	0x24000098
 8005264:	2400057c 	.word	0x2400057c
 8005268:	24000578 	.word	0x24000578
 800526c:	e000ed04 	.word	0xe000ed04

08005270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800527a:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <xTaskIncrementTick+0x148>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 808f 	bne.w	80053a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005284:	4b4d      	ldr	r3, [pc, #308]	; (80053bc <xTaskIncrementTick+0x14c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800528c:	4a4b      	ldr	r2, [pc, #300]	; (80053bc <xTaskIncrementTick+0x14c>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d120      	bne.n	80052da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005298:	4b49      	ldr	r3, [pc, #292]	; (80053c0 <xTaskIncrementTick+0x150>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	603b      	str	r3, [r7, #0]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <xTaskIncrementTick+0x46>
 80052b8:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <xTaskIncrementTick+0x150>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <xTaskIncrementTick+0x154>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <xTaskIncrementTick+0x150>)
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	4a3f      	ldr	r2, [pc, #252]	; (80053c4 <xTaskIncrementTick+0x154>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <xTaskIncrementTick+0x158>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	4a3d      	ldr	r2, [pc, #244]	; (80053c8 <xTaskIncrementTick+0x158>)
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	f000 f929 	bl	800552c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052da:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <xTaskIncrementTick+0x15c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d349      	bcc.n	8005378 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052e4:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <xTaskIncrementTick+0x150>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ee:	4b37      	ldr	r3, [pc, #220]	; (80053cc <xTaskIncrementTick+0x15c>)
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295
 80052f4:	601a      	str	r2, [r3, #0]
					break;
 80052f6:	e03f      	b.n	8005378 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f8:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <xTaskIncrementTick+0x150>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d203      	bcs.n	8005318 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005310:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <xTaskIncrementTick+0x15c>)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005316:	e02f      	b.n	8005378 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	3304      	adds	r3, #4
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fce4 	bl	8004cea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	3318      	adds	r3, #24
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fcdb 	bl	8004cea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <xTaskIncrementTick+0x160>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <xTaskIncrementTick+0xd8>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <xTaskIncrementTick+0x160>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <xTaskIncrementTick+0x164>)
 8005356:	441a      	add	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7ff fc66 	bl	8004c30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <xTaskIncrementTick+0x168>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	429a      	cmp	r2, r3
 8005370:	d3b8      	bcc.n	80052e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005376:	e7b5      	b.n	80052e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <xTaskIncrementTick+0x168>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4915      	ldr	r1, [pc, #84]	; (80053d4 <xTaskIncrementTick+0x164>)
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d901      	bls.n	8005394 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <xTaskIncrementTick+0x16c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e004      	b.n	80053ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053a2:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <xTaskIncrementTick+0x170>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <xTaskIncrementTick+0x170>)
 80053aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053ac:	697b      	ldr	r3, [r7, #20]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	2400058c 	.word	0x2400058c
 80053bc:	2400056c 	.word	0x2400056c
 80053c0:	24000524 	.word	0x24000524
 80053c4:	24000528 	.word	0x24000528
 80053c8:	24000580 	.word	0x24000580
 80053cc:	24000588 	.word	0x24000588
 80053d0:	24000570 	.word	0x24000570
 80053d4:	2400009c 	.word	0x2400009c
 80053d8:	24000098 	.word	0x24000098
 80053dc:	2400057c 	.word	0x2400057c
 80053e0:	24000578 	.word	0x24000578

080053e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ea:	4b2a      	ldr	r3, [pc, #168]	; (8005494 <vTaskSwitchContext+0xb0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053f2:	4b29      	ldr	r3, [pc, #164]	; (8005498 <vTaskSwitchContext+0xb4>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053f8:	e046      	b.n	8005488 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80053fa:	4b27      	ldr	r3, [pc, #156]	; (8005498 <vTaskSwitchContext+0xb4>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005400:	4b26      	ldr	r3, [pc, #152]	; (800549c <vTaskSwitchContext+0xb8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e010      	b.n	800542a <vTaskSwitchContext+0x46>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <vTaskSwitchContext+0x40>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskSwitchContext+0x3e>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3b01      	subs	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	491d      	ldr	r1, [pc, #116]	; (80054a0 <vTaskSwitchContext+0xbc>)
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0e4      	beq.n	8005408 <vTaskSwitchContext+0x24>
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <vTaskSwitchContext+0xbc>)
 800544a:	4413      	add	r3, r2
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	3308      	adds	r3, #8
 8005460:	429a      	cmp	r2, r3
 8005462:	d104      	bne.n	800546e <vTaskSwitchContext+0x8a>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a0b      	ldr	r2, [pc, #44]	; (80054a4 <vTaskSwitchContext+0xc0>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4a08      	ldr	r2, [pc, #32]	; (800549c <vTaskSwitchContext+0xb8>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <vTaskSwitchContext+0xc0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3354      	adds	r3, #84	; 0x54
 8005484:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <vTaskSwitchContext+0xc4>)
 8005486:	6013      	str	r3, [r2, #0]
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	2400058c 	.word	0x2400058c
 8005498:	2400057c 	.word	0x2400057c
 800549c:	24000570 	.word	0x24000570
 80054a0:	2400009c 	.word	0x2400009c
 80054a4:	24000098 	.word	0x24000098
 80054a8:	24000014 	.word	0x24000014

080054ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054b2:	2300      	movs	r3, #0
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	e00c      	b.n	80054d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <prvInitialiseTaskLists+0x60>)
 80054c4:	4413      	add	r3, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fb85 	bl	8004bd6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3301      	adds	r3, #1
 80054d0:	607b      	str	r3, [r7, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b37      	cmp	r3, #55	; 0x37
 80054d6:	d9ef      	bls.n	80054b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054d8:	480d      	ldr	r0, [pc, #52]	; (8005510 <prvInitialiseTaskLists+0x64>)
 80054da:	f7ff fb7c 	bl	8004bd6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054de:	480d      	ldr	r0, [pc, #52]	; (8005514 <prvInitialiseTaskLists+0x68>)
 80054e0:	f7ff fb79 	bl	8004bd6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054e4:	480c      	ldr	r0, [pc, #48]	; (8005518 <prvInitialiseTaskLists+0x6c>)
 80054e6:	f7ff fb76 	bl	8004bd6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054ea:	480c      	ldr	r0, [pc, #48]	; (800551c <prvInitialiseTaskLists+0x70>)
 80054ec:	f7ff fb73 	bl	8004bd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054f0:	480b      	ldr	r0, [pc, #44]	; (8005520 <prvInitialiseTaskLists+0x74>)
 80054f2:	f7ff fb70 	bl	8004bd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <prvInitialiseTaskLists+0x78>)
 80054f8:	4a05      	ldr	r2, [pc, #20]	; (8005510 <prvInitialiseTaskLists+0x64>)
 80054fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <prvInitialiseTaskLists+0x7c>)
 80054fe:	4a05      	ldr	r2, [pc, #20]	; (8005514 <prvInitialiseTaskLists+0x68>)
 8005500:	601a      	str	r2, [r3, #0]
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	2400009c 	.word	0x2400009c
 8005510:	240004fc 	.word	0x240004fc
 8005514:	24000510 	.word	0x24000510
 8005518:	2400052c 	.word	0x2400052c
 800551c:	24000540 	.word	0x24000540
 8005520:	24000554 	.word	0x24000554
 8005524:	24000524 	.word	0x24000524
 8005528:	24000528 	.word	0x24000528

0800552c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <prvResetNextTaskUnblockTime+0x38>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvResetNextTaskUnblockTime+0x3c>)
 800553e:	f04f 32ff 	mov.w	r2, #4294967295
 8005542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005544:	e008      	b.n	8005558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <prvResetNextTaskUnblockTime+0x38>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <prvResetNextTaskUnblockTime+0x3c>)
 8005556:	6013      	str	r3, [r2, #0]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	24000524 	.word	0x24000524
 8005568:	24000588 	.word	0x24000588

0800556c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <xTaskGetSchedulerState+0x34>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800557a:	2301      	movs	r3, #1
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	e008      	b.n	8005592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005580:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <xTaskGetSchedulerState+0x38>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005588:	2302      	movs	r3, #2
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	e001      	b.n	8005592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800558e:	2300      	movs	r3, #0
 8005590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005592:	687b      	ldr	r3, [r7, #4]
	}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	24000574 	.word	0x24000574
 80055a4:	2400058c 	.word	0x2400058c

080055a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055b2:	4b21      	ldr	r3, [pc, #132]	; (8005638 <prvAddCurrentTaskToDelayedList+0x90>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b8:	4b20      	ldr	r3, [pc, #128]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff fb93 	bl	8004cea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d10a      	bne.n	80055e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d2:	4b1a      	ldr	r3, [pc, #104]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4819      	ldr	r0, [pc, #100]	; (8005640 <prvAddCurrentTaskToDelayedList+0x98>)
 80055dc:	f7ff fb28 	bl	8004c30 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055e0:	e026      	b.n	8005630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4413      	add	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055ea:	4b14      	ldr	r3, [pc, #80]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d209      	bcs.n	800560e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7ff fb36 	bl	8004c78 <vListInsert>
}
 800560c:	e010      	b.n	8005630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7ff fb2c 	bl	8004c78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d202      	bcs.n	8005630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <prvAddCurrentTaskToDelayedList+0xa4>)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	2400056c 	.word	0x2400056c
 800563c:	24000098 	.word	0x24000098
 8005640:	24000554 	.word	0x24000554
 8005644:	24000528 	.word	0x24000528
 8005648:	24000524 	.word	0x24000524
 800564c:	24000588 	.word	0x24000588

08005650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b04      	subs	r3, #4
 8005660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b04      	subs	r3, #4
 800566e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3b04      	subs	r3, #4
 800567e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005680:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <pxPortInitialiseStack+0x64>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b14      	subs	r3, #20
 800568a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b04      	subs	r3, #4
 8005696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f06f 0202 	mvn.w	r2, #2
 800569e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3b20      	subs	r3, #32
 80056a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056a6:	68fb      	ldr	r3, [r7, #12]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	080056b9 	.word	0x080056b9

080056b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056c2:	4b12      	ldr	r3, [pc, #72]	; (800570c <prvTaskExitError+0x54>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d00a      	beq.n	80056e2 <prvTaskExitError+0x2a>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <prvTaskExitError+0x28>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
}
 80056f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056f6:	bf00      	nop
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0fc      	beq.n	80056f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	24000010 	.word	0x24000010

08005710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005710:	4b07      	ldr	r3, [pc, #28]	; (8005730 <pxCurrentTCBConst2>)
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	6808      	ldr	r0, [r1, #0]
 8005716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571a:	f380 8809 	msr	PSP, r0
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f380 8811 	msr	BASEPRI, r0
 800572a:	4770      	bx	lr
 800572c:	f3af 8000 	nop.w

08005730 <pxCurrentTCBConst2>:
 8005730:	24000098 	.word	0x24000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop

08005738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <vPortEnterCritical+0x58>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	4a0d      	ldr	r2, [pc, #52]	; (8005790 <vPortEnterCritical+0x58>)
 800575a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <vPortEnterCritical+0x58>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10f      	bne.n	8005784 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <vPortEnterCritical+0x5c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <vPortEnterCritical+0x4c>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <vPortEnterCritical+0x4a>
	}
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	24000010 	.word	0x24000010
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800579e:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <vPortExitCritical+0x50>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <vPortExitCritical+0x24>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	607b      	str	r3, [r7, #4]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <vPortExitCritical+0x50>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <vPortExitCritical+0x50>)
 80057c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <vPortExitCritical+0x50>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <vPortExitCritical+0x42>
 80057ce:	2300      	movs	r3, #0
 80057d0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	24000010 	.word	0x24000010
 80057ec:	00000000 	.word	0x00000000

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005814:	f380 8811 	msr	BASEPRI, r0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f7ff fde0 	bl	80053e4 <vTaskSwitchContext>
 8005824:	f04f 0000 	mov.w	r0, #0
 8005828:	f380 8811 	msr	BASEPRI, r0
 800582c:	bc09      	pop	{r0, r3}
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005836:	f01e 0f10 	tst.w	lr, #16
 800583a:	bf08      	it	eq
 800583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005840:	f380 8809 	msr	PSP, r0
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst>:
 8005850:	24000098 	.word	0x24000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
}
 8005870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005872:	f7ff fcfd 	bl	8005270 <xTaskIncrementTick>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <xPortSysTickHandler+0x40>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
}
 800588e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058a8:	f7ff fc36 	bl	8005118 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058ac:	4b5b      	ldr	r3, [pc, #364]	; (8005a1c <pvPortMalloc+0x180>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058b4:	f000 f920 	bl	8005af8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058b8:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <pvPortMalloc+0x184>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8093 	bne.w	80059ec <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01d      	beq.n	8005908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80058cc:	2208      	movs	r2, #8
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4413      	add	r3, r2
 80058d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d014      	beq.n	8005908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f023 0307 	bic.w	r3, r3, #7
 80058e4:	3308      	adds	r3, #8
 80058e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <pvPortMalloc+0x6c>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	617b      	str	r3, [r7, #20]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d06e      	beq.n	80059ec <pvPortMalloc+0x150>
 800590e:	4b45      	ldr	r3, [pc, #276]	; (8005a24 <pvPortMalloc+0x188>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d869      	bhi.n	80059ec <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005918:	4b43      	ldr	r3, [pc, #268]	; (8005a28 <pvPortMalloc+0x18c>)
 800591a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800591c:	4b42      	ldr	r3, [pc, #264]	; (8005a28 <pvPortMalloc+0x18c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005922:	e004      	b.n	800592e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d903      	bls.n	8005940 <pvPortMalloc+0xa4>
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f1      	bne.n	8005924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005940:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <pvPortMalloc+0x180>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005946:	429a      	cmp	r2, r3
 8005948:	d050      	beq.n	80059ec <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2208      	movs	r2, #8
 8005950:	4413      	add	r3, r2
 8005952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	2308      	movs	r3, #8
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	429a      	cmp	r2, r3
 800596a:	d91f      	bls.n	80059ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800596c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <pvPortMalloc+0xf8>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	613b      	str	r3, [r7, #16]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059a6:	69b8      	ldr	r0, [r7, #24]
 80059a8:	f000 f908 	bl	8005bbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059ac:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <pvPortMalloc+0x188>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	4a1b      	ldr	r2, [pc, #108]	; (8005a24 <pvPortMalloc+0x188>)
 80059b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ba:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <pvPortMalloc+0x188>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <pvPortMalloc+0x190>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d203      	bcs.n	80059ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059c6:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <pvPortMalloc+0x188>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <pvPortMalloc+0x190>)
 80059cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <pvPortMalloc+0x184>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059e2:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <pvPortMalloc+0x194>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <pvPortMalloc+0x194>)
 80059ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059ec:	f7ff fba2 	bl	8005134 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <pvPortMalloc+0x174>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	60fb      	str	r3, [r7, #12]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <pvPortMalloc+0x172>
	return pvReturn;
 8005a10:	69fb      	ldr	r3, [r7, #28]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3728      	adds	r7, #40	; 0x28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	24004198 	.word	0x24004198
 8005a20:	240041ac 	.word	0x240041ac
 8005a24:	2400419c 	.word	0x2400419c
 8005a28:	24004190 	.word	0x24004190
 8005a2c:	240041a0 	.word	0x240041a0
 8005a30:	240041a4 	.word	0x240041a4

08005a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d04d      	beq.n	8005ae2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a46:	2308      	movs	r3, #8
 8005a48:	425b      	negs	r3, r3
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <vPortFree+0xb8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <vPortFree+0x44>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	60fb      	str	r3, [r7, #12]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <vPortFree+0x62>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60bb      	str	r3, [r7, #8]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	4b14      	ldr	r3, [pc, #80]	; (8005aec <vPortFree+0xb8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01e      	beq.n	8005ae2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11a      	bne.n	8005ae2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <vPortFree+0xb8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005abc:	f7ff fb2c 	bl	8005118 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <vPortFree+0xbc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4413      	add	r3, r2
 8005aca:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <vPortFree+0xbc>)
 8005acc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ace:	6938      	ldr	r0, [r7, #16]
 8005ad0:	f000 f874 	bl	8005bbc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <vPortFree+0xc0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	4a06      	ldr	r2, [pc, #24]	; (8005af4 <vPortFree+0xc0>)
 8005adc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ade:	f7ff fb29 	bl	8005134 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	240041ac 	.word	0x240041ac
 8005af0:	2400419c 	.word	0x2400419c
 8005af4:	240041a8 	.word	0x240041a8

08005af8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005afe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b04:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <prvHeapInit+0xac>)
 8005b06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3307      	adds	r3, #7
 8005b16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <prvHeapInit+0xac>)
 8005b28:	4413      	add	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b30:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <prvHeapInit+0xb0>)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b36:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <prvHeapInit+0xb0>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	4413      	add	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b44:	2208      	movs	r2, #8
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <prvHeapInit+0xb4>)
 8005b58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <prvHeapInit+0xb4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <prvHeapInit+0xb4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <prvHeapInit+0xb4>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <prvHeapInit+0xb8>)
 8005b86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <prvHeapInit+0xbc>)
 8005b8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b90:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <prvHeapInit+0xc0>)
 8005b92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b96:	601a      	str	r2, [r3, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	24000590 	.word	0x24000590
 8005ba8:	24004190 	.word	0x24004190
 8005bac:	24004198 	.word	0x24004198
 8005bb0:	240041a0 	.word	0x240041a0
 8005bb4:	2400419c 	.word	0x2400419c
 8005bb8:	240041ac 	.word	0x240041ac

08005bbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <prvInsertBlockIntoFreeList+0xac>)
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e002      	b.n	8005bd0 <prvInsertBlockIntoFreeList+0x14>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d8f7      	bhi.n	8005bca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4413      	add	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d108      	bne.n	8005bfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	441a      	add	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	441a      	add	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d118      	bne.n	8005c44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <prvInsertBlockIntoFreeList+0xb0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d00d      	beq.n	8005c3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e008      	b.n	8005c4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <prvInsertBlockIntoFreeList+0xb0>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e003      	b.n	8005c4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d002      	beq.n	8005c5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	24004190 	.word	0x24004190
 8005c6c:	24004198 	.word	0x24004198

08005c70 <__libc_init_array>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4d0d      	ldr	r5, [pc, #52]	; (8005ca8 <__libc_init_array+0x38>)
 8005c74:	4c0d      	ldr	r4, [pc, #52]	; (8005cac <__libc_init_array+0x3c>)
 8005c76:	1b64      	subs	r4, r4, r5
 8005c78:	10a4      	asrs	r4, r4, #2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	d109      	bne.n	8005c94 <__libc_init_array+0x24>
 8005c80:	4d0b      	ldr	r5, [pc, #44]	; (8005cb0 <__libc_init_array+0x40>)
 8005c82:	4c0c      	ldr	r4, [pc, #48]	; (8005cb4 <__libc_init_array+0x44>)
 8005c84:	f000 f82e 	bl	8005ce4 <_init>
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	42a6      	cmp	r6, r4
 8005c90:	d105      	bne.n	8005c9e <__libc_init_array+0x2e>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c98:	4798      	blx	r3
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7ee      	b.n	8005c7c <__libc_init_array+0xc>
 8005c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca2:	4798      	blx	r3
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	e7f2      	b.n	8005c8e <__libc_init_array+0x1e>
 8005ca8:	08005e58 	.word	0x08005e58
 8005cac:	08005e58 	.word	0x08005e58
 8005cb0:	08005e58 	.word	0x08005e58
 8005cb4:	08005e5c 	.word	0x08005e5c

08005cb8 <memcpy>:
 8005cb8:	440a      	add	r2, r1
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cc0:	d100      	bne.n	8005cc4 <memcpy+0xc>
 8005cc2:	4770      	bx	lr
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cce:	4291      	cmp	r1, r2
 8005cd0:	d1f9      	bne.n	8005cc6 <memcpy+0xe>
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <memset>:
 8005cd4:	4402      	add	r2, r0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d100      	bne.n	8005cde <memset+0xa>
 8005cdc:	4770      	bx	lr
 8005cde:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce2:	e7f9      	b.n	8005cd8 <memset+0x4>

08005ce4 <_init>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr

08005cf0 <_fini>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr
